<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE CommonMark SYSTEM "CommonMark.dtd">
<document>
  <horizontal_rule />
  <paragraph>
    <text>title: CommonMark Spec</text>
    <softbreak />
    <text>author: John MacFarlane</text>
    <softbreak />
    <text>version: 0.21</text>
    <softbreak />
    <text>date: 2015-07-14</text>
    <softbreak />
    <text>license: </text>
    <text>'</text>
    <link destination="http://creativecommons.org/licenses/by-sa/4.0/" title="">
      <text>CC-BY-SA 4.0</text>
    </link>
    <text>'</text>
    <softbreak />
    <text>...</text>
  </paragraph>
  <header level="1">
    <text>Introduction</text>
  </header>
  <header level="2">
    <text>What is Markdown?</text>
  </header>
  <paragraph>
    <text>Markdown is a plain text format for writing structured documents,</text>
    <softbreak />
    <text>based on conventions used for indicating formatting in email and</text>
    <softbreak />
    <text>usenet posts.  It was developed in 2004 by John Gruber, who wrote</text>
    <softbreak />
    <text>the first Markdown-to-HTML converter in perl, and it soon became</text>
    <softbreak />
    <text>widely used in websites.  By 2014 there were dozens of</text>
    <softbreak />
    <text>implementations in many languages.  Some of them extended basic</text>
    <softbreak />
    <text>Markdown syntax with conventions for footnotes, definition lists,</text>
    <softbreak />
    <text>tables, and other constructs, and some allowed output not just in</text>
    <softbreak />
    <text>HTML but in LaTeX and many other formats.</text>
  </paragraph>
  <header level="2">
    <text>Why is a spec needed?</text>
  </header>
  <paragraph>
    <text>John Gruber</text>
    <text>'</text>
    <text>s </text>
    <link destination="http://daringfireball.net/projects/markdown/syntax" title="">
      <text>canonical description of Markdown</text>
      <text>'</text>
      <text>s</text>
      <softbreak />
      <text>syntax</text>
    </link>
    <softbreak />
    <text>does not specify the syntax unambiguously.  Here are some examples of</text>
    <softbreak />
    <text>questions it does not answer:</text>
  </paragraph>
  <list type="ordered" start="1" tight="false" delimiter="period">
    <item>
      <paragraph>
        <text>How much indentation is needed for a sublist?  The spec says that</text>
        <softbreak />
        <text>continuation paragraphs need to be indented four spaces, but is</text>
        <softbreak />
        <text>not fully explicit about sublists.  It is natural to think that</text>
        <softbreak />
        <text>they, too, must be indented four spaces, but </text>
        <code>Markdown.pl</code>
        <text> does</text>
        <softbreak />
        <text>not require that.  This is hardly a </text>
        <text>&quot;</text>
        <text>corner case,</text>
        <text>&quot;</text>
        <text> and divergences</text>
        <softbreak />
        <text>between implementations on this issue often lead to surprises for</text>
        <softbreak />
        <text>users in real documents. (See </text>
        <link destination="http://article.gmane.org/gmane.text.markdown.general/1997" title="">
          <text>this comment by John</text>
          <softbreak />
          <text>Gruber</text>
        </link>
        <text>.)</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>Is a blank line needed before a block quote or header?</text>
        <softbreak />
        <text>Most implementations do not require the blank line.  However,</text>
        <softbreak />
        <text>this can lead to unexpected results in hard-wrapped text, and</text>
        <softbreak />
        <text>also to ambiguities in parsing (note that some implementations</text>
        <softbreak />
        <text>put the header inside the blockquote, while others do not).</text>
        <softbreak />
        <text>(John Gruber has also spoken </text>
        <link destination="http://article.gmane.org/gmane.text.markdown.general/2146" title="">
          <text>in favor of requiring the blank</text>
          <softbreak />
          <text>lines</text>
        </link>
        <text>.)</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>Is a blank line needed before an indented code block?</text>
        <softbreak />
        <text>(</text>
        <code>Markdown.pl</code>
        <text> requires it, but this is not mentioned in the</text>
        <softbreak />
        <text>documentation, and some implementations do not require it.)</text>
      </paragraph>
      <code_block info="markdown">paragraph
    code?
</code_block>
    </item>
    <item>
      <paragraph>
        <text>What is the exact rule for determining when list items get</text>
        <softbreak />
        <text>wrapped in </text>
        <code>&lt;p&gt;</code>
        <text> tags?  Can a list be partially </text>
        <text>&quot;</text>
        <text>loose</text>
        <text>&quot;</text>
        <text> and partially</text>
        <softbreak />
        <text>&quot;</text>
        <text>tight</text>
        <text>&quot;</text>
        <text>?  What should we do with a list like this?</text>
      </paragraph>
      <code_block info="markdown">1. one

2. two
3. three
</code_block>
      <paragraph>
        <text>Or this?</text>
      </paragraph>
      <code_block info="markdown">1.  one
    - a

    - b
2.  two
</code_block>
      <paragraph>
        <text>(There are some relevant comments by John Gruber</text>
        <softbreak />
        <link destination="http://article.gmane.org/gmane.text.markdown.general/2554" title="">
          <text>here</text>
        </link>
        <text>.)</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>Can list markers be indented?  Can ordered list markers be right-aligned?</text>
      </paragraph>
      <code_block info="markdown"> 8. item 1
 9. item 2
10. item 2a
</code_block>
    </item>
    <item>
      <paragraph>
        <text>Is this one list with a horizontal rule in its second item,</text>
        <softbreak />
        <text>or two lists separated by a horizontal rule?</text>
      </paragraph>
      <code_block info="markdown">* a
* * * * *
* b
</code_block>
    </item>
    <item>
      <paragraph>
        <text>When list markers change from numbers to bullets, do we have</text>
        <softbreak />
        <text>two lists or one?  (The Markdown syntax description suggests two,</text>
        <softbreak />
        <text>but the perl scripts and many other implementations produce one.)</text>
      </paragraph>
      <code_block info="markdown">1. fee
2. fie
-  foe
-  fum
</code_block>
    </item>
    <item>
      <paragraph>
        <text>What are the precedence rules for the markers of inline structure?</text>
        <softbreak />
        <text>For example, is the following a valid link, or does the code span</text>
        <softbreak />
        <text>take precedence ?</text>
      </paragraph>
      <code_block info="markdown">[a backtick (`)](/url) and [another backtick (`)](/url).
</code_block>
    </item>
    <item>
      <paragraph>
        <text>What are the precedence rules for markers of emphasis and strong</text>
        <softbreak />
        <text>emphasis?  For example, how should the following be parsed?</text>
      </paragraph>
      <code_block info="markdown">*foo *bar* baz*
</code_block>
    </item>
    <item>
      <paragraph>
        <text>What are the precedence rules between block-level and inline-level</text>
        <softbreak />
        <text>structure?  For example, how should the following be parsed?</text>
      </paragraph>
      <code_block info="markdown">- `a long code span can contain a hyphen like this
  - and it can screw things up`
</code_block>
    </item>
    <item>
      <paragraph>
        <text>Can list items include section headers?  (</text>
        <code>Markdown.pl</code>
        <text> does not</text>
        <softbreak />
        <text>allow this, but does allow blockquotes to include headers.)</text>
      </paragraph>
      <code_block info="markdown">- # Heading
</code_block>
    </item>
    <item>
      <paragraph>
        <text>Can list items be empty?</text>
      </paragraph>
      <code_block info="markdown">* a
*
* b
</code_block>
    </item>
    <item>
      <paragraph>
        <text>Can link references be defined inside block quotes or list items?</text>
      </paragraph>
      <code_block info="markdown">&gt; Blockquote [foo].
&gt;
&gt; [foo]: /url
</code_block>
    </item>
    <item>
      <paragraph>
        <text>If there are multiple definitions for the same reference, which takes</text>
        <softbreak />
        <text>precedence?</text>
      </paragraph>
      <code_block info="markdown">[foo]: /url1
[foo]: /url2

[foo][]
</code_block>
    </item>
  </list>
  <paragraph>
    <text>In the absence of a spec, early implementers consulted </text>
    <code>Markdown.pl</code>
    <softbreak />
    <text>to resolve these ambiguities.  But </text>
    <code>Markdown.pl</code>
    <text> was quite buggy, and</text>
    <softbreak />
    <text>gave manifestly bad results in many cases, so it was not a</text>
    <softbreak />
    <text>satisfactory replacement for a spec.</text>
  </paragraph>
  <paragraph>
    <text>Because there is no unambiguous spec, implementations have diverged</text>
    <softbreak />
    <text>considerably.  As a result, users are often surprised to find that</text>
    <softbreak />
    <text>a document that renders one way on one system (say, a github wiki)</text>
    <softbreak />
    <text>renders differently on another (say, converting to docbook using</text>
    <softbreak />
    <text>pandoc).  To make matters worse, because nothing in Markdown counts</text>
    <softbreak />
    <text>as a </text>
    <text>&quot;</text>
    <text>syntax error,</text>
    <text>&quot;</text>
    <text> the divergence often isn</text>
    <text>'</text>
    <text>t discovered right away.</text>
  </paragraph>
  <header level="2">
    <text>About this document</text>
  </header>
  <paragraph>
    <text>This document attempts to specify Markdown syntax unambiguously.</text>
    <softbreak />
    <text>It contains many examples with side-by-side Markdown and</text>
    <softbreak />
    <text>HTML.  These are intended to double as conformance tests.  An</text>
    <softbreak />
    <text>accompanying script </text>
    <code>spec_tests.py</code>
    <text> can be used to run the tests</text>
    <softbreak />
    <text>against any Markdown program:</text>
  </paragraph>
  <code_block>python test/spec_tests.py --spec spec.txt --program PROGRAM
</code_block>
  <paragraph>
    <text>Since this document describes how Markdown is to be parsed into</text>
    <softbreak />
    <text>an abstract syntax tree, it would have made sense to use an abstract</text>
    <softbreak />
    <text>representation of the syntax tree instead of HTML.  But HTML is capable</text>
    <softbreak />
    <text>of representing the structural distinctions we need to make, and the</text>
    <softbreak />
    <text>choice of HTML for the tests makes it possible to run the tests against</text>
    <softbreak />
    <text>an implementation without writing an abstract syntax tree renderer.</text>
  </paragraph>
  <paragraph>
    <text>This document is generated from a text file, </text>
    <code>spec.txt</code>
    <text>, written</text>
    <softbreak />
    <text>in Markdown with a small extension for the side-by-side tests.</text>
    <softbreak />
    <text>The script </text>
    <code>tools/makespec.py</code>
    <text> can be used to convert </text>
    <code>spec.txt</code>
    <text> into</text>
    <softbreak />
    <text>HTML or CommonMark (which can then be converted into other formats).</text>
  </paragraph>
  <paragraph>
    <text>In the examples, the </text>
    <code>→</code>
    <text> character is used to represent tabs.</text>
  </paragraph>
  <header level="1">
    <text>Preliminaries</text>
  </header>
  <header level="2">
    <text>Characters and lines</text>
  </header>
  <paragraph>
    <text>Any sequence of </text>
    <text>[</text>
    <text>character</text>
    <text>]</text>
    <text>s is a valid CommonMark</text>
    <softbreak />
    <text>document.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@character" title="">
      <text>character</text>
    </link>
    <text> is a Unicode code point.  Although some</text>
    <softbreak />
    <text>code points (for example, combining accents) do not correspond to</text>
    <softbreak />
    <text>characters in an intuitive sense, all code points count as characters</text>
    <softbreak />
    <text>for purposes of this spec.</text>
  </paragraph>
  <paragraph>
    <text>This spec does not specify an encoding; it thinks of lines as composed</text>
    <softbreak />
    <text>of </text>
    <text>[</text>
    <text>character</text>
    <text>]</text>
    <text>s rather than bytes.  A conforming parser may be limited</text>
    <softbreak />
    <text>to a certain encoding.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@line" title="">
      <text>line</text>
    </link>
    <text> is a sequence of zero or more </text>
    <text>[</text>
    <text>character</text>
    <text>]</text>
    <text>s</text>
    <softbreak />
    <text>followed by a </text>
    <text>[</text>
    <text>line ending</text>
    <text>]</text>
    <text> or by the end of file.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@line-ending" title="">
      <text>line ending</text>
    </link>
    <text> is a newline (</text>
    <code>U+000A</code>
    <text>), carriage return</text>
    <softbreak />
    <text>(</text>
    <code>U+000D</code>
    <text>), or carriage return + newline.</text>
  </paragraph>
  <paragraph>
    <text>A line containing no characters, or a line containing only spaces</text>
    <softbreak />
    <text>(</text>
    <code>U+0020</code>
    <text>) or tabs (</text>
    <code>U+0009</code>
    <text>), is called a </text>
    <link destination="@blank-line" title="">
      <text>blank line</text>
    </link>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>The following definitions of character classes will be used in this spec:</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@whitespace-character" title="">
      <text>whitespace character</text>
    </link>
    <text> is a space</text>
    <softbreak />
    <text>(</text>
    <code>U+0020</code>
    <text>), tab (</text>
    <code>U+0009</code>
    <text>), newline (</text>
    <code>U+000A</code>
    <text>), line tabulation (</text>
    <code>U+000B</code>
    <text>),</text>
    <softbreak />
    <text>form feed (</text>
    <code>U+000C</code>
    <text>), or carriage return (</text>
    <code>U+000D</code>
    <text>).</text>
  </paragraph>
  <paragraph>
    <link destination="@whitespace" title="">
      <text>Whitespace</text>
    </link>
    <text> is a sequence of one or more </text>
    <text>[</text>
    <text>whitespace</text>
    <softbreak />
    <text>character</text>
    <text>]</text>
    <text>s.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@unicode-whitespace-character" title="">
      <text>Unicode whitespace character</text>
    </link>
    <text> is</text>
    <softbreak />
    <text>any code point in the Unicode </text>
    <code>Zs</code>
    <text> class, or a tab (</text>
    <code>U+0009</code>
    <text>),</text>
    <softbreak />
    <text>carriage return (</text>
    <code>U+000D</code>
    <text>), newline (</text>
    <code>U+000A</code>
    <text>), or form feed</text>
    <softbreak />
    <text>(</text>
    <code>U+000C</code>
    <text>).</text>
  </paragraph>
  <paragraph>
    <link destination="@unicode-whitespace" title="">
      <text>Unicode whitespace</text>
    </link>
    <text> is a sequence of one</text>
    <softbreak />
    <text>or more </text>
    <text>[</text>
    <text>Unicode whitespace character</text>
    <text>]</text>
    <text>s.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@space" title="">
      <text>space</text>
    </link>
    <text> is </text>
    <code>U+0020</code>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@non-space-character" title="">
      <text>non-whitespace character</text>
    </link>
    <text> is any character</text>
    <softbreak />
    <text>that is not a </text>
    <text>[</text>
    <text>whitespace character</text>
    <text>]</text>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>An </text>
    <link destination="@ascii-punctuation-character" title="">
      <text>ASCII punctuation character</text>
    </link>
    <softbreak />
    <text>is </text>
    <code>!</code>
    <text>, </text>
    <code>&quot;</code>
    <text>, </text>
    <code>#</code>
    <text>, </text>
    <code>$</code>
    <text>, </text>
    <code>%</code>
    <text>, </text>
    <code>&amp;</code>
    <text>, </text>
    <code>'</code>
    <text>, </text>
    <code>(</code>
    <text>, </text>
    <code>)</code>
    <text>,</text>
    <softbreak />
    <code>*</code>
    <text>, </text>
    <code>+</code>
    <text>, </text>
    <code>,</code>
    <text>, </text>
    <code>-</code>
    <text>, </text>
    <code>.</code>
    <text>, </text>
    <code>/</code>
    <text>, </text>
    <code>:</code>
    <text>, </text>
    <code>;</code>
    <text>, </text>
    <code>&lt;</code>
    <text>, </text>
    <code>=</code>
    <text>, </text>
    <code>&gt;</code>
    <text>, </text>
    <code>?</code>
    <text>, </text>
    <code>@</code>
    <text>,</text>
    <softbreak />
    <code>[</code>
    <text>, </text>
    <code>\</code>
    <text>, </text>
    <code>]</code>
    <text>, </text>
    <code>^</code>
    <text>, </text>
    <code>_</code>
    <text>, </text>
    <code>`</code>
    <text>, </text>
    <code>{</code>
    <text>, </text>
    <code>|</code>
    <text>, </text>
    <code>}</code>
    <text>, or </text>
    <code>~</code>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@punctuation-character" title="">
      <text>punctuation character</text>
    </link>
    <text> is an </text>
    <text>[</text>
    <text>ASCII</text>
    <softbreak />
    <text>punctuation character</text>
    <text>]</text>
    <text> or anything in</text>
    <softbreak />
    <text>the Unicode classes </text>
    <code>Pc</code>
    <text>, </text>
    <code>Pd</code>
    <text>, </text>
    <code>Pe</code>
    <text>, </text>
    <code>Pf</code>
    <text>, </text>
    <code>Pi</code>
    <text>, </text>
    <code>Po</code>
    <text>, or </text>
    <code>Ps</code>
    <text>.</text>
  </paragraph>
  <header level="2">
    <text>Tabs</text>
  </header>
  <paragraph>
    <text>Tabs in lines are not expanded to </text>
    <text>[</text>
    <text>spaces</text>
    <text>]</text>
    <text>[</text>
    <text>space</text>
    <text>]</text>
    <text>.  However,</text>
    <softbreak />
    <text>in contexts where indentation is significant for the</text>
    <softbreak />
    <text>document</text>
    <text>'</text>
    <text>s structure, tabs behave as if they were replaced</text>
    <softbreak />
    <text>by spaces with a tab stop of 4 characters.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>→foo→baz→→bim</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;foo→baz→→bim
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>→foo→baz→→bim</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;foo→baz→→bim
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>a→a</text>
    <softbreak />
    <text>ὐ→a</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;a→a
ὐ→a
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>→bar</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;p&gt;bar&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <paragraph>
      <text>→foo→bar</text>
      <softbreak />
      <text>.</text>
    </paragraph>
  </block_quote>
  <html_block>&lt;blockquote&gt;
&lt;p&gt;foo→bar&lt;/p&gt;
&lt;/blockquote&gt;
.</html_block>
  <header level="2">
    <text>Insecure characters</text>
  </header>
  <paragraph>
    <text>For security reasons, the Unicode character </text>
    <code>U+0000</code>
    <text> must be replaced</text>
    <softbreak />
    <text>with the replacement character (</text>
    <code>U+FFFD</code>
    <text>).</text>
  </paragraph>
  <header level="1">
    <text>Blocks and inlines</text>
  </header>
  <paragraph>
    <text>We can think of a document as a sequence of</text>
    <softbreak />
    <link destination="@block" title="">
      <text>blocks</text>
    </link>
    <text>---structural elements like paragraphs, block</text>
    <softbreak />
    <text>quotations, lists, headers, rules, and code blocks.  Some blocks (like</text>
    <softbreak />
    <text>block quotes and list items) contain other blocks; others (like</text>
    <softbreak />
    <text>headers and paragraphs) contain </text>
    <link destination="@inline" title="">
      <text>inline</text>
    </link>
    <text> content---text,</text>
    <softbreak />
    <text>links, emphasized text, images, code, and so on.</text>
  </paragraph>
  <header level="2">
    <text>Precedence</text>
  </header>
  <paragraph>
    <text>Indicators of block structure always take precedence over indicators</text>
    <softbreak />
    <text>of inline structure.  So, for example, the following is a list with</text>
    <softbreak />
    <text>two items, not a list with one item containing a code span:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>`</text>
        <text>one</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>two</text>
        <text>`</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;`one&lt;/li&gt;
&lt;li&gt;two`&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>This means that parsing can proceed in two steps:  first, the block</text>
    <softbreak />
    <text>structure of the document can be discerned; second, text lines inside</text>
    <softbreak />
    <text>paragraphs, headers, and other block constructs can be parsed for inline</text>
    <softbreak />
    <text>structure.  The second step requires information about link reference</text>
    <softbreak />
    <text>definitions that will be available only at the end of the first</text>
    <softbreak />
    <text>step.  Note that the first step requires processing lines in sequence,</text>
    <softbreak />
    <text>but the second can be parallelized, since the inline parsing of</text>
    <softbreak />
    <text>one block element does not affect the inline parsing of any other.</text>
  </paragraph>
  <header level="2">
    <text>Container blocks and leaf blocks</text>
  </header>
  <paragraph>
    <text>We can divide blocks into two types:</text>
    <softbreak />
    <link destination="@container-block" title="">
      <text>container block</text>
    </link>
    <text>s,</text>
    <softbreak />
    <text>which can contain other blocks, and </text>
    <link destination="@leaf-block" title="">
      <text>leaf block</text>
    </link>
    <text>s,</text>
    <softbreak />
    <text>which cannot.</text>
  </paragraph>
  <header level="1">
    <text>Leaf blocks</text>
  </header>
  <paragraph>
    <text>This section describes the different kinds of leaf block that make up a</text>
    <softbreak />
    <text>Markdown document.</text>
  </paragraph>
  <header level="2">
    <text>Horizontal rules</text>
  </header>
  <paragraph>
    <text>A line consisting of 0-3 spaces of indentation, followed by a sequence</text>
    <softbreak />
    <text>of three or more matching </text>
    <code>-</code>
    <text>, </text>
    <code>_</code>
    <text>, or </text>
    <code>*</code>
    <text> characters, each followed</text>
    <softbreak />
    <text>optionally by any number of spaces, forms a</text>
    <softbreak />
    <link destination="@horizontal-rule" title="">
      <text>horizontal rule</text>
    </link>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <horizontal_rule />
  <horizontal_rule />
  <horizontal_rule />
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;
.</html_block>
  <paragraph>
    <text>Wrong characters:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>+++</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;+++&lt;/p&gt;
.</html_block>
  <header level="1">
    <text>.</text>
  </header>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;===&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Not enough characters:</text>
  </paragraph>
  <header level="2">
    <text>.</text>
  </header>
  <paragraph>
    <text>**</text>
    <softbreak />
    <text>__</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;--
**
__&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>One to three spaces indent are allowed:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <horizontal_rule />
  <horizontal_rule />
  <horizontal_rule />
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;
.</html_block>
  <paragraph>
    <text>Four spaces is too many:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>***</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;***
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Foo</text>
    <softbreak />
    <text>***</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;Foo
***&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>More than three characters may be used:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <horizontal_rule />
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;hr /&gt;
.</html_block>
  <paragraph>
    <text>Spaces are allowed between the characters:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <horizontal_rule />
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;hr /&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <horizontal_rule />
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;hr /&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <horizontal_rule />
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;hr /&gt;
.</html_block>
  <paragraph>
    <text>Spaces are allowed at the end:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <horizontal_rule />
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;hr /&gt;
.</html_block>
  <paragraph>
    <text>However, no other characters may occur in the line:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>_</text>
    <text> </text>
    <text>_</text>
    <text> </text>
    <text>_</text>
    <text> </text>
    <text>_</text>
    <text> a</text>
  </paragraph>
  <paragraph>
    <text>a------</text>
  </paragraph>
  <paragraph>
    <text>---a---</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;_ _ _ _ a&lt;/p&gt;
&lt;p&gt;a------&lt;/p&gt;
&lt;p&gt;---a---&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>It is required that all of the </text>
    <text>[</text>
    <text>non-whitespace character</text>
    <text>]</text>
    <text>s be the same.</text>
    <softbreak />
    <text>So, this is not a horizontal rule:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>-</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;-&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Horizontal rules do not need blank lines before or after:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
    </item>
  </list>
  <horizontal_rule />
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>bar</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;bar&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>Horizontal rules can interrupt a paragraph:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Foo</text>
  </paragraph>
  <horizontal_rule />
  <paragraph>
    <text>bar</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;Foo&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;bar&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>If a line of dashes that meets the above conditions for being a</text>
    <softbreak />
    <text>horizontal rule could also be interpreted as the underline of a </text>
    <text>[</text>
    <text>setext</text>
    <softbreak />
    <text>header</text>
    <text>]</text>
    <text>, the interpretation as a</text>
    <softbreak />
    <text>[</text>
    <text>setext header</text>
    <text>]</text>
    <text> takes precedence. Thus, for example,</text>
    <softbreak />
    <text>this is a setext header, not a paragraph followed by a horizontal rule:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Foo</text>
  </paragraph>
  <horizontal_rule />
  <paragraph>
    <text>bar</text>
    <softbreak />
    <text>.</text>
    <softbreak />
    <html><h2></html>
    <text>Foo</text>
    <html></h2></html>
  </paragraph>
  <html_block>&lt;p&gt;bar&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>When both a horizontal rule and a list item are possible</text>
    <softbreak />
    <text>interpretations of a line, the horizontal rule takes precedence:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>Foo</text>
      </paragraph>
    </item>
  </list>
  <horizontal_rule />
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>Bar</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;Foo&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Bar&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>If you want a horizontal rule in a list item, use a different bullet:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>Foo</text>
      </paragraph>
    </item>
    <item>
      <horizontal_rule />
    </item>
  </list>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;ul&gt;
&lt;li&gt;Foo&lt;/li&gt;
&lt;li&gt;
&lt;hr /&gt;
&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <header level="2">
    <text>ATX headers</text>
  </header>
  <paragraph>
    <text>An </text>
    <link destination="@atx-header" title="">
      <text>ATX header</text>
    </link>
    <softbreak />
    <text>consists of a string of characters, parsed as inline content, between an</text>
    <softbreak />
    <text>opening sequence of 1--6 unescaped </text>
    <code>#</code>
    <text> characters and an optional</text>
    <softbreak />
    <text>closing sequence of any number of </text>
    <code>#</code>
    <text> characters.  The opening sequence</text>
    <softbreak />
    <text>of </text>
    <code>#</code>
    <text> characters cannot be followed directly by a</text>
    <softbreak />
    <text>[</text>
    <text>non-whitespace character</text>
    <text>]</text>
    <text>. The optional closing sequence of </text>
    <code>#</code>
    <text>s must be</text>
    <softbreak />
    <text>preceded by a </text>
    <text>[</text>
    <text>space</text>
    <text>]</text>
    <text> and may be followed by spaces only.  The opening</text>
    <softbreak />
    <code>#</code>
    <text> character may be indented 0-3 spaces.  The raw contents of the</text>
    <softbreak />
    <text>header are stripped of leading and trailing spaces before being parsed</text>
    <softbreak />
    <text>as inline content.  The header level is equal to the number of </text>
    <code>#</code>
    <softbreak />
    <text>characters in the opening sequence.</text>
  </paragraph>
  <paragraph>
    <text>Simple headers:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <header level="1">
    <text>foo</text>
  </header>
  <header level="2">
    <text>foo</text>
  </header>
  <header level="3">
    <text>foo</text>
  </header>
  <header level="4">
    <text>foo</text>
  </header>
  <header level="5">
    <text>foo</text>
  </header>
  <header level="6">
    <text>foo</text>
  </header>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;h1&gt;foo&lt;/h1&gt;
&lt;h2&gt;foo&lt;/h2&gt;
&lt;h3&gt;foo&lt;/h3&gt;
&lt;h4&gt;foo&lt;/h4&gt;
&lt;h5&gt;foo&lt;/h5&gt;
&lt;h6&gt;foo&lt;/h6&gt;
.</html_block>
  <paragraph>
    <text>More than six </text>
    <code>#</code>
    <text> characters is not a header:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>####### foo</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;####### foo&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>At least one space is required between the </text>
    <code>#</code>
    <text> characters and the</text>
    <softbreak />
    <text>header</text>
    <text>'</text>
    <text>s contents, unless the header is empty.  Note that many</text>
    <softbreak />
    <text>implementations currently do not require the space.  However, the</text>
    <softbreak />
    <text>space was required by the</text>
    <softbreak />
    <link destination="http://www.aaronsw.com/2002/atx/atx.py" title="">
      <text>original ATX implementation</text>
    </link>
    <text>,</text>
    <softbreak />
    <text>and it helps prevent things like the following from being parsed as</text>
    <softbreak />
    <text>headers:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>#5 bolt</text>
  </paragraph>
  <paragraph>
    <text>#foobar</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;#5 bolt&lt;/p&gt;
&lt;p&gt;#foobar&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is not a header, because the first </text>
    <code>#</code>
    <text> is escaped:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>#</text>
    <text># foo</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;## foo&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Contents are parsed as inlines:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <header level="1">
    <text>foo </text>
    <emph>
      <text>bar</text>
    </emph>
    <text> </text>
    <text>*</text>
    <text>baz</text>
    <text>*</text>
  </header>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;h1&gt;foo &lt;em&gt;bar&lt;/em&gt; *baz*&lt;/h1&gt;
.</html_block>
  <paragraph>
    <text>Leading and trailing blanks are ignored in parsing inline content:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <header level="1">
    <text>foo</text>
  </header>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;h1&gt;foo&lt;/h1&gt;
.</html_block>
  <paragraph>
    <text>One to three spaces indentation are allowed:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <header level="3">
    <text>foo</text>
  </header>
  <header level="2">
    <text>foo</text>
  </header>
  <header level="1">
    <text>foo</text>
  </header>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><h3></html>
    <text>foo</text>
    <html></h3></html>
    <softbreak />
    <html><h2></html>
    <text>foo</text>
    <html></h2></html>
  </paragraph>
  <html_block>&lt;h1&gt;foo&lt;/h1&gt;
.</html_block>
  <paragraph>
    <text>Four spaces are too much:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text># foo</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;# foo
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
    <softbreak />
    <text># bar</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo
# bar&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>A closing sequence of </text>
    <code>#</code>
    <text> characters is optional:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <header level="2">
    <text>foo</text>
  </header>
  <header level="3">
    <text>bar</text>
  </header>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><h2></html>
    <text>foo</text>
    <html></h2></html>
    <softbreak />
    <html><h3></html>
    <text>bar</text>
    <html></h3></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>It need not be the same length as the opening sequence:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <header level="1">
    <text>foo</text>
  </header>
  <header level="5">
    <text>foo</text>
  </header>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;h1&gt;foo&lt;/h1&gt;
&lt;h5&gt;foo&lt;/h5&gt;
.</html_block>
  <paragraph>
    <text>Spaces are allowed after the closing sequence:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <header level="3">
    <text>foo</text>
  </header>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><h3></html>
    <text>foo</text>
    <html></h3></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>A sequence of </text>
    <code>#</code>
    <text> characters with a</text>
    <softbreak />
    <text>[</text>
    <text>non-whitespace character</text>
    <text>]</text>
    <text> following it</text>
    <softbreak />
    <text>is not a closing sequence, but counts as part of the contents of the</text>
    <softbreak />
    <text>header:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <header level="3">
    <text>foo ### b</text>
  </header>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><h3></html>
    <text>foo ### b</text>
    <html></h3></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>The closing sequence must be preceded by a space:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <header level="1">
    <text>foo#</text>
  </header>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;h1&gt;foo#&lt;/h1&gt;
.</html_block>
  <paragraph>
    <text>Backslash-escaped </text>
    <code>#</code>
    <text> characters do not count as part</text>
    <softbreak />
    <text>of the closing sequence:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <header level="3">
    <text>foo </text>
    <text>#</text>
    <text>##</text>
  </header>
  <header level="2">
    <text>foo #</text>
    <text>#</text>
    <text>#</text>
  </header>
  <header level="1">
    <text>foo </text>
    <text>#</text>
  </header>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><h3></html>
    <text>foo ###</text>
    <html></h3></html>
    <softbreak />
    <html><h2></html>
    <text>foo ###</text>
    <html></h2></html>
  </paragraph>
  <html_block>&lt;h1&gt;foo #&lt;/h1&gt;
.</html_block>
  <paragraph>
    <text>ATX headers need not be separated from surrounding content by blank</text>
    <softbreak />
    <text>lines, and they can interrupt paragraphs:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <horizontal_rule />
  <header level="2">
    <text>foo</text>
  </header>
  <horizontal_rule />
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;hr /&gt;
&lt;h2&gt;foo&lt;/h2&gt;
&lt;hr /&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Foo bar</text>
  </paragraph>
  <header level="1">
    <text>baz</text>
  </header>
  <paragraph>
    <text>Bar foo</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;Foo bar&lt;/p&gt;
&lt;h1&gt;baz&lt;/h1&gt;
&lt;p&gt;Bar foo&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>ATX headers can be empty:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <header level="2">
  </header>
  <header level="1">
  </header>
  <header level="3">
  </header>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><h2></html>
    <html></h2></html>
  </paragraph>
  <html_block>&lt;h1&gt;&lt;/h1&gt;
&lt;h3&gt;&lt;/h3&gt;
.</html_block>
  <header level="2">
    <text>Setext headers</text>
  </header>
  <paragraph>
    <text>A </text>
    <link destination="@setext-header" title="">
      <text>setext header</text>
    </link>
    <softbreak />
    <text>consists of a line of text, containing at least one </text>
    <text>[</text>
    <text>non-whitespace character</text>
    <text>]</text>
    <text>,</text>
    <softbreak />
    <text>with no more than 3 spaces indentation, followed by a </text>
    <text>[</text>
    <text>setext header</text>
    <softbreak />
    <text>underline</text>
    <text>]</text>
    <text>.  The line of text must be</text>
    <softbreak />
    <text>one that, were it not followed by the setext header underline,</text>
    <softbreak />
    <text>would be interpreted as part of a paragraph:  it cannot be</text>
    <softbreak />
    <text>interpretable as a </text>
    <text>[</text>
    <text>code fence</text>
    <text>]</text>
    <text>, </text>
    <text>[</text>
    <text>ATX header</text>
    <text>]</text>
    <text>[</text>
    <text>ATX headers</text>
    <text>]</text>
    <text>,</text>
    <softbreak />
    <text>[</text>
    <text>block quote</text>
    <text>]</text>
    <text>[</text>
    <text>block quotes</text>
    <text>]</text>
    <text>, </text>
    <text>[</text>
    <text>horizontal rule</text>
    <text>]</text>
    <text>[</text>
    <text>horizontal rules</text>
    <text>]</text>
    <text>,</text>
    <softbreak />
    <text>[</text>
    <text>list item</text>
    <text>]</text>
    <text>[</text>
    <text>list items</text>
    <text>]</text>
    <text>, or </text>
    <text>[</text>
    <text>HTML block</text>
    <text>]</text>
    <text>[</text>
    <text>HTML blocks</text>
    <text>]</text>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@setext-header-underline" title="">
      <text>setext header underline</text>
    </link>
    <text> is a sequence of</text>
    <softbreak />
    <code>=</code>
    <text> characters or a sequence of </text>
    <code>-</code>
    <text> characters, with no more than 3</text>
    <softbreak />
    <text>spaces indentation and any number of trailing spaces.  If a line</text>
    <softbreak />
    <text>containing a single </text>
    <code>-</code>
    <text> can be interpreted as an</text>
    <softbreak />
    <text>empty </text>
    <text>[</text>
    <text>list items</text>
    <text>]</text>
    <text>, it should be interpreted this way</text>
    <softbreak />
    <text>and not as a </text>
    <text>[</text>
    <text>setext header underline</text>
    <text>]</text>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>The header is a level 1 header if </text>
    <code>=</code>
    <text> characters are used in the</text>
    <softbreak />
    <text>[</text>
    <text>setext header underline</text>
    <text>]</text>
    <text>, and a level 2</text>
    <softbreak />
    <text>header if </text>
    <code>-</code>
    <text> characters are used.  The contents of the header are the</text>
    <softbreak />
    <text>result of parsing the first line as Markdown inline content.</text>
  </paragraph>
  <paragraph>
    <text>In general, a setext header need not be preceded or followed by a</text>
    <softbreak />
    <text>blank line.  However, it cannot interrupt a paragraph, so when a</text>
    <softbreak />
    <text>setext header comes after a paragraph, a blank line is needed between</text>
    <softbreak />
    <text>them.</text>
  </paragraph>
  <paragraph>
    <text>Simple examples:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Foo </text>
    <emph>
      <text>bar</text>
    </emph>
    <softbreak />
    <text>=========</text>
  </paragraph>
  <header level="2">
    <text>Foo </text>
    <emph>
      <text>bar</text>
    </emph>
  </header>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;h1&gt;Foo &lt;em&gt;bar&lt;/em&gt;&lt;/h1&gt;
&lt;h2&gt;Foo &lt;em&gt;bar&lt;/em&gt;&lt;/h2&gt;
.</html_block>
  <paragraph>
    <text>The underlining can be any length:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Foo</text>
  </paragraph>
  <horizontal_rule />
  <header level="1">
    <text>Foo</text>
  </header>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><h2></html>
    <text>Foo</text>
    <html></h2></html>
  </paragraph>
  <html_block>&lt;h1&gt;Foo&lt;/h1&gt;
.</html_block>
  <paragraph>
    <text>The header content can be indented up to three spaces, and need</text>
    <softbreak />
    <text>not line up with the underlining:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Foo</text>
  </paragraph>
  <horizontal_rule />
  <header level="2">
    <text>Foo</text>
  </header>
  <header level="1">
    <text>Foo</text>
  </header>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><h2></html>
    <text>Foo</text>
    <html></h2></html>
    <softbreak />
    <html><h2></html>
    <text>Foo</text>
    <html></h2></html>
  </paragraph>
  <html_block>&lt;h1&gt;Foo&lt;/h1&gt;
.</html_block>
  <paragraph>
    <text>Four spaces indent is too much:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Foo</text>
    <softbreak />
    <text>---</text>
  </paragraph>
  <code_block>Foo
</code_block>
  <horizontal_rule />
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;Foo
---

Foo
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <html_block>&lt;hr /&gt;
.</html_block>
  <paragraph>
    <text>The setext header underline can be indented up to three spaces, and</text>
    <softbreak />
    <text>may have trailing spaces:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Foo</text>
  </paragraph>
  <horizontal_rule />
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><h2></html>
    <text>Foo</text>
    <html></h2></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Four spaces is too much:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Foo</text>
    <softbreak />
    <text>---</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;Foo
---&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>The setext header underline cannot contain internal spaces:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Foo</text>
    <softbreak />
    <text>= =</text>
  </paragraph>
  <paragraph>
    <text>Foo</text>
  </paragraph>
  <horizontal_rule />
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;Foo
= =&lt;/p&gt;
&lt;p&gt;Foo&lt;/p&gt;
&lt;hr /&gt;
.</html_block>
  <paragraph>
    <text>Trailing spaces in the content line do not cause a line break:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Foo</text>
  </paragraph>
  <horizontal_rule />
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><h2></html>
    <text>Foo</text>
    <html></h2></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Nor does a backslash at the end:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Foo</text>
    <text>\</text>
  </paragraph>
  <horizontal_rule />
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><h2></html>
    <text>Foo</text>
    <text>&lt;</text>
    <text>/h2&gt;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Since indicators of block structure take precedence over</text>
    <softbreak />
    <text>indicators of inline structure, the following are setext headers:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>`</text>
    <text>Foo</text>
  </paragraph>
  <horizontal_rule />
  <paragraph>
    <text>`</text>
  </paragraph>
  <header level="2">
    <text>&lt;</text>
    <text>a title=</text>
    <text>&quot;</text>
    <text>a lot</text>
  </header>
  <paragraph>
    <text>of dashes</text>
    <text>&quot;</text>
    <text>/&gt;</text>
    <softbreak />
    <text>.</text>
    <softbreak />
    <html><h2></html>
    <text>`</text>
    <text>Foo</text>
    <html></h2></html>
  </paragraph>
  <html_block>&lt;p&gt;`&lt;/p&gt;
&lt;h2&gt;&amp;lt;a title=&amp;quot;a lot&lt;/h2&gt;
&lt;p&gt;of dashes&amp;quot;/&amp;gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>The setext header underline cannot be a </text>
    <text>[</text>
    <text>lazy continuation</text>
    <softbreak />
    <text>line</text>
    <text>]</text>
    <text> in a list item or block quote:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <paragraph>
      <text>Foo</text>
    </paragraph>
  </block_quote>
  <horizontal_rule />
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;blockquote&gt;
&lt;p&gt;Foo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>Foo</text>
      </paragraph>
    </item>
  </list>
  <horizontal_rule />
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;ul&gt;
&lt;li&gt;Foo&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
.</html_block>
  <paragraph>
    <text>A setext header cannot interrupt a paragraph:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Foo</text>
    <softbreak />
    <text>Bar</text>
  </paragraph>
  <horizontal_rule />
  <paragraph>
    <text>Foo</text>
    <softbreak />
    <text>Bar</text>
    <softbreak />
    <text>===</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;Foo
Bar&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Foo
Bar
===&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>But in general a blank line is not required before or after:</text>
  </paragraph>
  <header level="2">
    <text>.</text>
  </header>
  <header level="2">
    <text>Foo</text>
  </header>
  <header level="2">
    <text>Bar</text>
  </header>
  <paragraph>
    <text>Baz</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;hr /&gt;
&lt;h2&gt;Foo&lt;/h2&gt;
&lt;h2&gt;Bar&lt;/h2&gt;
&lt;p&gt;Baz&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Setext headers cannot be empty:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>====</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;====&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Setext header text lines must not be interpretable as block</text>
    <softbreak />
    <text>constructs other than paragraphs.  So, the line of dashes</text>
    <softbreak />
    <text>in these examples gets interpreted as a horizontal rule:</text>
  </paragraph>
  <header level="2">
    <text>.</text>
  </header>
  <horizontal_rule />
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;hr /&gt;
&lt;hr /&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
    </item>
  </list>
  <horizontal_rule />
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;ul&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
  </paragraph>
  <horizontal_rule />
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;foo
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <html_block>&lt;hr /&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <paragraph>
      <text>foo</text>
    </paragraph>
  </block_quote>
  <horizontal_rule />
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;blockquote&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
.</html_block>
  <paragraph>
    <text>If you want a header with </text>
    <code>&gt; foo</code>
    <text> as its literal text, you can</text>
    <softbreak />
    <text>use backslash escapes:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>&gt;</text>
    <text> foo</text>
  </paragraph>
  <horizontal_rule />
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><h2></html>
    <text>&gt;</text>
    <text> foo</text>
    <html></h2></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <header level="2">
    <text>Indented code blocks</text>
  </header>
  <paragraph>
    <text>An </text>
    <link destination="@indented-code-block" title="">
      <text>indented code block</text>
    </link>
    <text> is composed of one or more</text>
    <softbreak />
    <text>[</text>
    <text>indented chunk</text>
    <text>]</text>
    <text>s separated by blank lines.</text>
    <softbreak />
    <text>An </text>
    <link destination="@indented-chunk" title="">
      <text>indented chunk</text>
    </link>
    <text> is a sequence of non-blank lines,</text>
    <softbreak />
    <text>each indented four or more spaces. The contents of the code block are</text>
    <softbreak />
    <text>the literal contents of the lines, including trailing</text>
    <softbreak />
    <text>[</text>
    <text>line ending</text>
    <text>]</text>
    <text>s, minus four spaces of indentation.</text>
    <softbreak />
    <text>An indented code block has no </text>
    <text>[</text>
    <text>info string</text>
    <text>]</text>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>An indented code block cannot interrupt a paragraph, so there must be</text>
    <softbreak />
    <text>a blank line between a paragraph and a following indented code block.</text>
    <softbreak />
    <text>(A blank line is not needed, however, between a code block and a following</text>
    <softbreak />
    <text>paragraph.)</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>a simple</text>
    <softbreak />
    <text>indented code block</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;a simple
  indented code block
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>If there is any ambiguity between an interpretation of indentation</text>
    <softbreak />
    <text>as a code block and as indicating that material belongs to a </text>
    <text>[</text>
    <text>list</text>
    <softbreak />
    <text>item</text>
    <text>]</text>
    <text>[</text>
    <text>list items</text>
    <text>]</text>
    <text>, the list item interpretation takes precedence:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
      <paragraph>
        <text>bar</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;p&gt;bar&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="1" tight="false" delimiter="period">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
      <list type="bullet" tight="true">
        <item>
          <paragraph>
            <text>bar</text>
            <softbreak />
            <text>.</text>
          </paragraph>
        </item>
      </list>
    </item>
  </list>
  <html_block>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>The contents of a code block are literal text, and do not get parsed</text>
    <softbreak />
    <text>as Markdown:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><a/></html>
    <softbreak />
    <emph>
      <text>hi</text>
    </emph>
  </paragraph>
  <code_block>- one
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;&amp;lt;a/&amp;gt;
*hi*

- one
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Here we have three chunks separated by blank lines:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>chunk1</text>
  </paragraph>
  <code_block>chunk2



chunk3
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;chunk1

chunk2



chunk3
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Any initial spaces beyond four will be included in the content, even</text>
    <softbreak />
    <text>in interior blank lines:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>chunk1</text>
  </paragraph>
  <code_block>  chunk2
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;chunk1
  
  chunk2
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>An indented code block cannot interrupt a paragraph.  (This</text>
    <softbreak />
    <text>allows hanging indents and the like.)</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Foo</text>
    <softbreak />
    <text>bar</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;Foo
bar&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>However, any non-blank line with fewer than four leading spaces ends</text>
    <softbreak />
    <text>the code block immediately.  So a paragraph may occur immediately</text>
    <softbreak />
    <text>after indented code:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
    <softbreak />
    <text>bar</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;foo
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <html_block>&lt;p&gt;bar&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>And indented code can occur immediately before and after other kinds of</text>
    <softbreak />
    <text>blocks:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <header level="1">
    <text>Header</text>
  </header>
  <code_block>foo
</code_block>
  <header level="2">
    <text>Header</text>
  </header>
  <code_block>foo
</code_block>
  <horizontal_rule />
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;h1&gt;Header&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;foo
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Header&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;foo
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
.</html_block>
  <paragraph>
    <text>The first line can be indented more than four spaces:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
    <softbreak />
    <text>bar</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;    foo
bar
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Blank lines preceding or following an indented code block</text>
    <softbreak />
    <text>are not included in it:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block>foo
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;foo
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Trailing spaces are included in the code block</text>
    <text>'</text>
    <text>s content:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
    <hardbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;foo  
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <header level="2">
    <text>Fenced code blocks</text>
  </header>
  <paragraph>
    <text>A </text>
    <link destination="@code-fence" title="">
      <text>code fence</text>
    </link>
    <text> is a sequence</text>
    <softbreak />
    <text>of at least three consecutive backtick characters (</text>
    <code>`</code>
    <text>) or</text>
    <softbreak />
    <text>tildes (</text>
    <code>~</code>
    <text>).  (Tildes and backticks cannot be mixed.)</text>
    <softbreak />
    <text>A </text>
    <link destination="@fenced-code-block" title="">
      <text>fenced code block</text>
    </link>
    <softbreak />
    <text>begins with a code fence, indented no more than three spaces.</text>
  </paragraph>
  <paragraph>
    <text>The line with the opening code fence may optionally contain some text</text>
    <softbreak />
    <text>following the code fence; this is trimmed of leading and trailing</text>
    <softbreak />
    <text>spaces and called the </text>
    <link destination="@info-string" title="">
      <text>info string</text>
    </link>
    <text>.</text>
    <softbreak />
    <text>The </text>
    <text>[</text>
    <text>info string</text>
    <text>]</text>
    <text> may not contain any backtick</text>
    <softbreak />
    <text>characters.  (The reason for this restriction is that otherwise</text>
    <softbreak />
    <text>some inline code would be incorrectly interpreted as the</text>
    <softbreak />
    <text>beginning of a fenced code block.)</text>
  </paragraph>
  <paragraph>
    <text>The content of the code block consists of all subsequent lines, until</text>
    <softbreak />
    <text>a closing </text>
    <text>[</text>
    <text>code fence</text>
    <text>]</text>
    <text> of the same type as the code block</text>
    <softbreak />
    <text>began with (backticks or tildes), and with at least as many backticks</text>
    <softbreak />
    <text>or tildes as the opening code fence.  If the leading code fence is</text>
    <softbreak />
    <text>indented N spaces, then up to N spaces of indentation are removed from</text>
    <softbreak />
    <text>each line of the content (if present).  (If a content line is not</text>
    <softbreak />
    <text>indented, it is preserved unchanged.  If it is indented less than N</text>
    <softbreak />
    <text>spaces, all of the indentation is removed.)</text>
  </paragraph>
  <paragraph>
    <text>The closing code fence may be indented up to three spaces, and may be</text>
    <softbreak />
    <text>followed only by spaces, which are ignored.  If the end of the</text>
    <softbreak />
    <text>containing block (or document) is reached and no closing code fence</text>
    <softbreak />
    <text>has been found, the code block contains all of the lines after the</text>
    <softbreak />
    <text>opening code fence until the end of the containing block (or</text>
    <softbreak />
    <text>document).  (An alternative spec would require backtracking in the</text>
    <softbreak />
    <text>event that a closing code fence is not found.  But this makes parsing</text>
    <softbreak />
    <text>much less efficient, and there seems to be no real down side to the</text>
    <softbreak />
    <text>behavior described here.)</text>
  </paragraph>
  <paragraph>
    <text>A fenced code block may interrupt a paragraph, and does not require</text>
    <softbreak />
    <text>a blank line either before or after.</text>
  </paragraph>
  <paragraph>
    <text>The content of a code fence is treated as literal text, not parsed</text>
    <softbreak />
    <text>as inlines.  The first word of the </text>
    <text>[</text>
    <text>info string</text>
    <text>]</text>
    <text> is typically used to</text>
    <softbreak />
    <text>specify the language of the code sample, and rendered in the </text>
    <code>class</code>
    <softbreak />
    <text>attribute of the </text>
    <code>code</code>
    <text> tag.  However, this spec does not mandate any</text>
    <softbreak />
    <text>particular treatment of the </text>
    <text>[</text>
    <text>info string</text>
    <text>]</text>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Here is a simple example with backticks:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block>&lt;
 &gt;
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;&amp;lt;
 &amp;gt;
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>With tildes:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block>&lt;
 &gt;
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;&amp;lt;
 &amp;gt;
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>The closing code fence must use the same character as the opening</text>
    <softbreak />
    <text>fence:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block>aaa
~~~
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;aaa
~~~
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block>aaa
```
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;aaa
```
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>The closing code fence must be at least as long as the opening fence:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block>aaa
```
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;aaa
```
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block>aaa
~~~
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;aaa
~~~
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Unclosed code blocks are closed by the end of the document</text>
    <softbreak />
    <text>(or the enclosing </text>
    <text>[</text>
    <text>block quote</text>
    <text>]</text>
    <text> or </text>
    <text>[</text>
    <text>list item</text>
    <text>]</text>
    <text>):</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block>.
&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
.

.
</code_block>
  <code_block>aaa
.
&lt;pre&gt;&lt;code&gt;
</code_block>
  <paragraph>
    <text>aaa</text>
    <softbreak />
    <html></code></html>
    <html></pre></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <code_block>aaa
</code_block>
  </block_quote>
  <paragraph>
    <text>bbb</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;aaa
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;bbb&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>A code block can have all empty lines as its content:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block>
  
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;
  
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>A code block can be empty:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block></code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Fences can be indented.  If the opening fence is indented,</text>
    <softbreak />
    <text>content lines will have equivalent opening indentation removed,</text>
    <softbreak />
    <text>if present:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block>aaa
aaa
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;aaa
aaa
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block>aaa
aaa
aaa
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;aaa
aaa
aaa
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block>aaa
 aaa
aaa
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;aaa
 aaa
aaa
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Four spaces indentation produces an indented code block:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <code>aaa</code>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;```
aaa
```
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Closing fences may be indented by 0-3 spaces, and their indentation</text>
    <softbreak />
    <text>need not match that of the opening fence:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block>aaa
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;aaa
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block>aaa
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;aaa
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>This is not a closing fence, because it is indented 4 spaces:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block>aaa
    ```
.
&lt;pre&gt;&lt;code&gt;aaa
    ```
&lt;/code&gt;&lt;/pre&gt;
.


Code fences (opening and closing) cannot contain internal spaces:

.
``` ```
aaa
.
&lt;p&gt;&lt;code&gt;&lt;/code&gt;
aaa&lt;/p&gt;
.

.
~~~~~~
aaa
~~~ ~~
.
&lt;pre&gt;&lt;code&gt;aaa
~~~ ~~
&lt;/code&gt;&lt;/pre&gt;
.

Fenced code blocks can interrupt paragraphs, and can be followed
directly by paragraphs, without a blank line between:

.
foo
</code_block>
  <paragraph>
    <text>bar</text>
  </paragraph>
  <code_block>baz
.
&lt;p&gt;foo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;baz&lt;/p&gt;
.

Other blocks can also occur before and after fenced code blocks
without an intervening blank line:

.
foo
---
~~~
bar
~~~
# baz
.
&lt;h2&gt;foo&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;bar
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;baz&lt;/h1&gt;
.

An [info string] can be provided after the opening code fence.
Opening and closing spaces will be stripped, and the first word, prefixed
with `language-`, is used as the value for the `class` attribute of the
`code` element within the enclosing `pre` element.

.
```ruby
def foo(x)
  return 3
end
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;def foo(x)
  return 3
end
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block info="ruby startline=3 $%@#$">def foo(x)
  return 3
end
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;def foo(x)
  return 3
end
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block info=";"></code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code class=&quot;language-;&quot;&gt;&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>[</text>
    <text>Info string</text>
    <text>]</text>
    <text>s for backtick code blocks cannot contain backticks:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <code>aa</code>
    <softbreak />
    <text>foo</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;code&gt;aa&lt;/code&gt;
foo&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Closing code fences cannot have </text>
    <text>[</text>
    <text>info string</text>
    <text>]</text>
    <text>s:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block>``` aaa
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;``` aaa
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <header level="2">
    <text>HTML blocks</text>
  </header>
  <paragraph>
    <text>An </text>
    <link destination="@html-block" title="">
      <text>HTML block</text>
    </link>
    <text> is a group of lines that is treated</text>
    <softbreak />
    <text>as raw HTML (and will not be escaped in HTML output).</text>
  </paragraph>
  <paragraph>
    <text>There are seven kinds of </text>
    <text>[</text>
    <text>HTML block</text>
    <text>]</text>
    <text>, which can be defined</text>
    <softbreak />
    <text>by their start and end conditions.  The block begins with a line that</text>
    <softbreak />
    <text>meets a </text>
    <link destination="@start-condition" title="">
      <text>start condition</text>
    </link>
    <text> (after up to three spaces</text>
    <softbreak />
    <text>optional indentation).  It ends with the first subsequent line that</text>
    <softbreak />
    <text>meets a matching </text>
    <link destination="@end-condition" title="">
      <text>end condition</text>
    </link>
    <text>, or the last line of</text>
    <softbreak />
    <text>the document, if no line is encountered that meets the</text>
    <softbreak />
    <text>[</text>
    <text>end condition</text>
    <text>]</text>
    <text>.  If the first line meets both the </text>
    <text>[</text>
    <text>start condition</text>
    <text>]</text>
    <softbreak />
    <text>and the </text>
    <text>[</text>
    <text>end condition</text>
    <text>]</text>
    <text>, the block will contain just that line.</text>
  </paragraph>
  <list type="ordered" start="1" tight="false" delimiter="period">
    <item>
      <paragraph>
        <strong>
          <text>Start condition:</text>
        </strong>
        <text>  line begins with the string </text>
        <code>&lt;script</code>
        <text>,</text>
        <softbreak />
        <code>&lt;pre</code>
        <text>, or </text>
        <code>&lt;style</code>
        <text> (case-insensitive), followed by whitespace,</text>
        <softbreak />
        <text>the string </text>
        <code>&gt;</code>
        <text>, or the end of the line.</text>
        <hardbreak />
        <strong>
          <text>End condition:</text>
        </strong>
        <text>  line contains an end tag</text>
        <softbreak />
        <code>&lt;/script&gt;</code>
        <text>, </text>
        <code>&lt;/pre&gt;</code>
        <text>, or </text>
        <code>&lt;/style&gt;</code>
        <text> (case-insensitive; it</text>
        <softbreak />
        <text>need not match the start tag).</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <strong>
          <text>Start condition:</text>
        </strong>
        <text> line begins with the string </text>
        <code>&lt;!--</code>
        <text>.</text>
        <hardbreak />
        <strong>
          <text>End condition:</text>
        </strong>
        <text>  line contains the string </text>
        <code>--&gt;</code>
        <text>.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <strong>
          <text>Start condition:</text>
        </strong>
        <text> line begins with the string </text>
        <code>&lt;?</code>
        <text>.</text>
        <hardbreak />
        <strong>
          <text>End condition:</text>
        </strong>
        <text> line contains the string </text>
        <code>?&gt;</code>
        <text>.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <strong>
          <text>Start condition:</text>
        </strong>
        <text> line begins with the string </text>
        <code>&lt;!</code>
        <softbreak />
        <text>followed by an uppercase ASCII letter.</text>
        <hardbreak />
        <strong>
          <text>End condition:</text>
        </strong>
        <text> line contains the character </text>
        <code>&gt;</code>
        <text>.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <strong>
          <text>Start condition:</text>
        </strong>
        <text>  line begins with the string</text>
        <softbreak />
        <code>&lt;![CDATA[</code>
        <text>.</text>
        <hardbreak />
        <strong>
          <text>End condition:</text>
        </strong>
        <text> line contains the string </text>
        <code>]]&gt;</code>
        <text>.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <strong>
          <text>Start condition:</text>
        </strong>
        <text> line begins the string </text>
        <code>&lt;</code>
        <text> or </text>
        <code>&lt;/</code>
        <softbreak />
        <text>followed by one of the strings (case-insensitive) </text>
        <code>address</code>
        <text>,</text>
        <softbreak />
        <code>article</code>
        <text>, </text>
        <code>aside</code>
        <text>, </text>
        <code>base</code>
        <text>, </text>
        <code>basefont</code>
        <text>, </text>
        <code>blockquote</code>
        <text>, </text>
        <code>body</code>
        <text>,</text>
        <softbreak />
        <code>caption</code>
        <text>, </text>
        <code>center</code>
        <text>, </text>
        <code>col</code>
        <text>, </text>
        <code>colgroup</code>
        <text>, </text>
        <code>dd</code>
        <text>, </text>
        <code>details</code>
        <text>, </text>
        <code>dialog</code>
        <text>,</text>
        <softbreak />
        <code>dir</code>
        <text>, </text>
        <code>div</code>
        <text>, </text>
        <code>dl</code>
        <text>, </text>
        <code>dt</code>
        <text>, </text>
        <code>fieldset</code>
        <text>, </text>
        <code>figcaption</code>
        <text>, </text>
        <code>figure</code>
        <text>,</text>
        <softbreak />
        <code>footer</code>
        <text>, </text>
        <code>form</code>
        <text>, </text>
        <code>frame</code>
        <text>, </text>
        <code>frameset</code>
        <text>, </text>
        <code>h1</code>
        <text>, </text>
        <code>head</code>
        <text>, </text>
        <code>header</code>
        <text>, </text>
        <code>hr</code>
        <text>,</text>
        <softbreak />
        <code>html</code>
        <text>, </text>
        <code>legend</code>
        <text>, </text>
        <code>li</code>
        <text>, </text>
        <code>link</code>
        <text>, </text>
        <code>main</code>
        <text>, </text>
        <code>menu</code>
        <text>, </text>
        <code>menuitem</code>
        <text>, </text>
        <code>meta</code>
        <text>,</text>
        <softbreak />
        <code>nav</code>
        <text>, </text>
        <code>noframes</code>
        <text>, </text>
        <code>ol</code>
        <text>, </text>
        <code>optgroup</code>
        <text>, </text>
        <code>option</code>
        <text>, </text>
        <code>p</code>
        <text>, </text>
        <code>param</code>
        <text>, </text>
        <code>pre</code>
        <text>,</text>
        <softbreak />
        <code>section</code>
        <text>, </text>
        <code>source</code>
        <text>, </text>
        <code>summary</code>
        <text>, </text>
        <code>table</code>
        <text>, </text>
        <code>tbody</code>
        <text>, </text>
        <code>td</code>
        <text>,</text>
        <softbreak />
        <code>tfoot</code>
        <text>, </text>
        <code>th</code>
        <text>, </text>
        <code>thead</code>
        <text>, </text>
        <code>title</code>
        <text>, </text>
        <code>tr</code>
        <text>, </text>
        <code>track</code>
        <text>, </text>
        <code>ul</code>
        <text>, followed</text>
        <softbreak />
        <text>by </text>
        <text>[</text>
        <text>whitespace</text>
        <text>]</text>
        <text>, the end of the line, the string </text>
        <code>&gt;</code>
        <text>, or</text>
        <softbreak />
        <text>the string </text>
        <code>/&gt;</code>
        <text>.</text>
        <hardbreak />
        <strong>
          <text>End condition:</text>
        </strong>
        <text> line is followed by a </text>
        <text>[</text>
        <text>blank line</text>
        <text>]</text>
        <text>.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <strong>
          <text>Start condition:</text>
        </strong>
        <text>  line begins with a complete </text>
        <text>[</text>
        <text>open tag</text>
        <text>]</text>
        <softbreak />
        <text>or </text>
        <text>[</text>
        <text>closing tag</text>
        <text>]</text>
        <text> (with any </text>
        <text>[</text>
        <text>tag name</text>
        <text>]</text>
        <text> other than </text>
        <code>script</code>
        <text>,</text>
        <softbreak />
        <code>style</code>
        <text>, or </text>
        <code>pre</code>
        <text>) followed only by </text>
        <text>[</text>
        <text>whitespace</text>
        <text>]</text>
        <softbreak />
        <text>or the end of the line.</text>
        <hardbreak />
        <strong>
          <text>End condition:</text>
        </strong>
        <text> line is followed by a </text>
        <text>[</text>
        <text>blank line</text>
        <text>]</text>
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>All types of </text>
    <text>[</text>
    <text>HTML blocks</text>
    <text>]</text>
    <text> except type 7 may interrupt</text>
    <softbreak />
    <text>a paragraph.  Blocks of type 7 may not interrupt a paragraph.</text>
    <softbreak />
    <text>(This restricted is intended to prevent unwanted interpretation</text>
    <softbreak />
    <text>of long tags inside a wrapped paragraph as starting HTML blocks.)</text>
  </paragraph>
  <paragraph>
    <text>Some simple examples follow.  Here are some basic HTML blocks</text>
    <softbreak />
    <text>of type 6:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
           hi
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</html_block>
  <paragraph>
    <text>okay.</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
           hi
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;okay.&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block> &lt;div&gt;
  *hello*
         &lt;foo&gt;&lt;a&gt;
.
 &lt;div&gt;
  *hello*
         &lt;foo&gt;&lt;a&gt;
.</html_block>
  <paragraph>
    <text>A block can also start with a closing tag:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;/div&gt;
*foo*
.
&lt;/div&gt;
*foo*
.</html_block>
  <paragraph>
    <text>Here we have two HTML blocks with a Markdown paragraph between them:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;DIV CLASS=&quot;foo&quot;&gt;</html_block>
  <paragraph>
    <emph>
      <text>Markdown</text>
    </emph>
  </paragraph>
  <html_block>&lt;/DIV&gt;
.
&lt;DIV CLASS=&quot;foo&quot;&gt;
&lt;p&gt;&lt;em&gt;Markdown&lt;/em&gt;&lt;/p&gt;
&lt;/DIV&gt;
.</html_block>
  <paragraph>
    <text>The tag on the first line can be partial, as long</text>
    <softbreak />
    <text>as it is split where there would be whitespace:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;div id=&quot;foo&quot;
  class=&quot;bar&quot;&gt;
&lt;/div&gt;
.
&lt;div id=&quot;foo&quot;
  class=&quot;bar&quot;&gt;
&lt;/div&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;div id=&quot;foo&quot; class=&quot;bar
  baz&quot;&gt;
&lt;/div&gt;
.
&lt;div id=&quot;foo&quot; class=&quot;bar
  baz&quot;&gt;
&lt;/div&gt;
.</html_block>
  <paragraph>
    <text>An open tag need not be closed:</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;div&gt;
*foo*</html_block>
  <paragraph>
    <emph>
      <text>bar</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;div&gt;
*foo*
&lt;p&gt;&lt;em&gt;bar&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>A partial tag need not even be completed (garbage</text>
    <softbreak />
    <text>in, garbage out):</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;div id=&quot;foo&quot;
*hi*
.
&lt;div id=&quot;foo&quot;
*hi*
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;div class
foo
.
&lt;div class
foo
.</html_block>
  <paragraph>
    <text>The initial tag doesn</text>
    <text>'</text>
    <text>t even need to be a valid</text>
    <softbreak />
    <text>tag, as long as it starts like one:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;div *???-&amp;&amp;&amp;-&lt;---
*foo*
.
&lt;div *???-&amp;&amp;&amp;-&lt;---
*foo*
.</html_block>
  <paragraph>
    <text>In type 6 blocks, the initial tag need not be on a line by</text>
    <softbreak />
    <text>itself:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;div&gt;&lt;a href=&quot;bar&quot;&gt;*foo*&lt;/a&gt;&lt;/div&gt;
.
&lt;div&gt;&lt;a href=&quot;bar&quot;&gt;*foo*&lt;/a&gt;&lt;/div&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;table&gt;&lt;tr&gt;&lt;td&gt;
foo
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
.
&lt;table&gt;&lt;tr&gt;&lt;td&gt;
foo
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
.</html_block>
  <paragraph>
    <text>Everything until the next blank line or end of document</text>
    <softbreak />
    <text>gets included in the HTML block.  So, in the following</text>
    <softbreak />
    <text>example, what looks like a Markdown code block</text>
    <softbreak />
    <text>is actually part of the HTML block, which continues until a blank</text>
    <softbreak />
    <text>line or the end of the document is reached:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;div&gt;&lt;/div&gt;
``` c
int x = 33;
```
.
&lt;div&gt;&lt;/div&gt;
``` c
int x = 33;
```
.</html_block>
  <paragraph>
    <text>To start an </text>
    <text>[</text>
    <text>HTML block</text>
    <text>]</text>
    <text> with a tag that is </text>
    <emph>
      <text>not</text>
    </emph>
    <text> in the</text>
    <softbreak />
    <text>list of block-level tags in (6), you must put the tag by</text>
    <softbreak />
    <text>itself on the first line (and it must be complete):</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><a href="foo"></html>
    <softbreak />
    <emph>
      <text>bar</text>
    </emph>
    <softbreak />
    <html></a></html>
    <softbreak />
    <text>.</text>
    <softbreak />
    <html><a href="foo"></html>
    <softbreak />
    <emph>
      <text>bar</text>
    </emph>
    <softbreak />
    <html></a></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>In type 7 blocks, the </text>
    <text>[</text>
    <text>tag name</text>
    <text>]</text>
    <text> can be anything:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><Warning></html>
    <softbreak />
    <emph>
      <text>bar</text>
    </emph>
    <softbreak />
    <html></Warning></html>
    <softbreak />
    <text>.</text>
    <softbreak />
    <html><Warning></html>
    <softbreak />
    <emph>
      <text>bar</text>
    </emph>
    <softbreak />
    <html></Warning></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><i class="foo"></html>
    <softbreak />
    <emph>
      <text>bar</text>
    </emph>
    <softbreak />
    <html></i></html>
    <softbreak />
    <text>.</text>
    <softbreak />
    <html><i class="foo"></html>
    <softbreak />
    <emph>
      <text>bar</text>
    </emph>
    <softbreak />
    <html></i></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html></ins></html>
    <softbreak />
    <emph>
      <text>bar</text>
    </emph>
    <softbreak />
    <text>.</text>
    <softbreak />
    <html></ins></html>
    <softbreak />
    <emph>
      <text>bar</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>These rules are designed to allow us to work with tags that</text>
    <softbreak />
    <text>can function as either block-level or inline-level tags.</text>
    <softbreak />
    <text>The </text>
    <code>&lt;del&gt;</code>
    <text> tag is a nice example.  We can surround content with</text>
    <softbreak />
    <code>&lt;del&gt;</code>
    <text> tags in three different ways.  In this case, we get a raw</text>
    <softbreak />
    <text>HTML block, because the </text>
    <code>&lt;del&gt;</code>
    <text> tag is on a line by itself:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><del></html>
    <softbreak />
    <emph>
      <text>foo</text>
    </emph>
    <softbreak />
    <html></del></html>
    <softbreak />
    <text>.</text>
    <softbreak />
    <html><del></html>
    <softbreak />
    <emph>
      <text>foo</text>
    </emph>
    <softbreak />
    <html></del></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>In this case, we get a raw HTML block that just includes</text>
    <softbreak />
    <text>the </text>
    <code>&lt;del&gt;</code>
    <text> tag (because it ends with the following blank</text>
    <softbreak />
    <text>line).  So the contents get interpreted as CommonMark:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><del></html>
  </paragraph>
  <paragraph>
    <emph>
      <text>foo</text>
    </emph>
  </paragraph>
  <html_block>&lt;/del&gt;
.
&lt;del&gt;
&lt;p&gt;&lt;em&gt;foo&lt;/em&gt;&lt;/p&gt;
&lt;/del&gt;
.</html_block>
  <paragraph>
    <text>Finally, in this case, the </text>
    <code>&lt;del&gt;</code>
    <text> tags are interpreted</text>
    <softbreak />
    <text>as </text>
    <text>[</text>
    <text>raw HTML</text>
    <text>]</text>
    <text> </text>
    <emph>
      <text>inside</text>
    </emph>
    <text> the CommonMark paragraph.  (Because</text>
    <softbreak />
    <text>the tag is not on a line by itself, we get inline HTML</text>
    <softbreak />
    <text>rather than an </text>
    <text>[</text>
    <text>HTML block</text>
    <text>]</text>
    <text>.)</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><del></html>
    <emph>
      <text>foo</text>
    </emph>
    <html></del></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;del&gt;&lt;em&gt;foo&lt;/em&gt;&lt;/del&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>HTML tags designed to contain literal content</text>
    <softbreak />
    <text>(</text>
    <code>script</code>
    <text>, </text>
    <code>style</code>
    <text>, </text>
    <code>pre</code>
    <text>), comments, processing instructions,</text>
    <softbreak />
    <text>and declarations are treated somewhat differently.</text>
    <softbreak />
    <text>Instead of ending at the first blank line, these blocks</text>
    <softbreak />
    <text>end at the first line containing a corresponding end tag.</text>
    <softbreak />
    <text>As a result, these blocks can contain blank lines:</text>
  </paragraph>
  <paragraph>
    <text>A pre tag (type 1):</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre language=&quot;haskell&quot;&gt;&lt;code&gt;
import Text.HTML.TagSoup

main :: IO ()
main = print $ parseTags tags
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre language=&quot;haskell&quot;&gt;&lt;code&gt;
import Text.HTML.TagSoup

main :: IO ()
main = print $ parseTags tags
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>A script tag (type 1):</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;script type=&quot;text/javascript&quot;&gt;
// JavaScript example

document.getElementById(&quot;demo&quot;).innerHTML = &quot;Hello JavaScript!&quot;;
&lt;/script&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;script type=&quot;text/javascript&quot;&gt;
// JavaScript example

document.getElementById(&quot;demo&quot;).innerHTML = &quot;Hello JavaScript!&quot;;
&lt;/script&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>A style tag (type 1):</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;style
  type=&quot;text/css&quot;&gt;
h1 {color:red;}

p {color:blue;}
&lt;/style&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;style
  type=&quot;text/css&quot;&gt;
h1 {color:red;}

p {color:blue;}
&lt;/style&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>If there is no matching end tag, the block will end at the</text>
    <softbreak />
    <text>end of the document (or the enclosing </text>
    <text>[</text>
    <text>block quote</text>
    <text>]</text>
    <text> or</text>
    <softbreak />
    <text>[</text>
    <text>list item</text>
    <text>]</text>
    <text>):</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;style
  type=&quot;text/css&quot;&gt;

foo
.
&lt;style
  type=&quot;text/css&quot;&gt;

foo
.

.
&gt; &lt;div&gt;
&gt; foo

bar
.
&lt;blockquote&gt;
&lt;div&gt;
foo
&lt;/blockquote&gt;
&lt;p&gt;bar&lt;/p&gt;
.

.
- &lt;div&gt;
- foo
.
&lt;ul&gt;
&lt;li&gt;
&lt;div&gt;
&lt;/li&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;/ul&gt;
.

The end tag can occur on the same line as the start tag:

.
&lt;style&gt;p{color:red;}&lt;/style&gt;</html_block>
  <paragraph>
    <emph>
      <text>foo</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;style&gt;p{color:red;}&lt;/style&gt;</html_block>
  <html_block>&lt;p&gt;&lt;em&gt;foo&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;!-- foo --&gt;*bar*</html_block>
  <paragraph>
    <emph>
      <text>baz</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;!-- foo --&gt;*bar*</html_block>
  <html_block>&lt;p&gt;&lt;em&gt;baz&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Note that anything on the last line after the</text>
    <softbreak />
    <text>end tag will be included in the </text>
    <text>[</text>
    <text>HTML block</text>
    <text>]</text>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;script&gt;
foo
&lt;/script&gt;1. *bar*</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;script&gt;
foo
&lt;/script&gt;1. *bar*</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>A comment (type 2):</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;!-- Foo

bar
   baz --&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;!-- Foo

bar
   baz --&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>A processing instruction (type 3):</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;?php

  echo '&gt;';

?&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;?php

  echo '&gt;';

?&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>A declaration (type 4):</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;!DOCTYPE html&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;!DOCTYPE html&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>CDATA (type 5):</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;![CDATA[
function matchwo(a,b)
{
  if (a &lt; b &amp;&amp; a &lt; 0) then {
    return 1;

  } else {

    return 0;
  }
}
]]&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;![CDATA[
function matchwo(a,b)
{
  if (a &lt; b &amp;&amp; a &lt; 0) then {
    return 1;

  } else {

    return 0;
  }
}
]]&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>The opening tag can be indented 1-3 spaces, but not 4:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>  &lt;!-- foo --&gt;</html_block>
  <code_block>&lt;!-- foo --&gt;
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>  &lt;!-- foo --&gt;</html_block>
  <html_block>&lt;pre&gt;&lt;code&gt;&amp;lt;!-- foo --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>  &lt;div&gt;</html_block>
  <code_block>&lt;div&gt;
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>  &lt;div&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
.</html_block>
  <paragraph>
    <text>An HTML block of types 1--6 can interrupt a paragraph, and need not be</text>
    <softbreak />
    <text>preceded by a blank line.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Foo</text>
  </paragraph>
  <html_block>&lt;div&gt;
bar
&lt;/div&gt;
.
&lt;p&gt;Foo&lt;/p&gt;
&lt;div&gt;
bar
&lt;/div&gt;
.</html_block>
  <paragraph>
    <text>However, a following blank line is needed, except at the end of</text>
    <softbreak />
    <text>a document, and except for blocks of types 1--5, above:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;div&gt;
bar
&lt;/div&gt;
*foo*
.
&lt;div&gt;
bar
&lt;/div&gt;
*foo*
.</html_block>
  <paragraph>
    <text>HTML blocks of type 7 cannot interrupt a paragraph:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Foo</text>
    <softbreak />
    <html><a href="bar"></html>
    <softbreak />
    <text>baz</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;Foo
&lt;a href=&quot;bar&quot;&gt;
baz&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This rule differs from John Gruber</text>
    <text>'</text>
    <text>s original Markdown syntax</text>
    <softbreak />
    <text>specification, which says:</text>
  </paragraph>
  <block_quote>
    <paragraph>
      <text>The only restrictions are that block-level HTML elements —</text>
      <softbreak />
      <text>e.g. </text>
      <code>&lt;div&gt;</code>
      <text>, </text>
      <code>&lt;table&gt;</code>
      <text>, </text>
      <code>&lt;pre&gt;</code>
      <text>, </text>
      <code>&lt;p&gt;</code>
      <text>, etc. — must be separated from</text>
      <softbreak />
      <text>surrounding content by blank lines, and the start and end tags of the</text>
      <softbreak />
      <text>block should not be indented with tabs or spaces.</text>
    </paragraph>
  </block_quote>
  <paragraph>
    <text>In some ways Gruber</text>
    <text>'</text>
    <text>s rule is more restrictive than the one given</text>
    <softbreak />
    <text>here:</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>It requires that an HTML block be preceded by a blank line.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>It does not allow the start tag to be indented.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>It requires a matching end tag, which it also does not allow to</text>
        <softbreak />
        <text>be indented.</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>Most Markdown implementations (including some of Gruber</text>
    <text>'</text>
    <text>s own) do not</text>
    <softbreak />
    <text>respect all of these restrictions.</text>
  </paragraph>
  <paragraph>
    <text>There is one respect, however, in which Gruber</text>
    <text>'</text>
    <text>s rule is more liberal</text>
    <softbreak />
    <text>than the one given here, since it allows blank lines to occur inside</text>
    <softbreak />
    <text>an HTML block.  There are two reasons for disallowing them here.</text>
    <softbreak />
    <text>First, it removes the need to parse balanced tags, which is</text>
    <softbreak />
    <text>expensive and can require backtracking from the end of the document</text>
    <softbreak />
    <text>if no matching end tag is found. Second, it provides a very simple</text>
    <softbreak />
    <text>and flexible way of including Markdown content inside HTML tags:</text>
    <softbreak />
    <text>simply separate the Markdown from the HTML using blank lines:</text>
  </paragraph>
  <paragraph>
    <text>Compare:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;div&gt;</html_block>
  <paragraph>
    <emph>
      <text>Emphasized</text>
    </emph>
    <text> text.</text>
  </paragraph>
  <html_block>&lt;/div&gt;
.
&lt;div&gt;
&lt;p&gt;&lt;em&gt;Emphasized&lt;/em&gt; text.&lt;/p&gt;
&lt;/div&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;div&gt;
*Emphasized* text.
&lt;/div&gt;
.
&lt;div&gt;
*Emphasized* text.
&lt;/div&gt;
.</html_block>
  <paragraph>
    <text>Some Markdown implementations have adopted a convention of</text>
    <softbreak />
    <text>interpreting content inside tags as text if the open tag has</text>
    <softbreak />
    <text>the attribute </text>
    <code>markdown=1</code>
    <text>.  The rule given above seems a simpler and</text>
    <softbreak />
    <text>more elegant way of achieving the same expressive power, which is also</text>
    <softbreak />
    <text>much simpler to parse.</text>
  </paragraph>
  <paragraph>
    <text>The main potential drawback is that one can no longer paste HTML</text>
    <softbreak />
    <text>blocks into Markdown documents with 100% reliability.  However,</text>
    <softbreak />
    <emph>
      <text>in most cases</text>
    </emph>
    <text> this will work fine, because the blank lines in</text>
    <softbreak />
    <text>HTML are usually followed by HTML block tags.  For example:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;table&gt;</html_block>
  <html_block>&lt;tr&gt;</html_block>
  <html_block>&lt;td&gt;
Hi
&lt;/td&gt;</html_block>
  <html_block>&lt;/tr&gt;</html_block>
  <html_block>&lt;/table&gt;
.
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;
Hi
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
.</html_block>
  <paragraph>
    <text>There are problems, however, if the inner tags are indented</text>
    <softbreak />
    <emph>
      <text>and</text>
    </emph>
    <text> separated by spaces, as then they will be interpreted as</text>
    <softbreak />
    <text>an indented code block:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;table&gt;</html_block>
  <html_block>  &lt;tr&gt;</html_block>
  <code_block>&lt;td&gt;
  Hi
&lt;/td&gt;
</code_block>
  <html_block>  &lt;/tr&gt;</html_block>
  <html_block>&lt;/table&gt;
.
&lt;table&gt;
  &lt;tr&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;td&amp;gt;
  Hi
&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/tr&gt;
&lt;/table&gt;
.</html_block>
  <paragraph>
    <text>Fortunately, blank lines are usually not necessary and can be</text>
    <softbreak />
    <text>deleted.  The exception is inside </text>
    <code>&lt;pre&gt;</code>
    <text> tags, but as described</text>
    <softbreak />
    <text>above, raw HTML blocks starting with </text>
    <code>&lt;pre&gt;</code>
    <text> </text>
    <emph>
      <text>can</text>
    </emph>
    <text> contain blank</text>
    <softbreak />
    <text>lines.</text>
  </paragraph>
  <header level="2">
    <text>Link reference definitions</text>
  </header>
  <paragraph>
    <text>A </text>
    <link destination="@link-reference-definition" title="">
      <text>link reference definition</text>
    </link>
    <softbreak />
    <text>consists of a </text>
    <text>[</text>
    <text>link label</text>
    <text>]</text>
    <text>, indented up to three spaces, followed</text>
    <softbreak />
    <text>by a colon (</text>
    <code>:</code>
    <text>), optional </text>
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text> (including up to one</text>
    <softbreak />
    <text>[</text>
    <text>line ending</text>
    <text>]</text>
    <text>), a </text>
    <text>[</text>
    <text>link destination</text>
    <text>]</text>
    <text>,</text>
    <softbreak />
    <text>optional </text>
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text> (including up to one</text>
    <softbreak />
    <text>[</text>
    <text>line ending</text>
    <text>]</text>
    <text>), and an optional </text>
    <text>[</text>
    <text>link</text>
    <softbreak />
    <text>title</text>
    <text>]</text>
    <text>, which if it is present must be separated</text>
    <softbreak />
    <text>from the </text>
    <text>[</text>
    <text>link destination</text>
    <text>]</text>
    <text> by </text>
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text>.</text>
    <softbreak />
    <text>No further </text>
    <text>[</text>
    <text>non-whitespace character</text>
    <text>]</text>
    <text>s may occur on the line.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <text>[</text>
    <text>link reference definition</text>
    <text>]</text>
    <softbreak />
    <text>does not correspond to a structural element of a document.  Instead, it</text>
    <softbreak />
    <text>defines a label which can be used in </text>
    <text>[</text>
    <text>reference link</text>
    <text>]</text>
    <text>s</text>
    <softbreak />
    <text>and reference-style </text>
    <text>[</text>
    <text>images</text>
    <text>]</text>
    <text> elsewhere in the document.  </text>
    <text>[</text>
    <text>Link</text>
    <softbreak />
    <text>reference definitions</text>
    <text>]</text>
    <text> can come either before or after the links that use</text>
    <softbreak />
    <text>them.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text>: /url </text>
    <text>&quot;</text>
    <text>title</text>
    <text>&quot;</text>
  </paragraph>
  <paragraph>
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text>:</text>
    <softbreak />
    <text>/url</text>
    <hardbreak />
    <text>'</text>
    <text>the title</text>
    <text>'</text>
  </paragraph>
  <paragraph>
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;the title&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>Foo</text>
    <text>*</text>
    <text>bar</text>
    <text>]</text>
    <text>]</text>
    <text>:my</text>
    <text>_</text>
    <text>(url) </text>
    <text>'</text>
    <text>title (with parens)</text>
    <text>'</text>
  </paragraph>
  <paragraph>
    <text>[</text>
    <text>Foo</text>
    <text>*</text>
    <text>bar</text>
    <text>]</text>
    <text>]</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;my_(url)&quot; title=&quot;title (with parens)&quot;&gt;Foo*bar]&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>Foo bar</text>
    <text>]</text>
    <text>:</text>
    <softbreak />
    <html><my url></html>
    <softbreak />
    <text>'</text>
    <text>title</text>
    <text>'</text>
  </paragraph>
  <paragraph>
    <text>[</text>
    <text>Foo bar</text>
    <text>]</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;my%20url&quot; title=&quot;title&quot;&gt;Foo bar&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>The title may extend over multiple lines:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text>: /url </text>
    <text>'</text>
    <softbreak />
    <text>title</text>
    <softbreak />
    <text>line1</text>
    <softbreak />
    <text>line2</text>
    <softbreak />
    <text>'</text>
  </paragraph>
  <paragraph>
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;
title
line1
line2
&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>However, it may not contain a </text>
    <text>[</text>
    <text>blank line</text>
    <text>]</text>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text>: /url </text>
    <text>'</text>
    <text>title</text>
  </paragraph>
  <paragraph>
    <text>with blank line</text>
    <text>'</text>
  </paragraph>
  <paragraph>
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[foo]: /url 'title&lt;/p&gt;
&lt;p&gt;with blank line'&lt;/p&gt;
&lt;p&gt;[foo]&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>The title may be omitted:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text>:</text>
    <softbreak />
    <text>/url</text>
  </paragraph>
  <paragraph>
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>The link destination may not be omitted:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text>:</text>
  </paragraph>
  <paragraph>
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[foo]:&lt;/p&gt;
&lt;p&gt;[foo]&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Both title and destination can contain backslash escapes</text>
    <softbreak />
    <text>and literal backslashes:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text>: /url</text>
    <text>\</text>
    <text>bar</text>
    <text>*</text>
    <text>baz </text>
    <text>&quot;</text>
    <text>foo</text>
    <text>&quot;</text>
    <text>bar</text>
    <text>\</text>
    <text>baz</text>
    <text>&quot;</text>
  </paragraph>
  <paragraph>
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url%5Cbar*baz&quot; title=&quot;foo&amp;quot;bar\baz&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>A link can come before its corresponding definition:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;url&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>If there are several matching definitions, the first one takes</text>
    <softbreak />
    <text>precedence:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;first&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>As noted in the section on </text>
    <text>[</text>
    <text>Links</text>
    <text>]</text>
    <text>, matching of labels is</text>
    <softbreak />
    <text>case-insensitive (see </text>
    <text>[</text>
    <text>matches</text>
    <text>]</text>
    <text>).</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>FOO</text>
    </link>
    <text>: /url</text>
  </paragraph>
  <paragraph>
    <link destination="url" title="">
      <text>Foo</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot;&gt;Foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>ΑΓΩ</text>
    <text>]</text>
    <text>: /φου</text>
  </paragraph>
  <paragraph>
    <text>[</text>
    <text>αγω</text>
    <text>]</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/%CF%86%CE%BF%CF%85&quot;&gt;αγω&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Here is a link reference definition with no corresponding link.</text>
    <softbreak />
    <text>It contributes nothing to the document.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text>: /url</text>
    <softbreak />
    <text>.</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Here is another one:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <softbreak />
      <text>foo</text>
      <softbreak />
    </link>
    <text>: /url</text>
    <softbreak />
    <text>bar</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;bar&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is not a link reference definition, because there are</text>
    <softbreak />
    <text>[</text>
    <text>non-whitespace character</text>
    <text>]</text>
    <text>s after the title:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text>: /url </text>
    <text>&quot;</text>
    <text>title</text>
    <text>&quot;</text>
    <text> ok</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[foo]: /url &amp;quot;title&amp;quot; ok&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is a link reference definition, but it has no title:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text>: /url</text>
    <softbreak />
    <text>&quot;</text>
    <text>title</text>
    <text>&quot;</text>
    <text> ok</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&amp;quot;title&amp;quot; ok&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is not a link reference definition, because it is indented</text>
    <softbreak />
    <text>four spaces:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text>: /url </text>
    <text>&quot;</text>
    <text>title</text>
    <text>&quot;</text>
  </paragraph>
  <paragraph>
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;[foo]: /url &amp;quot;title&amp;quot;
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <html_block>&lt;p&gt;[foo]&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is not a link reference definition, because it occurs inside</text>
    <softbreak />
    <text>a code block:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block>[foo]: /url
</code_block>
  <paragraph>
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;[foo]: /url
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <html_block>&lt;p&gt;[foo]&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>A </text>
    <text>[</text>
    <text>link reference definition</text>
    <text>]</text>
    <text> cannot interrupt a paragraph.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Foo</text>
    <softbreak />
    <link destination="/url" title="title">
      <text>bar</text>
    </link>
    <text>: /baz</text>
  </paragraph>
  <paragraph>
    <link destination="/url" title="title">
      <text>bar</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;Foo
[bar]: /baz&lt;/p&gt;
&lt;p&gt;[bar]&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>However, it can directly follow other block elements, such as headers</text>
    <softbreak />
    <text>and horizontal rules, and it need not be followed by a blank line.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <header level="1">
    <link destination="url" title="">
      <text>Foo</text>
    </link>
  </header>
  <block_quote>
    <paragraph>
      <text>bar</text>
      <softbreak />
      <text>.</text>
    </paragraph>
  </block_quote>
  <html_block>&lt;h1&gt;&lt;a href=&quot;/url&quot;&gt;Foo&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;bar&lt;/p&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>Several </text>
    <text>[</text>
    <text>link reference definition</text>
    <text>]</text>
    <text>s</text>
    <softbreak />
    <text>can occur one after another, without intervening blank lines.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text>: /foo-url </text>
    <text>&quot;</text>
    <text>foo</text>
    <text>&quot;</text>
    <softbreak />
    <link destination="/url" title="title">
      <text>bar</text>
    </link>
    <text>: /bar-url</text>
    <softbreak />
    <text>&quot;</text>
    <text>bar</text>
    <text>&quot;</text>
    <softbreak />
    <link destination="/url" title="">
      <text>baz</text>
    </link>
    <text>: /baz-url</text>
  </paragraph>
  <paragraph>
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text>,</text>
    <softbreak />
    <link destination="/url" title="title">
      <text>bar</text>
    </link>
    <text>,</text>
    <softbreak />
    <link destination="/url" title="">
      <text>baz</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/foo-url&quot; title=&quot;foo&quot;&gt;foo&lt;/a&gt;,
&lt;a href=&quot;/bar-url&quot; title=&quot;bar&quot;&gt;bar&lt;/a&gt;,
&lt;a href=&quot;/baz-url&quot;&gt;baz&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>[</text>
    <text>Link reference definition</text>
    <text>]</text>
    <text>s can occur</text>
    <softbreak />
    <text>inside block containers, like lists and block quotations.  They</text>
    <softbreak />
    <text>affect the entire document, not just the container in which they</text>
    <softbreak />
    <text>are defined:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
  </paragraph>
  <block_quote>
    <paragraph>
      <text>.</text>
    </paragraph>
  </block_quote>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
.</html_block>
  <header level="2">
    <text>Paragraphs</text>
  </header>
  <paragraph>
    <text>A sequence of non-blank lines that cannot be interpreted as other</text>
    <softbreak />
    <text>kinds of blocks forms a </text>
    <link destination="@paragraph" title="">
      <text>paragraph</text>
    </link>
    <text>.</text>
    <softbreak />
    <text>The contents of the paragraph are the result of parsing the</text>
    <softbreak />
    <text>paragraph</text>
    <text>'</text>
    <text>s raw content as inlines.  The paragraph</text>
    <text>'</text>
    <text>s raw content</text>
    <softbreak />
    <text>is formed by concatenating the lines and removing initial and final</text>
    <softbreak />
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>A simple example with two paragraphs:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>aaa</text>
  </paragraph>
  <paragraph>
    <text>bbb</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;aaa&lt;/p&gt;
&lt;p&gt;bbb&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Paragraphs can contain multiple lines, but no blank lines:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>aaa</text>
    <softbreak />
    <text>bbb</text>
  </paragraph>
  <paragraph>
    <text>ccc</text>
    <softbreak />
    <text>ddd</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;aaa
bbb&lt;/p&gt;
&lt;p&gt;ccc
ddd&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Multiple blank lines between paragraph have no effect:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>aaa</text>
  </paragraph>
  <paragraph>
    <text>bbb</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;aaa&lt;/p&gt;
&lt;p&gt;bbb&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Leading spaces are skipped:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>aaa</text>
    <softbreak />
    <text>bbb</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;aaa
bbb&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Lines after the first may be indented any amount, since indented</text>
    <softbreak />
    <text>code blocks cannot interrupt paragraphs.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>aaa</text>
    <softbreak />
    <text>bbb</text>
    <softbreak />
    <text>ccc</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;aaa
bbb
ccc&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>However, the first line may be indented at most three spaces,</text>
    <softbreak />
    <text>or an indented code block will be triggered:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>aaa</text>
    <softbreak />
    <text>bbb</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;aaa
bbb&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>aaa</text>
    <softbreak />
    <text>bbb</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;aaa
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <html_block>&lt;p&gt;bbb&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Final spaces are stripped before inline parsing, so a paragraph</text>
    <softbreak />
    <text>that ends with two or more spaces will not end with a </text>
    <text>[</text>
    <text>hard line</text>
    <softbreak />
    <text>break</text>
    <text>]</text>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>aaa</text>
    <hardbreak />
    <text>bbb</text>
    <hardbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;aaa&lt;br /&gt;
bbb&lt;/p&gt;
.</html_block>
  <header level="2">
    <text>Blank lines</text>
  </header>
  <paragraph>
    <text>[</text>
    <text>Blank line</text>
    <text>]</text>
    <text>s between block-level elements are ignored,</text>
    <softbreak />
    <text>except for the role they play in determining whether a </text>
    <text>[</text>
    <text>list</text>
    <text>]</text>
    <softbreak />
    <text>is </text>
    <text>[</text>
    <text>tight</text>
    <text>]</text>
    <text> or </text>
    <text>[</text>
    <text>loose</text>
    <text>]</text>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Blank lines at the beginning and end of the document are also ignored.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>aaa</text>
  </paragraph>
  <header level="1">
    <text>aaa</text>
  </header>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;aaa&lt;/p&gt;
&lt;h1&gt;aaa&lt;/h1&gt;
.</html_block>
  <header level="1">
    <text>Container blocks</text>
  </header>
  <paragraph>
    <text>A </text>
    <text>[</text>
    <text>container block</text>
    <text>]</text>
    <text> is a block that has other</text>
    <softbreak />
    <text>blocks as its contents.  There are two basic kinds of container blocks:</text>
    <softbreak />
    <text>[</text>
    <text>block quotes</text>
    <text>]</text>
    <text> and </text>
    <text>[</text>
    <text>list items</text>
    <text>]</text>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>Lists</text>
    <text>]</text>
    <text> are meta-containers for </text>
    <text>[</text>
    <text>list items</text>
    <text>]</text>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>We define the syntax for container blocks recursively.  The general</text>
    <softbreak />
    <text>form of the definition is:</text>
  </paragraph>
  <block_quote>
    <paragraph>
      <text>If X is a sequence of blocks, then the result of</text>
      <softbreak />
      <text>transforming X in such-and-such a way is a container of type Y</text>
      <softbreak />
      <text>with these blocks as its content.</text>
    </paragraph>
  </block_quote>
  <paragraph>
    <text>So, we explain what counts as a block quote or list item by explaining</text>
    <softbreak />
    <text>how these can be </text>
    <emph>
      <text>generated</text>
    </emph>
    <text> from their contents. This should suffice</text>
    <softbreak />
    <text>to define the syntax, although it does not give a recipe for </text>
    <emph>
      <text>parsing</text>
    </emph>
    <softbreak />
    <text>these constructions.  (A recipe is provided below in the section entitled</text>
    <softbreak />
    <link destination="#appendix-a-parsing-strategy" title="">
      <text>A parsing strategy</text>
    </link>
    <text>.)</text>
  </paragraph>
  <header level="2">
    <text>Block quotes</text>
  </header>
  <paragraph>
    <text>A </text>
    <link destination="@block-quote-marker" title="">
      <text>block quote marker</text>
    </link>
    <softbreak />
    <text>consists of 0-3 spaces of initial indent, plus (a) the character </text>
    <code>&gt;</code>
    <text> together</text>
    <softbreak />
    <text>with a following space, or (b) a single character </text>
    <code>&gt;</code>
    <text> not followed by a space.</text>
  </paragraph>
  <paragraph>
    <text>The following rules define </text>
    <text>[</text>
    <text>block quotes</text>
    <text>]</text>
    <text>:</text>
  </paragraph>
  <list type="ordered" start="1" tight="false" delimiter="period">
    <item>
      <paragraph>
        <strong>
          <text>Basic case.</text>
        </strong>
        <text>  If a string of lines </text>
        <emph>
          <text>Ls</text>
        </emph>
        <text> constitute a sequence</text>
        <softbreak />
        <text>of blocks </text>
        <emph>
          <text>Bs</text>
        </emph>
        <text>, then the result of prepending a </text>
        <text>[</text>
        <text>block quote</text>
        <softbreak />
        <text>marker</text>
        <text>]</text>
        <text> to the beginning of each line in </text>
        <emph>
          <text>Ls</text>
        </emph>
        <softbreak />
        <text>is a </text>
        <link destination="#block-quotes" title="">
          <text>block quote</text>
        </link>
        <text> containing </text>
        <emph>
          <text>Bs</text>
        </emph>
        <text>.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <strong>
          <text>Laziness.</text>
        </strong>
        <text>  If a string of lines </text>
        <emph>
          <text>Ls</text>
        </emph>
        <text> constitute a </text>
        <link destination="#block-quotes" title="">
          <text>block</text>
          <softbreak />
          <text>quote</text>
        </link>
        <text> with contents </text>
        <emph>
          <text>Bs</text>
        </emph>
        <text>, then the result of deleting</text>
        <softbreak />
        <text>the initial </text>
        <text>[</text>
        <text>block quote marker</text>
        <text>]</text>
        <text> from one or</text>
        <softbreak />
        <text>more lines in which the next </text>
        <text>[</text>
        <text>non-whitespace character</text>
        <text>]</text>
        <text> after the </text>
        <text>[</text>
        <text>block</text>
        <softbreak />
        <text>quote marker</text>
        <text>]</text>
        <text> is </text>
        <text>[</text>
        <text>paragraph continuation</text>
        <softbreak />
        <text>text</text>
        <text>]</text>
        <text> is a block quote with </text>
        <emph>
          <text>Bs</text>
        </emph>
        <text> as its content.</text>
        <softbreak />
        <link destination="@paragraph-continuation-text" title="">
          <text>Paragraph continuation text</text>
        </link>
        <text> is text</text>
        <softbreak />
        <text>that will be parsed as part of the content of a paragraph, but does</text>
        <softbreak />
        <text>not occur at the beginning of the paragraph.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <strong>
          <text>Consecutiveness.</text>
        </strong>
        <text>  A document cannot contain two </text>
        <text>[</text>
        <text>block</text>
        <softbreak />
        <text>quotes</text>
        <text>]</text>
        <text> in a row unless there is a </text>
        <text>[</text>
        <text>blank line</text>
        <text>]</text>
        <text> between them.</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>Nothing else counts as a </text>
    <link destination="#block-quotes" title="">
      <text>block quote</text>
    </link>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Here is a simple example:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <header level="1">
      <text>Foo</text>
    </header>
    <paragraph>
      <text>bar</text>
      <softbreak />
      <text>baz</text>
      <softbreak />
      <text>.</text>
    </paragraph>
  </block_quote>
  <html_block>&lt;blockquote&gt;
&lt;h1&gt;Foo&lt;/h1&gt;
&lt;p&gt;bar
baz&lt;/p&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>The spaces after the </text>
    <code>&gt;</code>
    <text> characters can be omitted:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <header level="1">
      <text>Foo</text>
    </header>
    <paragraph>
      <text>bar</text>
      <softbreak />
      <text>baz</text>
      <softbreak />
      <text>.</text>
    </paragraph>
  </block_quote>
  <html_block>&lt;blockquote&gt;
&lt;h1&gt;Foo&lt;/h1&gt;
&lt;p&gt;bar
baz&lt;/p&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>The </text>
    <code>&gt;</code>
    <text> characters can be indented 1-3 spaces:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <header level="1">
      <text>Foo</text>
    </header>
    <paragraph>
      <text>bar</text>
      <softbreak />
      <text>baz</text>
      <softbreak />
      <text>.</text>
    </paragraph>
  </block_quote>
  <html_block>&lt;blockquote&gt;
&lt;h1&gt;Foo&lt;/h1&gt;
&lt;p&gt;bar
baz&lt;/p&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>Four spaces gives us a code block:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>&gt; # Foo</text>
    <softbreak />
    <text>&gt; bar</text>
    <softbreak />
    <text>&gt; baz</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;&amp;gt; # Foo
&amp;gt; bar
&amp;gt; baz
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>The Laziness clause allows us to omit the </text>
    <code>&gt;</code>
    <text> before a</text>
    <softbreak />
    <text>paragraph continuation line:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <header level="1">
      <text>Foo</text>
    </header>
    <paragraph>
      <text>bar</text>
      <softbreak />
      <text>baz</text>
      <softbreak />
      <text>.</text>
    </paragraph>
  </block_quote>
  <html_block>&lt;blockquote&gt;
&lt;h1&gt;Foo&lt;/h1&gt;
&lt;p&gt;bar
baz&lt;/p&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>A block quote can contain some lazy and some non-lazy</text>
    <softbreak />
    <text>continuation lines:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <paragraph>
      <text>bar</text>
      <softbreak />
      <text>baz</text>
      <softbreak />
      <text>foo</text>
      <softbreak />
      <text>.</text>
    </paragraph>
  </block_quote>
  <html_block>&lt;blockquote&gt;
&lt;p&gt;bar
baz
foo&lt;/p&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>Laziness only applies to lines that would have been continuations of</text>
    <softbreak />
    <text>paragraphs had they been prepended with </text>
    <text>[</text>
    <text>block quote marker</text>
    <text>]</text>
    <text>s.</text>
    <softbreak />
    <text>For example, the </text>
    <code>&gt;</code>
    <text> cannot be omitted in the second line of</text>
  </paragraph>
  <code_block info="markdown">&gt; foo
&gt; ---
</code_block>
  <paragraph>
    <text>without changing the meaning:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <paragraph>
      <text>foo</text>
    </paragraph>
  </block_quote>
  <horizontal_rule />
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;blockquote&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
.</html_block>
  <paragraph>
    <text>Similarly, if we omit the </text>
    <code>&gt;</code>
    <text> in the second line of</text>
  </paragraph>
  <code_block info="markdown">&gt; - foo
&gt; - bar
</code_block>
  <paragraph>
    <text>then the block quote ends after the first line:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <list type="bullet" tight="true">
      <item>
        <paragraph>
          <text>foo</text>
        </paragraph>
      </item>
    </list>
  </block_quote>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>bar</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;bar&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>For the same reason, we can</text>
    <text>'</text>
    <text>t omit the </text>
    <code>&gt;</code>
    <text> in front of</text>
    <softbreak />
    <text>subsequent lines of an indented or fenced code block:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <code_block>foo
</code_block>
  </block_quote>
  <code_block>bar
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;foo
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;bar
&lt;/code&gt;&lt;/pre&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <code_block></code_block>
  </block_quote>
  <paragraph>
    <text>foo</text>
  </paragraph>
  <code_block>.
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
.

Note that in the following case, we have a paragraph
continuation line:

.
&gt; foo
    - bar
.
&lt;blockquote&gt;
&lt;p&gt;foo
- bar&lt;/p&gt;
&lt;/blockquote&gt;
.

To see why, note that in

```markdown
&gt; foo
&gt;     - bar
</code_block>
  <paragraph>
    <text>the </text>
    <code>- bar</code>
    <text> is indented too far to start a list, and can</text>
    <text>'</text>
    <text>t</text>
    <softbreak />
    <text>be an indented code block because indented code blocks cannot</text>
    <softbreak />
    <text>interrupt paragraphs, so it is a </text>
    <text>[</text>
    <text>paragraph continuation line</text>
    <text>]</text>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>A block quote can be empty:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
  </block_quote>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;blockquote&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
  </block_quote>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;blockquote&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>A block quote can have initial or final blank lines:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <paragraph>
      <text>foo</text>
    </paragraph>
  </block_quote>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;blockquote&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>A blank line always separates block quotes:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <paragraph>
      <text>foo</text>
    </paragraph>
  </block_quote>
  <block_quote>
    <paragraph>
      <text>bar</text>
      <softbreak />
      <text>.</text>
    </paragraph>
  </block_quote>
  <html_block>&lt;blockquote&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;bar&lt;/p&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>(Most current Markdown implementations, including John Gruber</text>
    <text>'</text>
    <text>s</text>
    <softbreak />
    <text>original </text>
    <code>Markdown.pl</code>
    <text>, will parse this example as a single block quote</text>
    <softbreak />
    <text>with two paragraphs.  But it seems better to allow the author to decide</text>
    <softbreak />
    <text>whether two block quotes or one are wanted.)</text>
  </paragraph>
  <paragraph>
    <text>Consecutiveness means that if we put these block quotes together,</text>
    <softbreak />
    <text>we get a single block quote:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <paragraph>
      <text>foo</text>
      <softbreak />
      <text>bar</text>
      <softbreak />
      <text>.</text>
    </paragraph>
  </block_quote>
  <html_block>&lt;blockquote&gt;
&lt;p&gt;foo
bar&lt;/p&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>To get a block quote with two paragraphs, use:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <paragraph>
      <text>foo</text>
    </paragraph>
    <paragraph>
      <text>bar</text>
      <softbreak />
      <text>.</text>
    </paragraph>
  </block_quote>
  <html_block>&lt;blockquote&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;p&gt;bar&lt;/p&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>Block quotes can interrupt paragraphs:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
  </paragraph>
  <block_quote>
    <paragraph>
      <text>bar</text>
      <softbreak />
      <text>.</text>
    </paragraph>
  </block_quote>
  <html_block>&lt;p&gt;foo&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;bar&lt;/p&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>In general, blank lines are not needed before or after block</text>
    <softbreak />
    <text>quotes:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <paragraph>
      <text>aaa</text>
    </paragraph>
  </block_quote>
  <horizontal_rule />
  <block_quote>
    <paragraph>
      <text>bbb</text>
      <softbreak />
      <text>.</text>
    </paragraph>
  </block_quote>
  <html_block>&lt;blockquote&gt;
&lt;p&gt;aaa&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;bbb&lt;/p&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>However, because of laziness, a blank line is needed between</text>
    <softbreak />
    <text>a block quote and a following paragraph:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <paragraph>
      <text>bar</text>
      <softbreak />
      <text>baz</text>
      <softbreak />
      <text>.</text>
    </paragraph>
  </block_quote>
  <html_block>&lt;blockquote&gt;
&lt;p&gt;bar
baz&lt;/p&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <paragraph>
      <text>bar</text>
    </paragraph>
  </block_quote>
  <paragraph>
    <text>baz</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;blockquote&gt;
&lt;p&gt;bar&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;baz&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <paragraph>
      <text>bar</text>
    </paragraph>
  </block_quote>
  <paragraph>
    <text>baz</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;blockquote&gt;
&lt;p&gt;bar&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;baz&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>It is a consequence of the Laziness rule that any number</text>
    <softbreak />
    <text>of initial </text>
    <code>&gt;</code>
    <text>s may be omitted on a continuation line of a</text>
    <softbreak />
    <text>nested block quote:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <block_quote>
      <block_quote>
        <paragraph>
          <text>foo</text>
          <softbreak />
          <text>bar</text>
          <softbreak />
          <text>.</text>
        </paragraph>
      </block_quote>
    </block_quote>
  </block_quote>
  <html_block>&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;foo
bar&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <block_quote>
      <block_quote>
        <paragraph>
          <text>foo</text>
          <softbreak />
          <text>bar</text>
          <softbreak />
          <text>baz</text>
          <softbreak />
          <text>.</text>
        </paragraph>
      </block_quote>
    </block_quote>
  </block_quote>
  <html_block>&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;foo
bar
baz&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>When including an indented code block in a block quote,</text>
    <softbreak />
    <text>remember that the </text>
    <text>[</text>
    <text>block quote marker</text>
    <text>]</text>
    <text> includes</text>
    <softbreak />
    <text>both the </text>
    <code>&gt;</code>
    <text> and a following space.  So </text>
    <emph>
      <text>five spaces</text>
    </emph>
    <text> are needed after</text>
    <softbreak />
    <text>the </text>
    <code>&gt;</code>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <code_block>code
</code_block>
  </block_quote>
  <block_quote>
    <paragraph>
      <text>not code</text>
      <softbreak />
      <text>.</text>
    </paragraph>
  </block_quote>
  <html_block>&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;code
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;not code&lt;/p&gt;
&lt;/blockquote&gt;
.</html_block>
  <header level="2">
    <text>List items</text>
  </header>
  <paragraph>
    <text>A </text>
    <link destination="@list-marker" title="">
      <text>list marker</text>
    </link>
    <text> is a</text>
    <softbreak />
    <text>[</text>
    <text>bullet list marker</text>
    <text>]</text>
    <text> or an </text>
    <text>[</text>
    <text>ordered list marker</text>
    <text>]</text>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@bullet-list-marker" title="">
      <text>bullet list marker</text>
    </link>
    <softbreak />
    <text>is a </text>
    <code>-</code>
    <text>, </text>
    <code>+</code>
    <text>, or </text>
    <code>*</code>
    <text> character.</text>
  </paragraph>
  <paragraph>
    <text>An </text>
    <link destination="@ordered-list-marker" title="">
      <text>ordered list marker</text>
    </link>
    <softbreak />
    <text>is a sequence of 1--9 arabic digits (</text>
    <code>0-9</code>
    <text>), followed by either a</text>
    <softbreak />
    <code>.</code>
    <text> character or a </text>
    <code>)</code>
    <text> character.  (The reason for the length</text>
    <softbreak />
    <text>limit is that with 10 digits we start seeing integer overflows</text>
    <softbreak />
    <text>in some browsers.)</text>
  </paragraph>
  <paragraph>
    <text>The following rules define </text>
    <text>[</text>
    <text>list items</text>
    <text>]</text>
    <text>:</text>
  </paragraph>
  <list type="ordered" start="1" tight="true" delimiter="period">
    <item>
      <paragraph>
        <strong>
          <text>Basic case.</text>
        </strong>
        <text>  If a sequence of lines </text>
        <emph>
          <text>Ls</text>
        </emph>
        <text> constitute a sequence of</text>
        <softbreak />
        <text>blocks </text>
        <emph>
          <text>Bs</text>
        </emph>
        <text> starting with a </text>
        <text>[</text>
        <text>non-whitespace character</text>
        <text>]</text>
        <text> and not separated</text>
        <softbreak />
        <text>from each other by more than one blank line, and </text>
        <emph>
          <text>M</text>
        </emph>
        <text> is a list</text>
        <softbreak />
        <text>marker of width </text>
        <emph>
          <text>W</text>
        </emph>
        <text> followed by 0 </text>
        <text>&lt;</text>
        <text> </text>
        <emph>
          <text>N</text>
        </emph>
        <text> </text>
        <text>&lt;</text>
        <text> 5 spaces, then the result</text>
        <softbreak />
        <text>of prepending </text>
        <emph>
          <text>M</text>
        </emph>
        <text> and the following spaces to the first line of</text>
        <softbreak />
        <emph>
          <text>Ls</text>
        </emph>
        <text>, and indenting subsequent lines of </text>
        <emph>
          <text>Ls</text>
        </emph>
        <text> by </text>
        <emph>
          <text>W + N</text>
        </emph>
        <text> spaces, is a</text>
        <softbreak />
        <text>list item with </text>
        <emph>
          <text>Bs</text>
        </emph>
        <text> as its contents.  The type of the list item</text>
        <softbreak />
        <text>(bullet or ordered) is determined by the type of its list marker.</text>
        <softbreak />
        <text>If the list item is ordered, then it is also assigned a start</text>
        <softbreak />
        <text>number, based on the ordered list marker.</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>For example, let </text>
    <emph>
      <text>Ls</text>
    </emph>
    <text> be the lines</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>A paragraph</text>
    <softbreak />
    <text>with two lines.</text>
  </paragraph>
  <code_block>indented code
</code_block>
  <block_quote>
    <paragraph>
      <text>A block quote.</text>
      <softbreak />
      <text>.</text>
    </paragraph>
  </block_quote>
  <html_block>&lt;p&gt;A paragraph
with two lines.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;indented code
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;A block quote.&lt;/p&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>And let </text>
    <emph>
      <text>M</text>
    </emph>
    <text> be the marker </text>
    <code>1.</code>
    <text>, and </text>
    <emph>
      <text>N</text>
    </emph>
    <text> = 2.  Then rule #1 says</text>
    <softbreak />
    <text>that the following is an ordered list item with start number 1,</text>
    <softbreak />
    <text>and the same contents as </text>
    <emph>
      <text>Ls</text>
    </emph>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="1" tight="false" delimiter="period">
    <item>
      <paragraph>
        <text>A paragraph</text>
        <softbreak />
        <text>with two lines.</text>
      </paragraph>
      <code_block>indented code
</code_block>
      <block_quote>
        <paragraph>
          <text>A block quote.</text>
          <softbreak />
          <text>.</text>
        </paragraph>
      </block_quote>
    </item>
  </list>
  <html_block>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A paragraph
with two lines.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;indented code
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;A block quote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>The most important thing to notice is that the position of</text>
    <softbreak />
    <text>the text after the list marker determines how much indentation</text>
    <softbreak />
    <text>is needed in subsequent blocks in the list item.  If the list</text>
    <softbreak />
    <text>marker takes up two spaces, and there are three spaces between</text>
    <softbreak />
    <text>the list marker and the next </text>
    <text>[</text>
    <text>non-whitespace character</text>
    <text>]</text>
    <text>, then blocks</text>
    <softbreak />
    <text>must be indented five spaces in order to fall under the list</text>
    <softbreak />
    <text>item.</text>
  </paragraph>
  <paragraph>
    <text>Here are some examples showing how far content must be indented to be</text>
    <softbreak />
    <text>put under the list item:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>one</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>two</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;ul&gt;
&lt;li&gt;one&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;two&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <paragraph>
        <text>one</text>
      </paragraph>
      <paragraph>
        <text>two</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;one&lt;/p&gt;
&lt;p&gt;two&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>one</text>
      </paragraph>
    </item>
  </list>
  <code_block> two
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;ul&gt;
&lt;li&gt;one&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt; two
&lt;/code&gt;&lt;/pre&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <paragraph>
        <text>one</text>
      </paragraph>
      <paragraph>
        <text>two</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;one&lt;/p&gt;
&lt;p&gt;two&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>It is tempting to think of this in terms of columns:  the continuation</text>
    <softbreak />
    <text>blocks must be indented at least to the column of the first</text>
    <softbreak />
    <text>[</text>
    <text>non-whitespace character</text>
    <text>]</text>
    <text> after the list marker. However, that is not quite right.</text>
    <softbreak />
    <text>The spaces after the list marker determine how much relative indentation</text>
    <softbreak />
    <text>is needed.  Which column this indentation reaches will depend on</text>
    <softbreak />
    <text>how the list item is embedded in other constructions, as shown by</text>
    <softbreak />
    <text>this example:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <block_quote>
      <list type="ordered" start="1" tight="false" delimiter="period">
        <item>
          <paragraph>
            <text>one</text>
          </paragraph>
          <paragraph>
            <text>two</text>
            <softbreak />
            <text>.</text>
          </paragraph>
        </item>
      </list>
    </block_quote>
  </block_quote>
  <html_block>&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;one&lt;/p&gt;
&lt;p&gt;two&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>Here </text>
    <code>two</code>
    <text> occurs in the same column as the list marker </text>
    <code>1.</code>
    <text>,</text>
    <softbreak />
    <text>but is actually contained in the list item, because there is</text>
    <softbreak />
    <text>sufficient indentation after the last containing blockquote marker.</text>
  </paragraph>
  <paragraph>
    <text>The converse is also possible.  In the following example, the word </text>
    <code>two</code>
    <softbreak />
    <text>occurs far to the right of the initial text of the list item, </text>
    <code>one</code>
    <text>, but</text>
    <softbreak />
    <text>it is not considered part of the list item, because it is not indented</text>
    <softbreak />
    <text>far enough past the blockquote marker:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <block_quote>
      <list type="bullet" tight="true">
        <item>
          <paragraph>
            <text>one</text>
          </paragraph>
        </item>
      </list>
      <paragraph>
        <text>two</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </block_quote>
  </block_quote>
  <html_block>&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;one&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;two&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>Note that at least one space is needed between the list marker and</text>
    <softbreak />
    <text>any following content, so these are not list items:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>-one</text>
  </paragraph>
  <paragraph>
    <text>2.two</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;-one&lt;/p&gt;
&lt;p&gt;2.two&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>A list item may not contain blocks that are separated by more than</text>
    <softbreak />
    <text>one blank line.  Thus, two blank lines will end a list, unless the</text>
    <softbreak />
    <text>two blanks are contained in a </text>
    <text>[</text>
    <text>fenced code block</text>
    <text>]</text>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
      <paragraph>
        <text>bar</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>bar</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <code_block>foo


bar
</code_block>
    </item>
    <item>
      <paragraph>
        <text>baz</text>
      </paragraph>
      <list type="bullet" tight="true">
        <item>
          <code_block>foo


bar
</code_block>
        </item>
      </list>
    </item>
  </list>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;p&gt;bar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;bar&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;foo</html_block>
  <paragraph>
    <text>bar</text>
    <softbreak />
    <html></code></html>
    <html></pre></html>
  </paragraph>
  <html_block>&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;baz&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;foo</html_block>
  <paragraph>
    <text>bar</text>
    <softbreak />
    <html></code></html>
    <html></pre></html>
  </paragraph>
  <html_block>&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>A list item may contain any kind of block:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="1" tight="false" delimiter="period">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
      <code_block>bar
</code_block>
      <paragraph>
        <text>baz</text>
      </paragraph>
      <block_quote>
        <paragraph>
          <text>bam</text>
          <softbreak />
          <text>.</text>
        </paragraph>
      </block_quote>
    </item>
  </list>
  <html_block>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;baz&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;bam&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>Note that ordered list start numbers must be nine digits or less:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="123456789" tight="true" delimiter="period">
    <item>
      <paragraph>
        <text>ok</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ol start=&quot;123456789&quot;&gt;
&lt;li&gt;ok&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>1234567890. not ok</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;1234567890. not ok&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>A start number may begin with 0s:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="0" tight="true" delimiter="period">
    <item>
      <paragraph>
        <text>ok</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;ok&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="3" tight="true" delimiter="period">
    <item>
      <paragraph>
        <text>ok</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;ok&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>A start number may not be negative:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>-1. not ok</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;-1. not ok&lt;/p&gt;
.</html_block>
  <list type="ordered" start="2" tight="true" delimiter="period">
    <item>
      <paragraph>
        <strong>
          <text>Item starting with indented code.</text>
        </strong>
        <text>  If a sequence of lines </text>
        <emph>
          <text>Ls</text>
        </emph>
        <softbreak />
        <text>constitute a sequence of blocks </text>
        <emph>
          <text>Bs</text>
        </emph>
        <text> starting with an indented code</text>
        <softbreak />
        <text>block and not separated from each other by more than one blank line,</text>
        <softbreak />
        <text>and </text>
        <emph>
          <text>M</text>
        </emph>
        <text> is a list marker of width </text>
        <emph>
          <text>W</text>
        </emph>
        <text> followed by</text>
        <softbreak />
        <text>one space, then the result of prepending </text>
        <emph>
          <text>M</text>
        </emph>
        <text> and the following</text>
        <softbreak />
        <text>space to the first line of </text>
        <emph>
          <text>Ls</text>
        </emph>
        <text>, and indenting subsequent lines of</text>
        <softbreak />
        <emph>
          <text>Ls</text>
        </emph>
        <text> by </text>
        <emph>
          <text>W + 1</text>
        </emph>
        <text> spaces, is a list item with </text>
        <emph>
          <text>Bs</text>
        </emph>
        <text> as its contents.</text>
        <softbreak />
        <text>If a line is empty, then it need not be indented.  The type of the</text>
        <softbreak />
        <text>list item (bullet or ordered) is determined by the type of its list</text>
        <softbreak />
        <text>marker.  If the list item is ordered, then it is also assigned a</text>
        <softbreak />
        <text>start number, based on the ordered list marker.</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>An indented code block will have to be indented four spaces beyond</text>
    <softbreak />
    <text>the edge of the region where text will be included in the list item.</text>
    <softbreak />
    <text>In the following case that is 6 spaces:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
      <code_block>bar
</code_block>
    </item>
  </list>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bar
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>And in this case it is 11 spaces:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="10" tight="false" delimiter="period">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
      <code_block>bar
</code_block>
    </item>
  </list>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;ol start=&quot;10&quot;&gt;
&lt;li&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bar
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>If the </text>
    <emph>
      <text>first</text>
    </emph>
    <text> block in the list item is an indented code block,</text>
    <softbreak />
    <text>then by rule #2, the contents must be indented </text>
    <emph>
      <text>one</text>
    </emph>
    <text> space after the</text>
    <softbreak />
    <text>list marker:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>indented code</text>
  </paragraph>
  <paragraph>
    <text>paragraph</text>
  </paragraph>
  <code_block>more code
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;indented code
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <html_block>&lt;p&gt;paragraph&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;more code
&lt;/code&gt;&lt;/pre&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="1" tight="false" delimiter="period">
    <item>
      <code_block>indented code
</code_block>
      <paragraph>
        <text>paragraph</text>
      </paragraph>
      <code_block>more code
</code_block>
    </item>
  </list>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;ol&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;indented code
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;paragraph&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;more code
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>Note that an additional space indent is interpreted as space</text>
    <softbreak />
    <text>inside the code block:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="1" tight="false" delimiter="period">
    <item>
      <code_block> indented code
</code_block>
      <paragraph>
        <text>paragraph</text>
      </paragraph>
      <code_block>more code
</code_block>
    </item>
  </list>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;ol&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt; indented code
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;paragraph&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;more code
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>Note that rules #1 and #2 only apply to two cases:  (a) cases</text>
    <softbreak />
    <text>in which the lines to be included in a list item begin with a</text>
    <softbreak />
    <text>[</text>
    <text>non-whitespace character</text>
    <text>]</text>
    <text>, and (b) cases in which</text>
    <softbreak />
    <text>they begin with an indented code</text>
    <softbreak />
    <text>block.  In a case like the following, where the first block begins with</text>
    <softbreak />
    <text>a three-space indent, the rules do not allow us to form a list item by</text>
    <softbreak />
    <text>indenting the whole thing and prepending a list marker:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
  </paragraph>
  <paragraph>
    <text>bar</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo&lt;/p&gt;
&lt;p&gt;bar&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>bar</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;ul&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;bar&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is not a significant restriction, because when a block begins</text>
    <softbreak />
    <text>with 1-3 spaces indent, the indentation can always be removed without</text>
    <softbreak />
    <text>a change in interpretation, allowing rule #1 to be applied.  So, in</text>
    <softbreak />
    <text>the above case:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
      <paragraph>
        <text>bar</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;p&gt;bar&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <list type="ordered" start="3" tight="true" delimiter="period">
    <item>
      <paragraph>
        <strong>
          <text>Item starting with a blank line.</text>
        </strong>
        <text>  If a sequence of lines </text>
        <emph>
          <text>Ls</text>
        </emph>
        <softbreak />
        <text>starting with a single </text>
        <text>[</text>
        <text>blank line</text>
        <text>]</text>
        <text> constitute a (possibly empty)</text>
        <softbreak />
        <text>sequence of blocks </text>
        <emph>
          <text>Bs</text>
        </emph>
        <text>, not separated from each other by more than</text>
        <softbreak />
        <text>one blank line, and </text>
        <emph>
          <text>M</text>
        </emph>
        <text> is a list marker of width </text>
        <emph>
          <text>W</text>
        </emph>
        <text>,</text>
        <softbreak />
        <text>then the result of prepending </text>
        <emph>
          <text>M</text>
        </emph>
        <text> to the first line of </text>
        <emph>
          <text>Ls</text>
        </emph>
        <text>, and</text>
        <softbreak />
        <text>indenting subsequent lines of </text>
        <emph>
          <text>Ls</text>
        </emph>
        <text> by </text>
        <emph>
          <text>W + 1</text>
        </emph>
        <text> spaces, is a list</text>
        <softbreak />
        <text>item with </text>
        <emph>
          <text>Bs</text>
        </emph>
        <text> as its contents.</text>
        <softbreak />
        <text>If a line is empty, then it need not be indented.  The type of the</text>
        <softbreak />
        <text>list item (bullet or ordered) is determined by the type of its list</text>
        <softbreak />
        <text>marker.  If the list item is ordered, then it is also assigned a</text>
        <softbreak />
        <text>start number, based on the ordered list marker.</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>Here are some list items that start with a blank line but are not empty:</text>
  </paragraph>
  <header level="2">
    <text>.</text>
  </header>
  <header level="2">
    <text>foo</text>
  </header>
  <code_block>bar
</code_block>
  <list type="bullet" tight="true">
    <item>
      <code_block>baz
</code_block>
    </item>
  </list>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;ul&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;bar
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;baz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>A list item can begin with at most one blank line.</text>
    <softbreak />
    <text>In the following example, </text>
    <code>foo</code>
    <text> is not part of the list</text>
    <softbreak />
    <text>item:</text>
  </paragraph>
  <header level="2">
    <text>.</text>
  </header>
  <paragraph>
    <text>foo</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;foo&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Here is an empty bullet list item:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
    </item>
    <item>
    </item>
    <item>
      <paragraph>
        <text>bar</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;bar&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>It does not matter whether there are spaces following the </text>
    <text>[</text>
    <text>list marker</text>
    <text>]</text>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
    </item>
    <item>
    </item>
    <item>
      <paragraph>
        <text>bar</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;bar&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>Here is an empty ordered list item:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="1" tight="true" delimiter="period">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
    </item>
    <item>
    </item>
    <item>
      <paragraph>
        <text>bar</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ol&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;bar&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>A list may start or end with an empty list item:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
    </item>
  </list>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <list type="ordered" start="4" tight="true" delimiter="period">
    <item>
      <paragraph>
        <strong>
          <text>Indentation.</text>
        </strong>
        <text>  If a sequence of lines </text>
        <emph>
          <text>Ls</text>
        </emph>
        <text> constitutes a list item</text>
        <softbreak />
        <text>according to rule #1, #2, or #3, then the result of indenting each line</text>
        <softbreak />
        <text>of </text>
        <emph>
          <text>Ls</text>
        </emph>
        <text> by 1-3 spaces (the same for each line) also constitutes a</text>
        <softbreak />
        <text>list item with the same contents and attributes.  If a line is</text>
        <softbreak />
        <text>empty, then it need not be indented.</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>Indented one space:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="1" tight="false" delimiter="period">
    <item>
      <paragraph>
        <text>A paragraph</text>
        <softbreak />
        <text>with two lines.</text>
      </paragraph>
      <code_block>indented code
</code_block>
      <block_quote>
        <paragraph>
          <text>A block quote.</text>
          <softbreak />
          <text>.</text>
        </paragraph>
      </block_quote>
    </item>
  </list>
  <html_block>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A paragraph
with two lines.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;indented code
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;A block quote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>Indented two spaces:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="1" tight="false" delimiter="period">
    <item>
      <paragraph>
        <text>A paragraph</text>
        <softbreak />
        <text>with two lines.</text>
      </paragraph>
      <code_block>indented code
</code_block>
      <block_quote>
        <paragraph>
          <text>A block quote.</text>
          <softbreak />
          <text>.</text>
        </paragraph>
      </block_quote>
    </item>
  </list>
  <html_block>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A paragraph
with two lines.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;indented code
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;A block quote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>Indented three spaces:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="1" tight="false" delimiter="period">
    <item>
      <paragraph>
        <text>A paragraph</text>
        <softbreak />
        <text>with two lines.</text>
      </paragraph>
      <code_block>indented code
</code_block>
      <block_quote>
        <paragraph>
          <text>A block quote.</text>
          <softbreak />
          <text>.</text>
        </paragraph>
      </block_quote>
    </item>
  </list>
  <html_block>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A paragraph
with two lines.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;indented code
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;A block quote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>Four spaces indent gives a code block:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>1.  A paragraph</text>
    <softbreak />
    <text>with two lines.</text>
  </paragraph>
  <code_block>        indented code

    &gt; A block quote.
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;1.  A paragraph
    with two lines.

        indented code

    &amp;gt; A block quote.
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="5" tight="true" delimiter="period">
    <item>
      <paragraph>
        <strong>
          <text>Laziness.</text>
        </strong>
        <text>  If a string of lines </text>
        <emph>
          <text>Ls</text>
        </emph>
        <text> constitute a </text>
        <link destination="#list-items" title="">
          <text>list</text>
          <softbreak />
          <text>item</text>
        </link>
        <text> with contents </text>
        <emph>
          <text>Bs</text>
        </emph>
        <text>, then the result of deleting</text>
        <softbreak />
        <text>some or all of the indentation from one or more lines in which the</text>
        <softbreak />
        <text>next </text>
        <text>[</text>
        <text>non-whitespace character</text>
        <text>]</text>
        <text> after the indentation is</text>
        <softbreak />
        <text>[</text>
        <text>paragraph continuation text</text>
        <text>]</text>
        <text> is a</text>
        <softbreak />
        <text>list item with the same contents and attributes.  The unindented</text>
        <softbreak />
        <text>lines are called</text>
        <softbreak />
        <link destination="@lazy-continuation-line" title="">
          <text>lazy continuation line</text>
        </link>
        <text>s.</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>Here is an example with </text>
    <text>[</text>
    <text>lazy continuation line</text>
    <text>]</text>
    <text>s:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="1" tight="false" delimiter="period">
    <item>
      <paragraph>
        <text>A paragraph</text>
        <softbreak />
        <text>with two lines.</text>
      </paragraph>
      <code_block>indented code
</code_block>
      <block_quote>
        <paragraph>
          <text>A block quote.</text>
          <softbreak />
          <text>.</text>
        </paragraph>
      </block_quote>
    </item>
  </list>
  <html_block>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A paragraph
with two lines.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;indented code
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;A block quote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>Indentation can be partially deleted:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="1" tight="true" delimiter="period">
    <item>
      <paragraph>
        <text>A paragraph</text>
        <softbreak />
        <text>with two lines.</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ol&gt;
&lt;li&gt;A paragraph
with two lines.&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>These examples show how laziness can work in nested structures:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <list type="ordered" start="1" tight="true" delimiter="period">
      <item>
        <block_quote>
          <paragraph>
            <text>Blockquote</text>
            <softbreak />
            <text>continued here.</text>
            <softbreak />
            <text>.</text>
          </paragraph>
        </block_quote>
      </item>
    </list>
  </block_quote>
  <html_block>&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Blockquote
continued here.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <block_quote>
    <list type="ordered" start="1" tight="true" delimiter="period">
      <item>
        <block_quote>
          <paragraph>
            <text>Blockquote</text>
            <softbreak />
            <text>continued here.</text>
            <softbreak />
            <text>.</text>
          </paragraph>
        </block_quote>
      </item>
    </list>
  </block_quote>
  <html_block>&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Blockquote
continued here.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
.</html_block>
  <list type="ordered" start="6" tight="true" delimiter="period">
    <item>
      <paragraph>
        <strong>
          <text>That</text>
          <text>'</text>
          <text>s all.</text>
        </strong>
        <text> Nothing that is not counted as a list item by rules</text>
        <softbreak />
        <text>#1--5 counts as a </text>
        <link destination="#list-items" title="">
          <text>list item</text>
        </link>
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>The rules for sublists follow from the general rules above.  A sublist</text>
    <softbreak />
    <text>must be indented the same number of spaces a paragraph would need to be</text>
    <softbreak />
    <text>in order to be included in the list item.</text>
  </paragraph>
  <paragraph>
    <text>So, in this case we need two spaces indent:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
      <list type="bullet" tight="true">
        <item>
          <paragraph>
            <text>bar</text>
          </paragraph>
          <list type="bullet" tight="true">
            <item>
              <paragraph>
                <text>baz</text>
                <softbreak />
                <text>.</text>
              </paragraph>
            </item>
          </list>
        </item>
      </list>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;foo
&lt;ul&gt;
&lt;li&gt;bar
&lt;ul&gt;
&lt;li&gt;baz&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>One is not enough:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>bar</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>baz</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;li&gt;bar&lt;/li&gt;
&lt;li&gt;baz&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>Here we need four, because the list marker is wider:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="10" tight="true" delimiter="paren">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
      <list type="bullet" tight="true">
        <item>
          <paragraph>
            <text>bar</text>
            <softbreak />
            <text>.</text>
          </paragraph>
        </item>
      </list>
    </item>
  </list>
  <html_block>&lt;ol start=&quot;10&quot;&gt;
&lt;li&gt;foo
&lt;ul&gt;
&lt;li&gt;bar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>Three is not enough:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="10" tight="true" delimiter="paren">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
    </item>
  </list>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>bar</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ol start=&quot;10&quot;&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;bar&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>A list may be the first block in a list item:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <list type="bullet" tight="true">
        <item>
          <paragraph>
            <text>foo</text>
            <softbreak />
            <text>.</text>
          </paragraph>
        </item>
      </list>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="1" tight="true" delimiter="period">
    <item>
      <list type="bullet" tight="true">
        <item>
          <list type="ordered" start="2" tight="true" delimiter="period">
            <item>
              <paragraph>
                <text>foo</text>
                <softbreak />
                <text>.</text>
              </paragraph>
            </item>
          </list>
        </item>
      </list>
    </item>
  </list>
  <html_block>&lt;ol&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>A list item can contain a header:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <header level="1">
        <text>Foo</text>
      </header>
    </item>
    <item>
      <header level="2">
        <text>Bar</text>
      </header>
      <paragraph>
        <text>baz</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;
&lt;h1&gt;Foo&lt;/h1&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;Bar&lt;/h2&gt;
baz&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <header level="3">
    <text>Motivation</text>
  </header>
  <paragraph>
    <text>John Gruber</text>
    <text>'</text>
    <text>s Markdown spec says the following about list items:</text>
  </paragraph>
  <list type="ordered" start="1" tight="false" delimiter="period">
    <item>
      <paragraph>
        <text>&quot;</text>
        <text>List markers typically start at the left margin, but may be indented</text>
        <softbreak />
        <text>by up to three spaces. List markers must be followed by one or more</text>
        <softbreak />
        <text>spaces or a tab.</text>
        <text>&quot;</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>&quot;</text>
        <text>To make lists look nice, you can wrap items with hanging indents....</text>
        <softbreak />
        <text>But if you don</text>
        <text>'</text>
        <text>t want to, you don</text>
        <text>'</text>
        <text>t have to.</text>
        <text>&quot;</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>&quot;</text>
        <text>List items may consist of multiple paragraphs. Each subsequent</text>
        <softbreak />
        <text>paragraph in a list item must be indented by either 4 spaces or one</text>
        <softbreak />
        <text>tab.</text>
        <text>&quot;</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>&quot;</text>
        <text>It looks nice if you indent every line of the subsequent paragraphs,</text>
        <softbreak />
        <text>but here again, Markdown will allow you to be lazy.</text>
        <text>&quot;</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>&quot;</text>
        <text>To put a blockquote within a list item, the blockquote</text>
        <text>'</text>
        <text>s </text>
        <code>&gt;</code>
        <softbreak />
        <text>delimiters need to be indented.</text>
        <text>&quot;</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>&quot;</text>
        <text>To put a code block within a list item, the code block needs to be</text>
        <softbreak />
        <text>indented twice — 8 spaces or two tabs.</text>
        <text>&quot;</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>These rules specify that a paragraph under a list item must be indented</text>
    <softbreak />
    <text>four spaces (presumably, from the left margin, rather than the start of</text>
    <softbreak />
    <text>the list marker, but this is not said), and that code under a list item</text>
    <softbreak />
    <text>must be indented eight spaces instead of the usual four.  They also say</text>
    <softbreak />
    <text>that a block quote must be indented, but not by how much; however, the</text>
    <softbreak />
    <text>example given has four spaces indentation.  Although nothing is said</text>
    <softbreak />
    <text>about other kinds of block-level content, it is certainly reasonable to</text>
    <softbreak />
    <text>infer that </text>
    <emph>
      <text>all</text>
    </emph>
    <text> block elements under a list item, including other</text>
    <softbreak />
    <text>lists, must be indented four spaces.  This principle has been called the</text>
    <softbreak />
    <emph>
      <text>four-space rule</text>
    </emph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>The four-space rule is clear and principled, and if the reference</text>
    <softbreak />
    <text>implementation </text>
    <code>Markdown.pl</code>
    <text> had followed it, it probably would have</text>
    <softbreak />
    <text>become the standard.  However, </text>
    <code>Markdown.pl</code>
    <text> allowed paragraphs and</text>
    <softbreak />
    <text>sublists to start with only two spaces indentation, at least on the</text>
    <softbreak />
    <text>outer level.  Worse, its behavior was inconsistent: a sublist of an</text>
    <softbreak />
    <text>outer-level list needed two spaces indentation, but a sublist of this</text>
    <softbreak />
    <text>sublist needed three spaces.  It is not surprising, then, that different</text>
    <softbreak />
    <text>implementations of Markdown have developed very different rules for</text>
    <softbreak />
    <text>determining what comes under a list item.  (Pandoc and python-Markdown,</text>
    <softbreak />
    <text>for example, stuck with Gruber</text>
    <text>'</text>
    <text>s syntax description and the four-space</text>
    <softbreak />
    <text>rule, while discount, redcarpet, marked, PHP Markdown, and others</text>
    <softbreak />
    <text>followed </text>
    <code>Markdown.pl</code>
    <text>'</text>
    <text>s behavior more closely.)</text>
  </paragraph>
  <paragraph>
    <text>Unfortunately, given the divergences between implementations, there</text>
    <softbreak />
    <text>is no way to give a spec for list items that will be guaranteed not</text>
    <softbreak />
    <text>to break any existing documents.  However, the spec given here should</text>
    <softbreak />
    <text>correctly handle lists formatted with either the four-space rule or</text>
    <softbreak />
    <text>the more forgiving </text>
    <code>Markdown.pl</code>
    <text> behavior, provided they are laid out</text>
    <softbreak />
    <text>in a way that is natural for a human to read.</text>
  </paragraph>
  <paragraph>
    <text>The strategy here is to let the width and indentation of the list marker</text>
    <softbreak />
    <text>determine the indentation necessary for blocks to fall under the list</text>
    <softbreak />
    <text>item, rather than having a fixed and arbitrary number.  The writer can</text>
    <softbreak />
    <text>think of the body of the list item as a unit which gets indented to the</text>
    <softbreak />
    <text>right enough to fit the list marker (and any indentation on the list</text>
    <softbreak />
    <text>marker).  (The laziness rule, #5, then allows continuation lines to be</text>
    <softbreak />
    <text>unindented if needed.)</text>
  </paragraph>
  <paragraph>
    <text>This rule is superior, we claim, to any rule requiring a fixed level of</text>
    <softbreak />
    <text>indentation from the margin.  The four-space rule is clear but</text>
    <softbreak />
    <text>unnatural. It is quite unintuitive that</text>
  </paragraph>
  <code_block info="markdown">- foo

  bar

  - baz
</code_block>
  <paragraph>
    <text>should be parsed as two lists with an intervening paragraph,</text>
  </paragraph>
  <code_block info="html">&lt;ul&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;bar&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;baz&lt;/li&gt;
&lt;/ul&gt;
</code_block>
  <paragraph>
    <text>as the four-space rule demands, rather than a single list,</text>
  </paragraph>
  <code_block info="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;p&gt;bar&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;baz&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</code_block>
  <paragraph>
    <text>The choice of four spaces is arbitrary.  It can be learned, but it is</text>
    <softbreak />
    <text>not likely to be guessed, and it trips up beginners regularly.</text>
  </paragraph>
  <paragraph>
    <text>Would it help to adopt a two-space rule?  The problem is that such</text>
    <softbreak />
    <text>a rule, together with the rule allowing 1--3 spaces indentation of the</text>
    <softbreak />
    <text>initial list marker, allows text that is indented </text>
    <emph>
      <text>less than</text>
    </emph>
    <text> the</text>
    <softbreak />
    <text>original list marker to be included in the list item. For example,</text>
    <softbreak />
    <code>Markdown.pl</code>
    <text> parses</text>
  </paragraph>
  <code_block info="markdown">   - one

  two
</code_block>
  <paragraph>
    <text>as a single list item, with </text>
    <code>two</code>
    <text> a continuation paragraph:</text>
  </paragraph>
  <code_block info="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;one&lt;/p&gt;
&lt;p&gt;two&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</code_block>
  <paragraph>
    <text>and similarly</text>
  </paragraph>
  <code_block info="markdown">&gt;   - one
&gt;
&gt;  two
</code_block>
  <paragraph>
    <text>as</text>
  </paragraph>
  <code_block info="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;one&lt;/p&gt;
&lt;p&gt;two&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</code_block>
  <paragraph>
    <text>This is extremely unintuitive.</text>
  </paragraph>
  <paragraph>
    <text>Rather than requiring a fixed indent from the margin, we could require</text>
    <softbreak />
    <text>a fixed indent (say, two spaces, or even one space) from the list marker (which</text>
    <softbreak />
    <text>may itself be indented).  This proposal would remove the last anomaly</text>
    <softbreak />
    <text>discussed.  Unlike the spec presented above, it would count the following</text>
    <softbreak />
    <text>as a list item with a subparagraph, even though the paragraph </text>
    <code>bar</code>
    <softbreak />
    <text>is not indented as far as the first paragraph </text>
    <code>foo</code>
    <text>:</text>
  </paragraph>
  <code_block info="markdown"> 10. foo

   bar  
</code_block>
  <paragraph>
    <text>Arguably this text does read like a list item with </text>
    <code>bar</code>
    <text> as a subparagraph,</text>
    <softbreak />
    <text>which may count in favor of the proposal.  However, on this proposal indented</text>
    <softbreak />
    <text>code would have to be indented six spaces after the list marker.  And this</text>
    <softbreak />
    <text>would break a lot of existing Markdown, which has the pattern:</text>
  </paragraph>
  <code_block info="markdown">1.  foo

        indented code
</code_block>
  <paragraph>
    <text>where the code is indented eight spaces.  The spec above, by contrast, will</text>
    <softbreak />
    <text>parse this text as expected, since the code block</text>
    <text>'</text>
    <text>s indentation is measured</text>
    <softbreak />
    <text>from the beginning of </text>
    <code>foo</code>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>The one case that needs special treatment is a list item that </text>
    <emph>
      <text>starts</text>
    </emph>
    <softbreak />
    <text>with indented code.  How much indentation is required in that case, since</text>
    <softbreak />
    <text>we don</text>
    <text>'</text>
    <text>t have a </text>
    <text>&quot;</text>
    <text>first paragraph</text>
    <text>&quot;</text>
    <text> to measure from?  Rule #2 simply stipulates</text>
    <softbreak />
    <text>that in such cases, we require one space indentation from the list marker</text>
    <softbreak />
    <text>(and then the normal four spaces for the indented code).  This will match the</text>
    <softbreak />
    <text>four-space rule in cases where the list marker plus its initial indentation</text>
    <softbreak />
    <text>takes four spaces (a common case), but diverge in other cases.</text>
  </paragraph>
  <header level="2">
    <text>Lists</text>
  </header>
  <paragraph>
    <text>A </text>
    <link destination="@list" title="">
      <text>list</text>
    </link>
    <text> is a sequence of one or more</text>
    <softbreak />
    <text>list items </text>
    <text>[</text>
    <text>of the same type</text>
    <text>]</text>
    <text>.  The list items</text>
    <softbreak />
    <text>may be separated by single </text>
    <text>[</text>
    <text>blank lines</text>
    <text>]</text>
    <text>, but two</text>
    <softbreak />
    <text>blank lines end all containing lists.</text>
  </paragraph>
  <paragraph>
    <text>Two list items are </text>
    <link destination="@of-the-same-type" title="">
      <text>of the same type</text>
    </link>
    <softbreak />
    <text>if they begin with a </text>
    <text>[</text>
    <text>list marker</text>
    <text>]</text>
    <text> of the same type.</text>
    <softbreak />
    <text>Two list markers are of the</text>
    <softbreak />
    <text>same type if (a) they are bullet list markers using the same character</text>
    <softbreak />
    <text>(</text>
    <code>-</code>
    <text>, </text>
    <code>+</code>
    <text>, or </text>
    <code>*</code>
    <text>) or (b) they are ordered list numbers with the same</text>
    <softbreak />
    <text>delimiter (either </text>
    <code>.</code>
    <text> or </text>
    <code>)</code>
    <text>).</text>
  </paragraph>
  <paragraph>
    <text>A list is an </text>
    <link destination="@ordered-list" title="">
      <text>ordered list</text>
    </link>
    <softbreak />
    <text>if its constituent list items begin with</text>
    <softbreak />
    <text>[</text>
    <text>ordered list marker</text>
    <text>]</text>
    <text>s, and a</text>
    <softbreak />
    <link destination="@bullet-list" title="">
      <text>bullet list</text>
    </link>
    <text> if its constituent list</text>
    <softbreak />
    <text>items begin with </text>
    <text>[</text>
    <text>bullet list marker</text>
    <text>]</text>
    <text>s.</text>
  </paragraph>
  <paragraph>
    <text>The </text>
    <link destination="@start-number" title="">
      <text>start number</text>
    </link>
    <softbreak />
    <text>of an </text>
    <text>[</text>
    <text>ordered list</text>
    <text>]</text>
    <text> is determined by the list number of</text>
    <softbreak />
    <text>its initial list item.  The numbers of subsequent list items are</text>
    <softbreak />
    <text>disregarded.</text>
  </paragraph>
  <paragraph>
    <text>A list is </text>
    <link destination="@loose" title="">
      <text>loose</text>
    </link>
    <text> if any of its constituent</text>
    <softbreak />
    <text>list items are separated by blank lines, or if any of its constituent</text>
    <softbreak />
    <text>list items directly contain two block-level elements with a blank line</text>
    <softbreak />
    <text>between them.  Otherwise a list is </text>
    <link destination="@tight" title="">
      <text>tight</text>
    </link>
    <text>.</text>
    <softbreak />
    <text>(The difference in HTML output is that paragraphs in a loose list are</text>
    <softbreak />
    <text>wrapped in </text>
    <code>&lt;p&gt;</code>
    <text> tags, while paragraphs in a tight list are not.)</text>
  </paragraph>
  <paragraph>
    <text>Changing the bullet or ordered list delimiter starts a new list:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>bar</text>
      </paragraph>
    </item>
  </list>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>baz</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;li&gt;bar&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;baz&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="1" tight="true" delimiter="period">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>bar</text>
      </paragraph>
    </item>
  </list>
  <list type="ordered" start="3" tight="true" delimiter="paren">
    <item>
      <paragraph>
        <text>baz</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ol&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;li&gt;bar&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;baz&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>In CommonMark, a list can interrupt a paragraph. That is,</text>
    <softbreak />
    <text>no blank line is needed to separate a paragraph from a following</text>
    <softbreak />
    <text>list:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Foo</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>bar</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>baz</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;p&gt;Foo&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bar&lt;/li&gt;
&lt;li&gt;baz&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <code>Markdown.pl</code>
    <text> does not allow this, through fear of triggering a list</text>
    <softbreak />
    <text>via a numeral in a hard-wrapped line:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>The number of windows in my house is</text>
  </paragraph>
  <list type="ordered" start="14" tight="true" delimiter="period">
    <item>
      <paragraph>
        <text>The number of doors is 6.</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;p&gt;The number of windows in my house is&lt;/p&gt;
&lt;ol start=&quot;14&quot;&gt;
&lt;li&gt;The number of doors is 6.&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>Oddly, </text>
    <code>Markdown.pl</code>
    <text> </text>
    <emph>
      <text>does</text>
    </emph>
    <text> allow a blockquote to interrupt a paragraph,</text>
    <softbreak />
    <text>even though the same considerations might apply.  We think that the two</text>
    <softbreak />
    <text>cases should be treated the same.  Here are two reasons for allowing</text>
    <softbreak />
    <text>lists to interrupt paragraphs:</text>
  </paragraph>
  <paragraph>
    <text>First, it is natural and not uncommon for people to start lists without</text>
    <softbreak />
    <text>blank lines:</text>
  </paragraph>
  <code_block>I need to buy
- new shoes
- a coat
- a plane ticket
</code_block>
  <paragraph>
    <text>Second, we are attracted to a</text>
  </paragraph>
  <block_quote>
    <paragraph>
      <link destination="@principle-of-uniformity" title="">
        <text>principle of uniformity</text>
      </link>
      <text>:</text>
      <softbreak />
      <text>if a chunk of text has a certain</text>
      <softbreak />
      <text>meaning, it will continue to have the same meaning when put into a</text>
      <softbreak />
      <text>container block (such as a list item or blockquote).</text>
    </paragraph>
  </block_quote>
  <paragraph>
    <text>(Indeed, the spec for </text>
    <text>[</text>
    <text>list items</text>
    <text>]</text>
    <text> and </text>
    <text>[</text>
    <text>block quotes</text>
    <text>]</text>
    <text> presupposes</text>
    <softbreak />
    <text>this principle.) This principle implies that if</text>
  </paragraph>
  <code_block>  * I need to buy
    - new shoes
    - a coat
    - a plane ticket
</code_block>
  <paragraph>
    <text>is a list item containing a paragraph followed by a nested sublist,</text>
    <softbreak />
    <text>as all Markdown implementations agree it is (though the paragraph</text>
    <softbreak />
    <text>may be rendered without </text>
    <code>&lt;p&gt;</code>
    <text> tags, since the list is </text>
    <text>&quot;</text>
    <text>tight</text>
    <text>&quot;</text>
    <text>),</text>
    <softbreak />
    <text>then</text>
  </paragraph>
  <code_block>I need to buy
- new shoes
- a coat
- a plane ticket
</code_block>
  <paragraph>
    <text>by itself should be a paragraph followed by a nested sublist.</text>
  </paragraph>
  <paragraph>
    <text>Our adherence to the </text>
    <text>[</text>
    <text>principle of uniformity</text>
    <text>]</text>
    <softbreak />
    <text>thus inclines us to think that there are two coherent packages:</text>
  </paragraph>
  <list type="ordered" start="1" tight="false" delimiter="period">
    <item>
      <paragraph>
        <text>Require blank lines before </text>
        <emph>
          <text>all</text>
        </emph>
        <text> lists and blockquotes,</text>
        <softbreak />
        <text>including lists that occur as sublists inside other list items.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>Require blank lines in none of these places.</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <link destination="http://docutils.sourceforge.net/rst.html" title="">
      <text>reStructuredText</text>
    </link>
    <text> takes</text>
    <softbreak />
    <text>the first approach, for which there is much to be said.  But the second</text>
    <softbreak />
    <text>seems more consistent with established practice with Markdown.</text>
  </paragraph>
  <paragraph>
    <text>There can be blank lines between items, but two blank lines end</text>
    <softbreak />
    <text>a list:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>bar</text>
      </paragraph>
    </item>
  </list>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>baz</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bar&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;baz&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>As illustrated above in the section on </text>
    <text>[</text>
    <text>list items</text>
    <text>]</text>
    <text>,</text>
    <softbreak />
    <text>two blank lines between blocks </text>
    <emph>
      <text>within</text>
    </emph>
    <text> a list item will also end a</text>
    <softbreak />
    <text>list:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>bar</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>baz</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;bar&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;baz&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>Indeed, two blank lines will end </text>
    <emph>
      <text>all</text>
    </emph>
    <text> containing lists:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
      <list type="bullet" tight="true">
        <item>
          <paragraph>
            <text>bar</text>
          </paragraph>
          <list type="bullet" tight="true">
            <item>
              <paragraph>
                <text>baz</text>
              </paragraph>
            </item>
          </list>
        </item>
      </list>
    </item>
  </list>
  <code_block>  bim
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;ul&gt;
&lt;li&gt;foo
&lt;ul&gt;
&lt;li&gt;bar
&lt;ul&gt;
&lt;li&gt;baz&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;  bim
&lt;/code&gt;&lt;/pre&gt;
.</html_block>
  <paragraph>
    <text>Thus, two blank lines can be used to separate consecutive lists of</text>
    <softbreak />
    <text>the same type, or to separate a list from an indented code block</text>
    <softbreak />
    <text>that would otherwise be parsed as a subparagraph of the final list</text>
    <softbreak />
    <text>item:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>bar</text>
      </paragraph>
    </item>
  </list>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>baz</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>bim</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;foo&lt;/li&gt;
&lt;li&gt;bar&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;baz&lt;/li&gt;
&lt;li&gt;bim&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
      <paragraph>
        <text>notcode</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
    </item>
  </list>
  <code_block>code
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;p&gt;notcode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;code
&lt;/code&gt;&lt;/pre&gt;
.</html_block>
  <paragraph>
    <text>List items need not be indented to the same level.  The following</text>
    <softbreak />
    <text>list items will be treated as items at the same list level,</text>
    <softbreak />
    <text>since none is indented enough to belong to the previous list</text>
    <softbreak />
    <text>item:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>a</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>b</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>c</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>d</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>e</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>f</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>g</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>h</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>i</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;a&lt;/li&gt;
&lt;li&gt;b&lt;/li&gt;
&lt;li&gt;c&lt;/li&gt;
&lt;li&gt;d&lt;/li&gt;
&lt;li&gt;e&lt;/li&gt;
&lt;li&gt;f&lt;/li&gt;
&lt;li&gt;g&lt;/li&gt;
&lt;li&gt;h&lt;/li&gt;
&lt;li&gt;i&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="1" tight="false" delimiter="period">
    <item>
      <paragraph>
        <text>a</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>b</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>c</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;b&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>This is a loose list, because there is a blank line between</text>
    <softbreak />
    <text>two of the list items:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <paragraph>
        <text>a</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>b</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>c</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;b&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>So is this, with a empty second item:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <paragraph>
        <text>a</text>
      </paragraph>
    </item>
    <item>
    </item>
    <item>
      <paragraph>
        <text>c</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>These are loose lists, even though there is no space between the items,</text>
    <softbreak />
    <text>because one of the items directly contains two block-level elements</text>
    <softbreak />
    <text>with a blank line between them:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <paragraph>
        <text>a</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>b</text>
      </paragraph>
      <paragraph>
        <text>c</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>d</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;b&lt;/p&gt;
&lt;p&gt;c&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;d&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <paragraph>
        <text>a</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>b</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>d</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;b&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;d&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>This is a tight list, because the blank lines are in a code block:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>a</text>
      </paragraph>
    </item>
    <item>
      <code_block>b


</code_block>
    </item>
    <item>
      <paragraph>
        <text>c</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;a&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;b</html_block>
  <paragraph>
    <html></code></html>
    <html></pre></html>
  </paragraph>
  <html_block>&lt;/li&gt;
&lt;li&gt;c&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>This is a tight list, because the blank line is between two</text>
    <softbreak />
    <text>paragraphs of a sublist.  So the sublist is loose while</text>
    <softbreak />
    <text>the outer list is tight:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>a</text>
      </paragraph>
      <list type="bullet" tight="false">
        <item>
          <paragraph>
            <text>b</text>
          </paragraph>
          <paragraph>
            <text>c</text>
          </paragraph>
        </item>
      </list>
    </item>
    <item>
      <paragraph>
        <text>d</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;a
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;b&lt;/p&gt;
&lt;p&gt;c&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;d&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>This is a tight list, because the blank line is inside the</text>
    <softbreak />
    <text>block quote:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>a</text>
      </paragraph>
      <block_quote>
        <paragraph>
          <text>b</text>
        </paragraph>
      </block_quote>
    </item>
    <item>
      <paragraph>
        <text>c</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;a
&lt;blockquote&gt;
&lt;p&gt;b&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;c&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>This list is tight, because the consecutive block elements</text>
    <softbreak />
    <text>are not separated by blank lines:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>a</text>
      </paragraph>
      <block_quote>
        <paragraph>
          <text>b</text>
        </paragraph>
      </block_quote>
      <code_block>c
</code_block>
    </item>
    <item>
      <paragraph>
        <text>d</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;a
&lt;blockquote&gt;
&lt;p&gt;b&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;c
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;d&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>A single-paragraph list is tight:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>a</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;a&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>a</text>
      </paragraph>
      <list type="bullet" tight="true">
        <item>
          <paragraph>
            <text>b</text>
            <softbreak />
            <text>.</text>
          </paragraph>
        </item>
      </list>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;a
&lt;ul&gt;
&lt;li&gt;b&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>This list is loose, because of the blank line between the</text>
    <softbreak />
    <text>two block elements in the list item:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="ordered" start="1" tight="false" delimiter="period">
    <item>
      <code_block>foo
</code_block>
      <paragraph>
        <text>bar</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ol&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;foo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;bar&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
.</html_block>
  <paragraph>
    <text>Here the outer list is loose, the inner list tight:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <paragraph>
        <text>foo</text>
      </paragraph>
      <list type="bullet" tight="true">
        <item>
          <paragraph>
            <text>bar</text>
          </paragraph>
        </item>
      </list>
      <paragraph>
        <text>baz</text>
        <softbreak />
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;baz&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <paragraph>
        <text>a</text>
      </paragraph>
      <list type="bullet" tight="true">
        <item>
          <paragraph>
            <text>b</text>
          </paragraph>
        </item>
        <item>
          <paragraph>
            <text>c</text>
          </paragraph>
        </item>
      </list>
    </item>
    <item>
      <paragraph>
        <text>d</text>
      </paragraph>
      <list type="bullet" tight="true">
        <item>
          <paragraph>
            <text>e</text>
          </paragraph>
        </item>
        <item>
          <paragraph>
            <text>f</text>
            <softbreak />
            <text>.</text>
          </paragraph>
        </item>
      </list>
    </item>
  </list>
  <html_block>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;b&lt;/li&gt;
&lt;li&gt;c&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;d&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e&lt;/li&gt;
&lt;li&gt;f&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <header level="1">
    <text>Inlines</text>
  </header>
  <paragraph>
    <text>Inlines are parsed sequentially from the beginning of the character</text>
    <softbreak />
    <text>stream to the end (left to right, in left-to-right languages).</text>
    <softbreak />
    <text>Thus, for example, in</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <code>hi</code>
    <text>lo</text>
    <text>`</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;code&gt;hi&lt;/code&gt;lo`&lt;/p&gt;
.</html_block>
  <paragraph>
    <code>hi</code>
    <text> is parsed as code, leaving the backtick at the end as a literal</text>
    <softbreak />
    <text>backtick.</text>
  </paragraph>
  <header level="2">
    <text>Backslash escapes</text>
  </header>
  <paragraph>
    <text>Any ASCII punctuation character may be backslash-escaped:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>!</text>
    <text>&quot;</text>
    <text>#</text>
    <text>$</text>
    <text>%</text>
    <text>&amp;</text>
    <text>'</text>
    <text>(</text>
    <text>)</text>
    <text>*</text>
    <text>+</text>
    <text>,</text>
    <text>-</text>
    <text>.</text>
    <text>/</text>
    <text>:</text>
    <text>;</text>
    <text>&lt;</text>
    <text>=</text>
    <text>&gt;</text>
    <text>?</text>
    <text>@</text>
    <text>[</text>
    <text>\</text>
    <text>]</text>
    <text>^</text>
    <text>_</text>
    <text>`</text>
    <text>{</text>
    <text>|</text>
    <text>}</text>
    <text>~</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;!&amp;quot;#$%&amp;amp;'()*+,-./:;&amp;lt;=&amp;gt;?@[\]^_`{|}~&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Backslashes before other characters are treated as literal</text>
    <softbreak />
    <text>backslashes:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>\</text>
    <text>→</text>
    <text>\</text>
    <text>A</text>
    <text>\</text>
    <text>a</text>
    <text>\</text>
    <text> </text>
    <text>\</text>
    <text>3</text>
    <text>\</text>
    <text>φ</text>
    <text>\</text>
    <text>«</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;\→\A\a\ \3\φ\«&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Escaped characters are treated as regular characters and do</text>
    <softbreak />
    <text>not have their usual Markdown meanings:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>*</text>
    <text>not emphasized</text>
    <text>*</text>
    <softbreak />
    <text>&lt;</text>
    <text>br/&gt; not a tag</text>
    <softbreak />
    <text>[</text>
    <text>not a link</text>
    <text>]</text>
    <text>(/foo)</text>
    <softbreak />
    <text>`</text>
    <text>not code</text>
    <text>`</text>
    <softbreak />
    <text>1</text>
    <text>.</text>
    <text> not a list</text>
    <softbreak />
    <text>*</text>
    <text> not a list</text>
    <softbreak />
    <text>#</text>
    <text> not a header</text>
    <softbreak />
    <text>[</text>
    <text>foo</text>
    <text>]</text>
    <text>: /url </text>
    <text>&quot;</text>
    <text>not a reference</text>
    <text>&quot;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;*not emphasized*
&amp;lt;br/&amp;gt; not a tag
[not a link](/foo)
`not code`
1. not a list
* not a list
# not a header
[foo]: /url &amp;quot;not a reference&amp;quot;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>If a backslash is itself escaped, the following character is not:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>\</text>
    <emph>
      <text>emphasis</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;\&lt;em&gt;emphasis&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>A backslash at the end of the line is a </text>
    <text>[</text>
    <text>hard line break</text>
    <text>]</text>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
    <hardbreak />
    <text>bar</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo&lt;br /&gt;
bar&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Backslash escapes do not work in code blocks, code spans, autolinks, or</text>
    <softbreak />
    <text>raw HTML:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <code>\[\`</code>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;code&gt;\[\`&lt;/code&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>]</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;\[\]
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block>\[\]
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;\[\]
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="http://example.com?find=%5C*" title="">
      <text>http://example.com?find=\*</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;http://example.com?find=%5C*&quot;&gt;http://example.com?find=\*&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><a href="/bar\/)"></html>
    <softbreak />
    <text>.</text>
    <softbreak />
    <html><a href="/bar\/)"></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>But they work in all other contexts, including URLs and link titles,</text>
    <softbreak />
    <text>link references, and </text>
    <text>[</text>
    <text>info string</text>
    <text>]</text>
    <text>s in </text>
    <text>[</text>
    <text>fenced code block</text>
    <text>]</text>
    <text>s:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/bar*" title="ti*tle">
      <text>foo</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/bar*&quot; title=&quot;ti*tle&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/bar*&quot; title=&quot;ti*tle&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block info="foo+bar">foo
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code class=&quot;language-foo+bar&quot;&gt;foo
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <header level="2">
    <text>Entities</text>
  </header>
  <paragraph>
    <text>With the goal of making this standard as HTML-agnostic as possible, all</text>
    <softbreak />
    <text>valid HTML entities (except in code blocks and code spans)</text>
    <softbreak />
    <text>are recognized as such and converted into Unicode characters before</text>
    <softbreak />
    <text>they are stored in the AST. This means that renderers to formats other</text>
    <softbreak />
    <text>than HTML need not be HTML-entity aware.  HTML renderers may either escape</text>
    <softbreak />
    <text>Unicode characters as entities or leave them as they are.  (However,</text>
    <softbreak />
    <code>&quot;</code>
    <text>, </text>
    <code>&amp;</code>
    <text>, </text>
    <code>&lt;</code>
    <text>, and </text>
    <code>&gt;</code>
    <text> must always be rendered as entities.)</text>
  </paragraph>
  <paragraph>
    <link destination="@name-entities" title="">
      <text>Named entities</text>
    </link>
    <text> consist of </text>
    <code>&amp;</code>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>any of the valid HTML5 entity names + </text>
        <code>;</code>
        <text>. The</text>
        <softbreak />
        <link destination="https://html.spec.whatwg.org/multipage/entities.json" title="">
          <text>following document</text>
        </link>
        <softbreak />
        <text>is used as an authoritative source of the valid entity names and their</text>
        <softbreak />
        <text>corresponding code points.</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text> </text>
    <text> </text>
    <text>&amp;</text>
    <text> </text>
    <text>©</text>
    <text> </text>
    <text>Æ</text>
    <text> </text>
    <text>Ď</text>
    <softbreak />
    <text>¾</text>
    <text> </text>
    <text>ℋ</text>
    <text> </text>
    <text>ⅆ</text>
    <softbreak />
    <text>∲</text>
    <text> </text>
    <text>≧̸</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;  &amp;amp; © Æ Ď
¾ ℋ ⅆ
∲ ≧̸&lt;/p&gt;
.</html_block>
  <paragraph>
    <link destination="@decimal-entities" title="">
      <text>Decimal entities</text>
    </link>
    <softbreak />
    <text>consist of </text>
    <code>&amp;#</code>
    <text> + a string of 1--8 arabic digits + </text>
    <code>;</code>
    <text>. Again, these</text>
    <softbreak />
    <text>entities need to be recognised and transformed into their corresponding</text>
    <softbreak />
    <text>Unicode code points. Invalid Unicode code points will be replaced by</text>
    <softbreak />
    <text>the </text>
    <text>&quot;</text>
    <text>unknown code point</text>
    <text>&quot;</text>
    <text> character (</text>
    <code>U+FFFD</code>
    <text>).  For security reasons,</text>
    <softbreak />
    <text>the code point </text>
    <code>U+0000</code>
    <text> will also be replaced by </text>
    <code>U+FFFD</code>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>#</text>
    <text> </text>
    <text>Ӓ</text>
    <text> </text>
    <text>Ϡ</text>
    <text> </text>
    <text>�</text>
    <text> </text>
    <text>�</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;# Ӓ Ϡ � �&lt;/p&gt;
.</html_block>
  <paragraph>
    <link destination="@hexadecimal-entities" title="">
      <text>Hexadecimal entities</text>
    </link>
    <softbreak />
    <text>consist of </text>
    <code>&amp;#</code>
    <text> + either </text>
    <code>X</code>
    <text> or </text>
    <code>x</code>
    <text> + a string of 1-8 hexadecimal digits</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <code>;</code>
        <text>. They will also be parsed and turned into the corresponding</text>
        <softbreak />
        <text>Unicode code points in the AST.</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>&quot;</text>
    <text> </text>
    <text>ആ</text>
    <text> </text>
    <text>ಫ</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&amp;quot; ആ ಫ&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Here are some nonentities:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>&amp;</text>
    <text>nbsp </text>
    <text>&amp;</text>
    <text>x; </text>
    <text>&amp;</text>
    <text>#; </text>
    <text>&amp;</text>
    <text>#x; </text>
    <text>&amp;</text>
    <text>ThisIsWayTooLongToBeAnEntityIsntIt; </text>
    <text>&amp;</text>
    <text>hi?;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&amp;amp;nbsp &amp;amp;x; &amp;amp;#; &amp;amp;#x; &amp;amp;ThisIsWayTooLongToBeAnEntityIsntIt; &amp;amp;hi?;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Although HTML5 does accept some entities without a trailing semicolon</text>
    <softbreak />
    <text>(such as </text>
    <code>&amp;copy</code>
    <text>), these are not recognized as entities here, because it</text>
    <softbreak />
    <text>makes the grammar too ambiguous:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>&amp;</text>
    <text>copy</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&amp;amp;copy&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Strings that are not on the list of HTML5 named entities are not</text>
    <softbreak />
    <text>recognized as entities either:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>&amp;MadeUpEntity;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&amp;amp;MadeUpEntity;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Entities are recognized in any context besides code spans or</text>
    <softbreak />
    <text>code blocks, including raw HTML, URLs, </text>
    <text>[</text>
    <text>link title</text>
    <text>]</text>
    <text>s, and</text>
    <softbreak />
    <text>[</text>
    <text>fenced code block</text>
    <text>]</text>
    <text> </text>
    <text>[</text>
    <text>info string</text>
    <text>]</text>
    <text>s:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><a href="&ouml;&ouml;.html"></html>
    <softbreak />
    <text>.</text>
    <softbreak />
    <html><a href="&ouml;&ouml;.html"></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/f%C3%B6%C3%B6" title="föö">
      <text>foo</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/f%C3%B6%C3%B6&quot; title=&quot;föö&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/f%C3%B6%C3%B6&quot; title=&quot;föö&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <code_block info="föö">foo
</code_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code class=&quot;language-föö&quot;&gt;foo
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Entities are treated as literal text in code spans and code blocks:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <code>f&amp;ouml;&amp;ouml;</code>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;code&gt;f&amp;amp;ouml;&amp;amp;ouml;&lt;/code&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>f</text>
    <text>ö</text>
    <text>f</text>
    <text>ö</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;pre&gt;&lt;code&gt;f&amp;amp;ouml;f&amp;amp;ouml;
&lt;/code&gt;&lt;/pre&gt;</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <header level="2">
    <text>Code spans</text>
  </header>
  <paragraph>
    <text>A </text>
    <link destination="@backtick-string" title="">
      <text>backtick string</text>
    </link>
    <softbreak />
    <text>is a string of one or more backtick characters (</text>
    <code>`</code>
    <text>) that is neither</text>
    <softbreak />
    <text>preceded nor followed by a backtick.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@code-span" title="">
      <text>code span</text>
    </link>
    <text> begins with a backtick string and ends with</text>
    <softbreak />
    <text>a backtick string of equal length.  The contents of the code span are</text>
    <softbreak />
    <text>the characters between the two backtick strings, with leading and</text>
    <softbreak />
    <text>trailing spaces and </text>
    <text>[</text>
    <text>line ending</text>
    <text>]</text>
    <text>s removed, and</text>
    <softbreak />
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text> collapsed to single spaces.</text>
  </paragraph>
  <paragraph>
    <text>This is a simple code span:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <code>foo</code>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;code&gt;foo&lt;/code&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Here two backticks are used, because the code contains a backtick.</text>
    <softbreak />
    <text>This example also illustrates stripping of leading and trailing spaces:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <code>foo ` bar</code>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;code&gt;foo ` bar&lt;/code&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This example shows the motivation for stripping leading and trailing</text>
    <softbreak />
    <text>spaces:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <code>``</code>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;code&gt;``&lt;/code&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>[</text>
    <text>Line ending</text>
    <text>]</text>
    <text>s are treated like spaces:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <code>foo</code>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;code&gt;foo&lt;/code&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Interior spaces and </text>
    <text>[</text>
    <text>line ending</text>
    <text>]</text>
    <text>s are collapsed into</text>
    <softbreak />
    <text>single spaces, just as they would be by a browser:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <code>foo bar baz</code>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;code&gt;foo bar baz&lt;/code&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Q: Why not just leave the spaces, since browsers will collapse them</text>
    <softbreak />
    <text>anyway?  A:  Because we might be targeting a non-HTML format, and we</text>
    <softbreak />
    <text>shouldn</text>
    <text>'</text>
    <text>t rely on HTML-specific rendering assumptions.</text>
  </paragraph>
  <paragraph>
    <text>(Existing implementations differ in their treatment of internal</text>
    <softbreak />
    <text>spaces and </text>
    <text>[</text>
    <text>line ending</text>
    <text>]</text>
    <text>s.  Some, including </text>
    <code>Markdown.pl</code>
    <text> and</text>
    <softbreak />
    <code>showdown</code>
    <text>, convert an internal </text>
    <text>[</text>
    <text>line ending</text>
    <text>]</text>
    <text> into a</text>
    <softbreak />
    <code>&lt;br /&gt;</code>
    <text> tag.  But this makes things difficult for those who like to</text>
    <softbreak />
    <text>hard-wrap their paragraphs, since a line break in the midst of a code</text>
    <softbreak />
    <text>span will cause an unintended line break in the output.  Others just</text>
    <softbreak />
    <text>leave internal spaces as they are, which is fine if only HTML is being</text>
    <softbreak />
    <text>targeted.)</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <code>foo `` bar</code>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;code&gt;foo `` bar&lt;/code&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Note that backslash escapes do not work in code spans. All backslashes</text>
    <softbreak />
    <text>are treated literally:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <code>foo\</code>
    <text>bar</text>
    <text>`</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;code&gt;foo\&lt;/code&gt;bar`&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Backslash escapes are never needed, because one can always choose a</text>
    <softbreak />
    <text>string of </text>
    <emph>
      <text>n</text>
    </emph>
    <text> backtick characters as delimiters, where the code does</text>
    <softbreak />
    <text>not contain any strings of exactly </text>
    <emph>
      <text>n</text>
    </emph>
    <text> backtick characters.</text>
  </paragraph>
  <paragraph>
    <text>Code span backticks have higher precedence than any other inline</text>
    <softbreak />
    <text>constructs except HTML tags and autolinks.  Thus, for example, this is</text>
    <softbreak />
    <text>not parsed as emphasized text, since the second </text>
    <code>*</code>
    <text> is part of a code</text>
    <softbreak />
    <text>span:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>*</text>
    <text>foo</text>
    <code>*</code>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;*foo&lt;code&gt;*&lt;/code&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>And this is not parsed as a link:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>not a </text>
    <code>link](/foo</code>
    <text>)</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[not a &lt;code&gt;link](/foo&lt;/code&gt;)&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Code spans, HTML tags, and autolinks have the same precedence.</text>
    <softbreak />
    <text>Thus, this is code:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <code>&lt;a href=&quot;</code>
    <text>&quot;</text>
    <text>&gt;</text>
    <text>`</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;&lt;/code&gt;&amp;quot;&amp;gt;`&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>But this is an HTML tag:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><a href="`"></html>
    <text>`</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;`&quot;&gt;`&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>And this is code:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <code>&lt;http://foo.bar.</code>
    <text>baz&gt;</text>
    <text>`</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;code&gt;&amp;lt;http://foo.bar.&lt;/code&gt;baz&amp;gt;`&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>But this is an autolink:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="http://foo.bar.%60baz" title="">
      <text>http://foo.bar.`baz</text>
    </link>
    <text>`</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;http://foo.bar.%60baz&quot;&gt;http://foo.bar.`baz&lt;/a&gt;`&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>When a backtick string is not closed by a matching backtick string,</text>
    <softbreak />
    <text>we just have literal backticks:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>```</text>
    <text>foo</text>
    <text>``</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;```foo``&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>`</text>
    <text>foo</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;`foo&lt;/p&gt;
.</html_block>
  <header level="2">
    <text>Emphasis and strong emphasis</text>
  </header>
  <paragraph>
    <text>John Gruber</text>
    <text>'</text>
    <text>s original </text>
    <link destination="http://daringfireball.net/projects/markdown/syntax#em" title="">
      <text>Markdown syntax</text>
      <softbreak />
      <text>description</text>
    </link>
    <text> says:</text>
  </paragraph>
  <block_quote>
    <paragraph>
      <text>Markdown treats asterisks (</text>
      <code>*</code>
      <text>) and underscores (</text>
      <code>_</code>
      <text>) as indicators of</text>
      <softbreak />
      <text>emphasis. Text wrapped with one </text>
      <code>*</code>
      <text> or </text>
      <code>_</code>
      <text> will be wrapped with an HTML</text>
      <softbreak />
      <code>&lt;em&gt;</code>
      <text> tag; double </text>
      <code>*</code>
      <text>'</text>
      <text>s or </text>
      <code>_</code>
      <text>'</text>
      <text>s will be wrapped with an HTML </text>
      <code>&lt;strong&gt;</code>
      <softbreak />
      <text>tag.</text>
    </paragraph>
  </block_quote>
  <paragraph>
    <text>This is enough for most users, but these rules leave much undecided,</text>
    <softbreak />
    <text>especially when it comes to nested emphasis.  The original</text>
    <softbreak />
    <code>Markdown.pl</code>
    <text> test suite makes it clear that triple </text>
    <code>***</code>
    <text> and</text>
    <softbreak />
    <code>___</code>
    <text> delimiters can be used for strong emphasis, and most</text>
    <softbreak />
    <text>implementations have also allowed the following patterns:</text>
  </paragraph>
  <code_block info="markdown">***strong emph***
***strong** in emph*
***emph* in strong**
**in strong *emph***
*in emph **strong***
</code_block>
  <paragraph>
    <text>The following patterns are less widely supported, but the intent</text>
    <softbreak />
    <text>is clear and they are useful (especially in contexts like bibliography</text>
    <softbreak />
    <text>entries):</text>
  </paragraph>
  <code_block info="markdown">*emph *with emph* in it*
**strong **with strong** in it**
</code_block>
  <paragraph>
    <text>Many implementations have also restricted intraword emphasis to</text>
    <softbreak />
    <text>the </text>
    <code>*</code>
    <text> forms, to avoid unwanted emphasis in words containing</text>
    <softbreak />
    <text>internal underscores.  (It is best practice to put these in code</text>
    <softbreak />
    <text>spans, but users often do not.)</text>
  </paragraph>
  <code_block info="markdown">internal emphasis: foo*bar*baz
no emphasis: foo_bar_baz
</code_block>
  <paragraph>
    <text>The rules given below capture all of these patterns, while allowing</text>
    <softbreak />
    <text>for efficient parsing strategies that do not backtrack.</text>
  </paragraph>
  <paragraph>
    <text>First, some definitions.  A </text>
    <link destination="@delimiter-run" title="">
      <text>delimiter run</text>
    </link>
    <text> is either</text>
    <softbreak />
    <text>a sequence of one or more </text>
    <code>*</code>
    <text> characters that is not preceded or</text>
    <softbreak />
    <text>followed by a </text>
    <code>*</code>
    <text> character, or a sequence of one or more </text>
    <code>_</code>
    <softbreak />
    <text>characters that is not preceded or followed by a </text>
    <code>_</code>
    <text> character.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@left-flanking-delimiter-run" title="">
      <text>left-flanking delimiter run</text>
    </link>
    <text> is</text>
    <softbreak />
    <text>a </text>
    <text>[</text>
    <text>delimiter run</text>
    <text>]</text>
    <text> that is (a) not followed by </text>
    <text>[</text>
    <text>Unicode whitespace</text>
    <text>]</text>
    <text>,</text>
    <softbreak />
    <text>and (b) either not followed by a </text>
    <text>[</text>
    <text>punctuation character</text>
    <text>]</text>
    <text>, or</text>
    <softbreak />
    <text>preceded by </text>
    <text>[</text>
    <text>Unicode whitespace</text>
    <text>]</text>
    <text> or a </text>
    <text>[</text>
    <text>punctuation character</text>
    <text>]</text>
    <text>.</text>
    <softbreak />
    <text>For purposes of this definition, the beginning and the end of</text>
    <softbreak />
    <text>the line count as Unicode whitespace.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@right-flanking-delimiter-run" title="">
      <text>right-flanking delimiter run</text>
    </link>
    <text> is</text>
    <softbreak />
    <text>a </text>
    <text>[</text>
    <text>delimiter run</text>
    <text>]</text>
    <text> that is (a) not preceded by </text>
    <text>[</text>
    <text>Unicode whitespace</text>
    <text>]</text>
    <text>,</text>
    <softbreak />
    <text>and (b) either not preceded by a </text>
    <text>[</text>
    <text>punctuation character</text>
    <text>]</text>
    <text>, or</text>
    <softbreak />
    <text>followed by </text>
    <text>[</text>
    <text>Unicode whitespace</text>
    <text>]</text>
    <text> or a </text>
    <text>[</text>
    <text>punctuation character</text>
    <text>]</text>
    <text>.</text>
    <softbreak />
    <text>For purposes of this definition, the beginning and the end of</text>
    <softbreak />
    <text>the line count as Unicode whitespace.</text>
  </paragraph>
  <paragraph>
    <text>Here are some examples of delimiter runs.</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <paragraph>
        <text>left-flanking but not right-flanking:</text>
      </paragraph>
      <code_block>***abc
  _abc
**&quot;abc&quot;
 _&quot;abc&quot;
</code_block>
    </item>
    <item>
      <paragraph>
        <text>right-flanking but not left-flanking:</text>
      </paragraph>
      <code_block> abc***
 abc_
&quot;abc&quot;**
&quot;abc&quot;_
</code_block>
    </item>
    <item>
      <paragraph>
        <text>Both left and right-flanking:</text>
      </paragraph>
      <code_block> abc***def
&quot;abc&quot;_&quot;def&quot;
</code_block>
    </item>
    <item>
      <paragraph>
        <text>Neither left nor right-flanking:</text>
      </paragraph>
      <code_block>abc *** def
a _ b
</code_block>
    </item>
  </list>
  <paragraph>
    <text>(The idea of distinguishing left-flanking and right-flanking</text>
    <softbreak />
    <text>delimiter runs based on the character before and the character</text>
    <softbreak />
    <text>after comes from Roopesh Chander</text>
    <text>'</text>
    <text>s</text>
    <softbreak />
    <link destination="http://www.vfmd.org/vfmd-spec/specification/#procedure-for-identifying-emphasis-tags" title="">
      <text>vfmd</text>
    </link>
    <text>.</text>
    <softbreak />
    <text>vfmd uses the terminology </text>
    <text>&quot;</text>
    <text>emphasis indicator string</text>
    <text>&quot;</text>
    <text> instead of </text>
    <text>&quot;</text>
    <text>delimiter</text>
    <softbreak />
    <text>run,</text>
    <text>&quot;</text>
    <text> and its rules for distinguishing left- and right-flanking runs</text>
    <softbreak />
    <text>are a bit more complex than the ones given here.)</text>
  </paragraph>
  <paragraph>
    <text>The following rules define emphasis and strong emphasis:</text>
  </paragraph>
  <list type="ordered" start="1" tight="false" delimiter="period">
    <item>
      <paragraph>
        <text>A single </text>
        <code>*</code>
        <text> character </text>
        <link destination="@can-open-emphasis" title="">
          <text>can open emphasis</text>
        </link>
        <softbreak />
        <text>iff (if and only if) it is part of a </text>
        <text>[</text>
        <text>left-flanking delimiter run</text>
        <text>]</text>
        <text>.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>A single </text>
        <code>_</code>
        <text> character </text>
        <text>[</text>
        <text>can open emphasis</text>
        <text>]</text>
        <text> iff</text>
        <softbreak />
        <text>it is part of a </text>
        <text>[</text>
        <text>left-flanking delimiter run</text>
        <text>]</text>
        <softbreak />
        <text>and either (a) not part of a </text>
        <text>[</text>
        <text>right-flanking delimiter run</text>
        <text>]</text>
        <softbreak />
        <text>or (b) part of a </text>
        <text>[</text>
        <text>right-flanking delimeter run</text>
        <text>]</text>
        <softbreak />
        <text>preceded by punctuation.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>A single </text>
        <code>*</code>
        <text> character </text>
        <link destination="@can-close-emphasis" title="">
          <text>can close emphasis</text>
        </link>
        <softbreak />
        <text>iff it is part of a </text>
        <text>[</text>
        <text>right-flanking delimiter run</text>
        <text>]</text>
        <text>.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>A single </text>
        <code>_</code>
        <text> character </text>
        <text>[</text>
        <text>can close emphasis</text>
        <text>]</text>
        <text> iff</text>
        <softbreak />
        <text>it is part of a </text>
        <text>[</text>
        <text>right-flanking delimiter run</text>
        <text>]</text>
        <softbreak />
        <text>and either (a) not part of a </text>
        <text>[</text>
        <text>left-flanking delimiter run</text>
        <text>]</text>
        <softbreak />
        <text>or (b) part of a </text>
        <text>[</text>
        <text>left-flanking delimeter run</text>
        <text>]</text>
        <softbreak />
        <text>followed by punctuation.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>A double </text>
        <code>**</code>
        <text> </text>
        <link destination="@can-open-strong-emphasis" title="">
          <text>can open strong emphasis</text>
        </link>
        <softbreak />
        <text>iff it is part of a </text>
        <text>[</text>
        <text>left-flanking delimiter run</text>
        <text>]</text>
        <text>.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>A double </text>
        <code>__</code>
        <text> </text>
        <text>[</text>
        <text>can open strong emphasis</text>
        <text>]</text>
        <text> iff</text>
        <softbreak />
        <text>it is part of a </text>
        <text>[</text>
        <text>left-flanking delimiter run</text>
        <text>]</text>
        <softbreak />
        <text>and either (a) not part of a </text>
        <text>[</text>
        <text>right-flanking delimiter run</text>
        <text>]</text>
        <softbreak />
        <text>or (b) part of a </text>
        <text>[</text>
        <text>right-flanking delimeter run</text>
        <text>]</text>
        <softbreak />
        <text>preceded by punctuation.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>A double </text>
        <code>**</code>
        <text> </text>
        <link destination="@can-close-strong-emphasis" title="">
          <text>can close strong emphasis</text>
        </link>
        <softbreak />
        <text>iff it is part of a </text>
        <text>[</text>
        <text>right-flanking delimiter run</text>
        <text>]</text>
        <text>.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>A double </text>
        <code>__</code>
        <text> </text>
        <text>[</text>
        <text>can close strong emphasis</text>
        <text>]</text>
        <softbreak />
        <text>it is part of a </text>
        <text>[</text>
        <text>right-flanking delimiter run</text>
        <text>]</text>
        <softbreak />
        <text>and either (a) not part of a </text>
        <text>[</text>
        <text>left-flanking delimiter run</text>
        <text>]</text>
        <softbreak />
        <text>or (b) part of a </text>
        <text>[</text>
        <text>left-flanking delimeter run</text>
        <text>]</text>
        <softbreak />
        <text>followed by punctuation.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>Emphasis begins with a delimiter that </text>
        <text>[</text>
        <text>can open emphasis</text>
        <text>]</text>
        <text> and ends</text>
        <softbreak />
        <text>with a delimiter that </text>
        <text>[</text>
        <text>can close emphasis</text>
        <text>]</text>
        <text>, and that uses the same</text>
        <softbreak />
        <text>character (</text>
        <code>_</code>
        <text> or </text>
        <code>*</code>
        <text>) as the opening delimiter.  There must</text>
        <softbreak />
        <text>be a nonempty sequence of inlines between the open delimiter</text>
        <softbreak />
        <text>and the closing delimiter; these form the contents of the emphasis</text>
        <softbreak />
        <text>inline.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>Strong emphasis begins with a delimiter that</text>
        <softbreak />
        <text>[</text>
        <text>can open strong emphasis</text>
        <text>]</text>
        <text> and ends with a delimiter that</text>
        <softbreak />
        <text>[</text>
        <text>can close strong emphasis</text>
        <text>]</text>
        <text>, and that uses the same character</text>
        <softbreak />
        <text>(</text>
        <code>_</code>
        <text> or </text>
        <code>*</code>
        <text>) as the opening delimiter.</text>
        <softbreak />
        <text>There must be a nonempty sequence of inlines between the open</text>
        <softbreak />
        <text>delimiter and the closing delimiter; these form the contents of</text>
        <softbreak />
        <text>the strong emphasis inline.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>A literal </text>
        <code>*</code>
        <text> character cannot occur at the beginning or end of</text>
        <softbreak />
        <code>*</code>
        <text>-delimited emphasis or </text>
        <code>**</code>
        <text>-delimited strong emphasis, unless it</text>
        <softbreak />
        <text>is backslash-escaped.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>A literal </text>
        <code>_</code>
        <text> character cannot occur at the beginning or end of</text>
        <softbreak />
        <code>_</code>
        <text>-delimited emphasis or </text>
        <code>__</code>
        <text>-delimited strong emphasis, unless it</text>
        <softbreak />
        <text>is backslash-escaped.</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>Where rules 1--12 above are compatible with multiple parsings,</text>
    <softbreak />
    <text>the following principles resolve ambiguity:</text>
  </paragraph>
  <list type="ordered" start="13" tight="false" delimiter="period">
    <item>
      <paragraph>
        <text>The number of nestings should be minimized. Thus, for example,</text>
        <softbreak />
        <text>an interpretation </text>
        <code>&lt;strong&gt;...&lt;/strong&gt;</code>
        <text> is always preferred to</text>
        <softbreak />
        <code>&lt;em&gt;&lt;em&gt;...&lt;/em&gt;&lt;/em&gt;</code>
        <text>.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>An interpretation </text>
        <code>&lt;strong&gt;&lt;em&gt;...&lt;/em&gt;&lt;/strong&gt;</code>
        <text> is always</text>
        <softbreak />
        <text>preferred to </text>
        <code>&lt;em&gt;&lt;strong&gt;..&lt;/strong&gt;&lt;/em&gt;</code>
        <text>.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>When two potential emphasis or strong emphasis spans overlap,</text>
        <softbreak />
        <text>so that the second begins before the first ends and ends after</text>
        <softbreak />
        <text>the first ends, the first takes precedence. Thus, for example,</text>
        <softbreak />
        <code>*foo _bar* baz_</code>
        <text> is parsed as </text>
        <code>&lt;em&gt;foo _bar&lt;/em&gt; baz_</code>
        <text> rather</text>
        <softbreak />
        <text>than </text>
        <code>*foo &lt;em&gt;bar* baz&lt;/em&gt;</code>
        <text>.  For the same reason,</text>
        <softbreak />
        <code>**foo*bar**</code>
        <text> is parsed as </text>
        <code>&lt;em&gt;&lt;em&gt;foo&lt;/em&gt;bar&lt;/em&gt;*</code>
        <softbreak />
        <text>rather than </text>
        <code>&lt;strong&gt;foo*bar&lt;/strong&gt;</code>
        <text>.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>When there are two potential emphasis or strong emphasis spans</text>
        <softbreak />
        <text>with the same closing delimiter, the shorter one (the one that</text>
        <softbreak />
        <text>opens later) takes precedence. Thus, for example,</text>
        <softbreak />
        <code>**foo **bar baz**</code>
        <text> is parsed as </text>
        <code>**foo &lt;strong&gt;bar baz&lt;/strong&gt;</code>
        <softbreak />
        <text>rather than </text>
        <code>&lt;strong&gt;foo **bar baz&lt;/strong&gt;</code>
        <text>.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>Inline code spans, links, images, and HTML tags group more tightly</text>
        <softbreak />
        <text>than emphasis.  So, when there is a choice between an interpretation</text>
        <softbreak />
        <text>that contains one of these elements and one that does not, the</text>
        <softbreak />
        <text>former always wins.  Thus, for example, </text>
        <code>*[foo*](bar)</code>
        <text> is</text>
        <softbreak />
        <text>parsed as </text>
        <code>*&lt;a href=&quot;bar&quot;&gt;foo*&lt;/a&gt;</code>
        <text> rather than as</text>
        <softbreak />
        <code>&lt;em&gt;[foo&lt;/em&gt;](bar)</code>
        <text>.</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>These rules can be illustrated through a series of examples.</text>
  </paragraph>
  <paragraph>
    <text>Rule 1:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo bar</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo bar&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is not emphasis, because the opening </text>
    <code>*</code>
    <text> is followed by</text>
    <softbreak />
    <text>whitespace, and hence not part of a </text>
    <text>[</text>
    <text>left-flanking delimiter run</text>
    <text>]</text>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>a </text>
    <text>*</text>
    <text> foo bar</text>
    <text>*</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;a * foo bar*&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is not emphasis, because the opening </text>
    <code>*</code>
    <text> is preceded</text>
    <softbreak />
    <text>by an alphanumeric and followed by punctuation, and hence</text>
    <softbreak />
    <text>not part of a </text>
    <text>[</text>
    <text>left-flanking delimiter run</text>
    <text>]</text>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>a</text>
    <text>*</text>
    <text>&quot;</text>
    <text>foo</text>
    <text>&quot;</text>
    <text>*</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;a*&amp;quot;foo&amp;quot;*&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Unicode nonbreaking spaces count as whitespace, too:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>*</text>
    <text> a </text>
    <text>*</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;* a *&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Intraword emphasis with </text>
    <code>*</code>
    <text> is permitted:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
    <emph>
      <text>bar</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo&lt;em&gt;bar&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>5</text>
    <emph>
      <text>6</text>
    </emph>
    <text>78</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;5&lt;em&gt;6&lt;/em&gt;78&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Rule 2:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo bar</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo bar&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is not emphasis, because the opening </text>
    <code>_</code>
    <text> is followed by</text>
    <softbreak />
    <text>whitespace:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>_</text>
    <text> foo bar</text>
    <text>_</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;_ foo bar_&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is not emphasis, because the opening </text>
    <code>_</code>
    <text> is preceded</text>
    <softbreak />
    <text>by an alphanumeric and followed by punctuation:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>a</text>
    <text>_</text>
    <text>&quot;</text>
    <text>foo</text>
    <text>&quot;</text>
    <text>_</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;a_&amp;quot;foo&amp;quot;_&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Emphasis with </text>
    <code>_</code>
    <text> is not allowed inside words:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
    <text>_</text>
    <text>bar</text>
    <text>_</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo_bar_&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>5</text>
    <text>_</text>
    <text>6</text>
    <text>_</text>
    <text>78</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;5_6_78&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>пристаням</text>
    <text>_</text>
    <text>стремятся</text>
    <text>_</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;пристаням_стремятся_&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Here </text>
    <code>_</code>
    <text> does not generate emphasis, because the first delimiter run</text>
    <softbreak />
    <text>is right-flanking and the second left-flanking:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>aa</text>
    <text>_</text>
    <text>&quot;</text>
    <text>bb</text>
    <text>&quot;</text>
    <text>_</text>
    <text>cc</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;aa_&amp;quot;bb&amp;quot;_cc&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is emphasis, even though the opening delimiter is</text>
    <softbreak />
    <text>both left- and right-flanking, because it is preceded by</text>
    <softbreak />
    <text>punctuation:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo-</text>
    <emph>
      <text>(bar)</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo-&lt;em&gt;(bar)&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Rule 3:</text>
  </paragraph>
  <paragraph>
    <text>This is not emphasis, because the closing delimiter does</text>
    <softbreak />
    <text>not match the opening delimiter:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>_</text>
    <text>foo</text>
    <text>*</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;_foo*&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is not emphasis, because the closing </text>
    <code>*</code>
    <text> is preceded by</text>
    <softbreak />
    <text>whitespace:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>*</text>
    <text>foo bar </text>
    <text>*</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;*foo bar *&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>A newline also counts as whitespace:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>*</text>
    <text>foo bar</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
    </item>
  </list>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;*foo bar&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
.</html_block>
  <paragraph>
    <text>This is not emphasis, because the second </text>
    <code>*</code>
    <text> is</text>
    <softbreak />
    <text>preceded by punctuation and followed by an alphanumeric</text>
    <softbreak />
    <text>(hence it is not part of a </text>
    <text>[</text>
    <text>right-flanking delimiter run</text>
    <text>]</text>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>*</text>
    <text>(</text>
    <text>*</text>
    <text>foo)</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;*(*foo)&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>The point of this restriction is more easily appreciated</text>
    <softbreak />
    <text>with this example:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>(</text>
      <emph>
        <text>foo</text>
      </emph>
      <text>)</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;(&lt;em&gt;foo&lt;/em&gt;)&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Intraword emphasis with </text>
    <code>*</code>
    <text> is allowed:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo</text>
    </emph>
    <text>bar</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo&lt;/em&gt;bar&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Rule 4:</text>
  </paragraph>
  <paragraph>
    <text>This is not emphasis, because the closing </text>
    <code>_</code>
    <text> is preceded by</text>
    <softbreak />
    <text>whitespace:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>_</text>
    <text>foo bar </text>
    <text>_</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;_foo bar _&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is not emphasis, because the second </text>
    <code>_</code>
    <text> is</text>
    <softbreak />
    <text>preceded by punctuation and followed by an alphanumeric:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>_</text>
    <text>(</text>
    <text>_</text>
    <text>foo)</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;_(_foo)&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is emphasis within emphasis:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>(</text>
      <emph>
        <text>foo</text>
      </emph>
      <text>)</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;(&lt;em&gt;foo&lt;/em&gt;)&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Intraword emphasis is disallowed for </text>
    <code>_</code>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>_</text>
    <text>foo</text>
    <text>_</text>
    <text>bar</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;_foo_bar&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>_</text>
    <text>пристаням</text>
    <text>_</text>
    <text>стремятся</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;_пристаням_стремятся&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo</text>
      <text>_</text>
      <text>bar</text>
      <text>_</text>
      <text>baz</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo_bar_baz&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is emphasis, even though the closing delimiter is</text>
    <softbreak />
    <text>both left- and right-flanking, because it is followed by</text>
    <softbreak />
    <text>punctuation:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>(bar)</text>
    </emph>
    <text>.</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;(bar)&lt;/em&gt;.&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Rule 5:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>foo bar</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;foo bar&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is not strong emphasis, because the opening delimiter is</text>
    <softbreak />
    <text>followed by whitespace:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>**</text>
    <text> foo bar</text>
    <text>**</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;** foo bar**&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is not strong emphasis, because the opening </text>
    <code>**</code>
    <text> is preceded</text>
    <softbreak />
    <text>by an alphanumeric and followed by punctuation, and hence</text>
    <softbreak />
    <text>not part of a </text>
    <text>[</text>
    <text>left-flanking delimiter run</text>
    <text>]</text>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>a</text>
    <text>**</text>
    <text>&quot;</text>
    <text>foo</text>
    <text>&quot;</text>
    <text>**</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;a**&amp;quot;foo&amp;quot;**&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Intraword strong emphasis with </text>
    <code>**</code>
    <text> is permitted:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
    <strong>
      <text>bar</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo&lt;strong&gt;bar&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Rule 6:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>foo bar</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;foo bar&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is not strong emphasis, because the opening delimiter is</text>
    <softbreak />
    <text>followed by whitespace:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>__</text>
    <text> foo bar</text>
    <text>__</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;__ foo bar__&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>A newline counts as whitespace:</text>
    <softbreak />
    <text>.</text>
    <softbreak />
    <text>__</text>
    <softbreak />
    <text>foo bar</text>
    <text>__</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;__
foo bar__&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is not strong emphasis, because the opening </text>
    <code>__</code>
    <text> is preceded</text>
    <softbreak />
    <text>by an alphanumeric and followed by punctuation:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>a</text>
    <text>__</text>
    <text>&quot;</text>
    <text>foo</text>
    <text>&quot;</text>
    <text>__</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;a__&amp;quot;foo&amp;quot;__&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Intraword strong emphasis is forbidden with </text>
    <code>__</code>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
    <text>__</text>
    <text>bar</text>
    <text>__</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo__bar__&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>5</text>
    <text>__</text>
    <text>6</text>
    <text>__</text>
    <text>78</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;5__6__78&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>пристаням</text>
    <text>__</text>
    <text>стремятся</text>
    <text>__</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;пристаням__стремятся__&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>foo, </text>
      <strong>
        <text>bar</text>
      </strong>
      <text>, baz</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;foo, &lt;strong&gt;bar&lt;/strong&gt;, baz&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is strong emphasis, even though the opening delimiter is</text>
    <softbreak />
    <text>both left- and right-flanking, because it is preceded by</text>
    <softbreak />
    <text>punctuation:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo-</text>
    <strong>
      <text>(bar)</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo-&lt;strong&gt;(bar)&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Rule 7:</text>
  </paragraph>
  <paragraph>
    <text>This is not strong emphasis, because the closing delimiter is preceded</text>
    <softbreak />
    <text>by whitespace:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>**</text>
    <text>foo bar </text>
    <text>**</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;**foo bar **&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>(Nor can it be interpreted as an emphasized </text>
    <code>*foo bar *</code>
    <text>, because of</text>
    <softbreak />
    <text>Rule 11.)</text>
  </paragraph>
  <paragraph>
    <text>This is not strong emphasis, because the second </text>
    <code>**</code>
    <text> is</text>
    <softbreak />
    <text>preceded by punctuation and followed by an alphanumeric:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>**</text>
    <text>(</text>
    <text>**</text>
    <text>foo)</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;**(**foo)&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>The point of this restriction is more easily appreciated</text>
    <softbreak />
    <text>with these examples:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>(</text>
      <strong>
        <text>foo</text>
      </strong>
      <text>)</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;(&lt;strong&gt;foo&lt;/strong&gt;)&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>Gomphocarpus (</text>
      <emph>
        <text>Gomphocarpus physocarpus</text>
      </emph>
      <text>, syn.</text>
      <softbreak />
      <emph>
        <text>Asclepias physocarpa</text>
      </emph>
      <text>)</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;Gomphocarpus (&lt;em&gt;Gomphocarpus physocarpus&lt;/em&gt;, syn.
&lt;em&gt;Asclepias physocarpa&lt;/em&gt;)&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>foo </text>
      <text>&quot;</text>
      <emph>
        <text>bar</text>
      </emph>
      <text>&quot;</text>
      <text> foo</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;foo &amp;quot;&lt;em&gt;bar&lt;/em&gt;&amp;quot; foo&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Intraword emphasis:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>foo</text>
    </strong>
    <text>bar</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;foo&lt;/strong&gt;bar&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Rule 8:</text>
  </paragraph>
  <paragraph>
    <text>This is not strong emphasis, because the closing delimiter is</text>
    <softbreak />
    <text>preceded by whitespace:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>__</text>
    <text>foo bar </text>
    <text>__</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;__foo bar __&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is not strong emphasis, because the second </text>
    <code>__</code>
    <text> is</text>
    <softbreak />
    <text>preceded by punctuation and followed by an alphanumeric:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>__</text>
    <text>(</text>
    <text>__</text>
    <text>foo)</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;__(__foo)&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>The point of this restriction is more easily appreciated</text>
    <softbreak />
    <text>with this example:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>(</text>
      <strong>
        <text>foo</text>
      </strong>
      <text>)</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;(&lt;strong&gt;foo&lt;/strong&gt;)&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Intraword strong emphasis is forbidden with </text>
    <code>__</code>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>__</text>
    <text>foo</text>
    <text>__</text>
    <text>bar</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;__foo__bar&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>__</text>
    <text>пристаням</text>
    <text>__</text>
    <text>стремятся</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;__пристаням__стремятся&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>foo</text>
      <text>__</text>
      <text>bar</text>
      <text>__</text>
      <text>baz</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;foo__bar__baz&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>This is strong emphasis, even though the closing delimiter is</text>
    <softbreak />
    <text>both left- and right-flanking, because it is followed by</text>
    <softbreak />
    <text>punctuation:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>(bar)</text>
    </strong>
    <text>.</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;(bar)&lt;/strong&gt;.&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Rule 9:</text>
  </paragraph>
  <paragraph>
    <text>Any nonempty sequence of inline elements can be the contents of an</text>
    <softbreak />
    <text>emphasized span.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo </text>
      <link destination="/url" title="">
        <text>bar</text>
      </link>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo &lt;a href=&quot;/url&quot;&gt;bar&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo</text>
      <softbreak />
      <text>bar</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo
bar&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>In particular, emphasis and strong emphasis can be nested</text>
    <softbreak />
    <text>inside emphasis:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo </text>
      <strong>
        <text>bar</text>
      </strong>
      <text> baz</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo &lt;strong&gt;bar&lt;/strong&gt; baz&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo </text>
      <emph>
        <text>bar</text>
      </emph>
      <text> baz</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo &lt;em&gt;bar&lt;/em&gt; baz&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <emph>
        <text>foo</text>
      </emph>
      <text> bar</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;&lt;em&gt;foo&lt;/em&gt; bar&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo </text>
      <emph>
        <text>bar</text>
      </emph>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo &lt;em&gt;bar&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo </text>
      <strong>
        <text>bar</text>
      </strong>
      <text> baz</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo &lt;strong&gt;bar&lt;/strong&gt; baz&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>But note:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo</text>
    </emph>
    <emph>
      <text>bar</text>
    </emph>
    <emph>
      <text>baz</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo&lt;/em&gt;&lt;em&gt;bar&lt;/em&gt;&lt;em&gt;baz&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>The difference is that in the preceding case, the internal delimiters</text>
    <softbreak />
    <text>[</text>
    <text>can close emphasis</text>
    <text>]</text>
    <text>, while in the cases with spaces, they cannot.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <strong>
        <text>foo</text>
      </strong>
      <text> bar</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;&lt;strong&gt;foo&lt;/strong&gt; bar&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo </text>
      <strong>
        <text>bar</text>
      </strong>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo &lt;strong&gt;bar&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Note, however, that in the following case we get no strong</text>
    <softbreak />
    <text>emphasis, because the opening delimiter is closed by the first</text>
    <softbreak />
    <code>*</code>
    <text> before </text>
    <code>bar</code>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo</text>
    </emph>
    <emph>
      <text>bar</text>
    </emph>
    <text>**</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo&lt;/em&gt;&lt;em&gt;bar&lt;/em&gt;**&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Indefinite levels of nesting are possible:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo </text>
      <strong>
        <text>bar </text>
        <emph>
          <text>baz</text>
        </emph>
        <text> bim</text>
      </strong>
      <text> bop</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo &lt;strong&gt;bar &lt;em&gt;baz&lt;/em&gt; bim&lt;/strong&gt; bop&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo </text>
      <link destination="/url" title="">
        <emph>
          <text>bar</text>
        </emph>
      </link>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo &lt;a href=&quot;/url&quot;&gt;&lt;em&gt;bar&lt;/em&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>There can be no empty emphasis or strong emphasis:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>**</text>
    <text> is not an empty emphasis</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;** is not an empty emphasis&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>****</text>
    <text> is not an empty strong emphasis</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;**** is not an empty strong emphasis&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Rule 10:</text>
  </paragraph>
  <paragraph>
    <text>Any nonempty sequence of inline elements can be the contents of an</text>
    <softbreak />
    <text>strongly emphasized span.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>foo </text>
      <link destination="/url" title="">
        <text>bar</text>
      </link>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;foo &lt;a href=&quot;/url&quot;&gt;bar&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>foo</text>
      <softbreak />
      <text>bar</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;foo
bar&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>In particular, emphasis and strong emphasis can be nested</text>
    <softbreak />
    <text>inside strong emphasis:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>foo </text>
      <emph>
        <text>bar</text>
      </emph>
      <text> baz</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;foo &lt;em&gt;bar&lt;/em&gt; baz&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>foo </text>
      <strong>
        <text>bar</text>
      </strong>
      <text> baz</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;foo &lt;strong&gt;bar&lt;/strong&gt; baz&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <strong>
        <text>foo</text>
      </strong>
      <text> bar</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;&lt;strong&gt;foo&lt;/strong&gt; bar&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>foo </text>
      <strong>
        <text>bar</text>
      </strong>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;foo &lt;strong&gt;bar&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>foo </text>
      <emph>
        <text>bar</text>
      </emph>
      <text> baz</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;foo &lt;em&gt;bar&lt;/em&gt; baz&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>But note:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <emph>
        <text>foo</text>
      </emph>
      <text>bar</text>
    </emph>
    <text>baz</text>
    <text>**</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;&lt;em&gt;foo&lt;/em&gt;bar&lt;/em&gt;baz**&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>The difference is that in the preceding case, the internal delimiters</text>
    <softbreak />
    <text>[</text>
    <text>can close emphasis</text>
    <text>]</text>
    <text>, while in the cases with spaces, they cannot.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <emph>
        <text>foo</text>
      </emph>
      <text> bar</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;&lt;em&gt;foo&lt;/em&gt; bar&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>foo </text>
      <emph>
        <text>bar</text>
      </emph>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;foo &lt;em&gt;bar&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Indefinite levels of nesting are possible:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>foo </text>
      <emph>
        <text>bar </text>
        <strong>
          <text>baz</text>
        </strong>
        <softbreak />
        <text>bim</text>
      </emph>
      <text> bop</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;foo &lt;em&gt;bar &lt;strong&gt;baz&lt;/strong&gt;
bim&lt;/em&gt; bop&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>foo </text>
      <link destination="/url" title="">
        <emph>
          <text>bar</text>
        </emph>
      </link>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;foo &lt;a href=&quot;/url&quot;&gt;&lt;em&gt;bar&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>There can be no empty emphasis or strong emphasis:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>__</text>
    <text> is not an empty emphasis</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;__ is not an empty emphasis&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>____</text>
    <text> is not an empty strong emphasis</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;____ is not an empty strong emphasis&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Rule 11:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo </text>
    <text>***</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo ***&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo </text>
    <emph>
      <text>*</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo &lt;em&gt;*&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo </text>
    <emph>
      <text>_</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo &lt;em&gt;_&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo </text>
    <text>*****</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo *****&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo </text>
    <strong>
      <text>*</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo &lt;strong&gt;*&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo </text>
    <strong>
      <text>_</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo &lt;strong&gt;_&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Note that when delimiters do not match evenly, Rule 11 determines</text>
    <softbreak />
    <text>that the excess literal </text>
    <code>*</code>
    <text> characters will appear outside of the</text>
    <softbreak />
    <text>emphasis, rather than inside it:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>*</text>
    <emph>
      <text>foo</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;*&lt;em&gt;foo&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo</text>
    </emph>
    <text>*</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo&lt;/em&gt;*&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>*</text>
    <strong>
      <text>foo</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;*&lt;strong&gt;foo&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>***</text>
    <emph>
      <text>foo</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;***&lt;em&gt;foo&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>foo</text>
    </strong>
    <text>*</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;foo&lt;/strong&gt;*&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo</text>
    </emph>
    <text>***</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo&lt;/em&gt;***&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Rule 12:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo </text>
    <text>___</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo ___&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo </text>
    <emph>
      <text>_</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo &lt;em&gt;_&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo </text>
    <emph>
      <text>*</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo &lt;em&gt;*&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo </text>
    <text>_____</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo _____&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo </text>
    <strong>
      <text>_</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo &lt;strong&gt;_&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo </text>
    <strong>
      <text>*</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo &lt;strong&gt;*&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>_</text>
    <emph>
      <text>foo</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;_&lt;em&gt;foo&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Note that when delimiters do not match evenly, Rule 12 determines</text>
    <softbreak />
    <text>that the excess literal </text>
    <code>_</code>
    <text> characters will appear outside of the</text>
    <softbreak />
    <text>emphasis, rather than inside it:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo</text>
    </emph>
    <text>_</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo&lt;/em&gt;_&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>_</text>
    <strong>
      <text>foo</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;_&lt;strong&gt;foo&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>___</text>
    <emph>
      <text>foo</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;___&lt;em&gt;foo&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>foo</text>
    </strong>
    <text>_</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;foo&lt;/strong&gt;_&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo</text>
    </emph>
    <text>___</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo&lt;/em&gt;___&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Rule 13 implies that if you want emphasis nested directly inside</text>
    <softbreak />
    <text>emphasis, you must use different delimiters:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>foo</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;foo&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <emph>
        <text>foo</text>
      </emph>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;&lt;em&gt;foo&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <text>foo</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;foo&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <emph>
        <text>foo</text>
      </emph>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;&lt;em&gt;foo&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>However, strong emphasis within strong emphasis is possible without</text>
    <softbreak />
    <text>switching delimiters:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <strong>
        <text>foo</text>
      </strong>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;&lt;strong&gt;foo&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <strong>
        <text>foo</text>
      </strong>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;&lt;strong&gt;foo&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Rule 13 can be applied to arbitrarily long sequences of</text>
    <softbreak />
    <text>delimiters:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <strong>
        <strong>
          <text>foo</text>
        </strong>
      </strong>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;foo&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Rule 14:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <emph>
        <text>foo</text>
      </emph>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;&lt;em&gt;foo&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <strong>
      <strong>
        <emph>
          <text>foo</text>
        </emph>
      </strong>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;em&gt;foo&lt;/em&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Rule 15:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo </text>
      <text>_</text>
      <text>bar</text>
    </emph>
    <text> baz</text>
    <text>_</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo _bar&lt;/em&gt; baz_&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <emph>
        <text>foo</text>
      </emph>
      <text>bar</text>
    </emph>
    <text>*</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;&lt;em&gt;foo&lt;/em&gt;bar&lt;/em&gt;*&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo </text>
      <strong>
        <text>bar </text>
        <text>*</text>
        <text>baz bim</text>
      </strong>
      <text> bam</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo &lt;strong&gt;bar *baz bim&lt;/strong&gt; bam&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Rule 16:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>**</text>
    <text>foo </text>
    <strong>
      <text>bar baz</text>
    </strong>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;**foo &lt;strong&gt;bar baz&lt;/strong&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>*</text>
    <text>foo </text>
    <emph>
      <text>bar baz</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;*foo &lt;em&gt;bar baz&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Rule 17:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>*</text>
    <link destination="/url" title="">
      <text>bar</text>
      <text>*</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;*&lt;a href=&quot;/url&quot;&gt;bar*&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>_</text>
    <text>foo </text>
    <link destination="/url" title="">
      <text>bar</text>
      <text>_</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;_foo &lt;a href=&quot;/url&quot;&gt;bar_&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>*</text>
    <html><img src="foo" title="*"/></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;*&lt;img src=&quot;foo&quot; title=&quot;*&quot;/&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>**</text>
    <html><a href="**"></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;**&lt;a href=&quot;**&quot;&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>__</text>
    <html><a href="__"></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;__&lt;a href=&quot;__&quot;&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>a </text>
      <code>*</code>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;a &lt;code&gt;*&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>a </text>
      <code>_</code>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;a &lt;code&gt;_&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>**</text>
    <text>a</text>
    <link destination="http://foo.bar/?q=**" title="">
      <text>http://foo.bar/?q=**</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;**a&lt;a href=&quot;http://foo.bar/?q=**&quot;&gt;http://foo.bar/?q=**&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>__</text>
    <text>a</text>
    <link destination="http://foo.bar/?q=__" title="">
      <text>http://foo.bar/?q=__</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;__a&lt;a href=&quot;http://foo.bar/?q=__&quot;&gt;http://foo.bar/?q=__&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <header level="2">
    <text>Links</text>
  </header>
  <paragraph>
    <text>A link contains </text>
    <text>[</text>
    <text>link text</text>
    <text>]</text>
    <text> (the visible text), a </text>
    <text>[</text>
    <text>link destination</text>
    <text>]</text>
    <softbreak />
    <text>(the URI that is the link destination), and optionally a </text>
    <text>[</text>
    <text>link title</text>
    <text>]</text>
    <text>.</text>
    <softbreak />
    <text>There are two basic kinds of links in Markdown.  In </text>
    <text>[</text>
    <text>inline link</text>
    <text>]</text>
    <text>s the</text>
    <softbreak />
    <text>destination and title are given immediately after the link text.  In</text>
    <softbreak />
    <text>[</text>
    <text>reference link</text>
    <text>]</text>
    <text>s the destination and title are defined elsewhere in</text>
    <softbreak />
    <text>the document.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@link-text" title="">
      <text>link text</text>
    </link>
    <text> consists of a sequence of zero or more</text>
    <softbreak />
    <text>inline elements enclosed by square brackets (</text>
    <code>[</code>
    <text> and </text>
    <code>]</code>
    <text>).  The</text>
    <softbreak />
    <text>following rules apply:</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <paragraph>
        <text>Links may not contain other links, at any level of nesting. If</text>
        <softbreak />
        <text>multiple otherwise valid link definitions appear nested inside each</text>
        <softbreak />
        <text>other, the inner-most definition is used.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>Brackets are allowed in the </text>
        <text>[</text>
        <text>link text</text>
        <text>]</text>
        <text> only if (a) they</text>
        <softbreak />
        <text>are backslash-escaped or (b) they appear as a matched pair of brackets,</text>
        <softbreak />
        <text>with an open bracket </text>
        <code>[</code>
        <text>, a sequence of zero or more inlines, and</text>
        <softbreak />
        <text>a close bracket </text>
        <code>]</code>
        <text>.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>Backtick </text>
        <text>[</text>
        <text>code span</text>
        <text>]</text>
        <text>s, </text>
        <text>[</text>
        <text>autolink</text>
        <text>]</text>
        <text>s, and raw </text>
        <text>[</text>
        <text>HTML tag</text>
        <text>]</text>
        <text>s bind more tightly</text>
        <softbreak />
        <text>than the brackets in link text.  Thus, for example,</text>
        <softbreak />
        <code>[foo`]`</code>
        <text> could not be a link text, since the second </text>
        <code>]</code>
        <softbreak />
        <text>is part of a code span.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>The brackets in link text bind more tightly than markers for</text>
        <softbreak />
        <text>[</text>
        <text>emphasis and strong emphasis</text>
        <text>]</text>
        <text>. Thus, for example, </text>
        <code>*[foo*](url)</code>
        <text> is a link.</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>A </text>
    <link destination="@link-destination" title="">
      <text>link destination</text>
    </link>
    <text> consists of either</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <paragraph>
        <text>a sequence of zero or more characters between an opening </text>
        <code>&lt;</code>
        <text> and a</text>
        <softbreak />
        <text>closing </text>
        <code>&gt;</code>
        <text> that contains no line breaks or unescaped </text>
        <code>&lt;</code>
        <text> or </text>
        <code>&gt;</code>
        <softbreak />
        <text>characters, or</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>a nonempty sequence of characters that does not include</text>
        <softbreak />
        <text>ASCII space or control characters, and includes parentheses</text>
        <softbreak />
        <text>only if (a) they are backslash-escaped or (b) they are part of</text>
        <softbreak />
        <text>a balanced pair of unescaped parentheses that is not itself</text>
        <softbreak />
        <text>inside a balanced pair of unescaped parentheses.</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>A </text>
    <link destination="@link-title" title="">
      <text>link title</text>
    </link>
    <text>  consists of either</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <paragraph>
        <text>a sequence of zero or more characters between straight double-quote</text>
        <softbreak />
        <text>characters (</text>
        <code>&quot;</code>
        <text>), including a </text>
        <code>&quot;</code>
        <text> character only if it is</text>
        <softbreak />
        <text>backslash-escaped, or</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>a sequence of zero or more characters between straight single-quote</text>
        <softbreak />
        <text>characters (</text>
        <code>'</code>
        <text>), including a </text>
        <code>'</code>
        <text> character only if it is</text>
        <softbreak />
        <text>backslash-escaped, or</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>a sequence of zero or more characters between matching parentheses</text>
        <softbreak />
        <text>(</text>
        <code>(...)</code>
        <text>), including a </text>
        <code>)</code>
        <text> character only if it is backslash-escaped.</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>Although </text>
    <text>[</text>
    <text>link title</text>
    <text>]</text>
    <text>s may span multiple lines, they may not contain</text>
    <softbreak />
    <text>a </text>
    <text>[</text>
    <text>blank line</text>
    <text>]</text>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>An </text>
    <link destination="@inline-link" title="">
      <text>inline link</text>
    </link>
    <text> consists of a </text>
    <text>[</text>
    <text>link text</text>
    <text>]</text>
    <text> followed immediately</text>
    <softbreak />
    <text>by a left parenthesis </text>
    <code>(</code>
    <text>, optional </text>
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text>, an optional</text>
    <softbreak />
    <text>[</text>
    <text>link destination</text>
    <text>]</text>
    <text>, an optional </text>
    <text>[</text>
    <text>link title</text>
    <text>]</text>
    <text> separated from the link</text>
    <softbreak />
    <text>destination by </text>
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text>, optional </text>
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text>, and a right</text>
    <softbreak />
    <text>parenthesis </text>
    <code>)</code>
    <text>. The link</text>
    <text>'</text>
    <text>s text consists of the inlines contained</text>
    <softbreak />
    <text>in the </text>
    <text>[</text>
    <text>link text</text>
    <text>]</text>
    <text> (excluding the enclosing square brackets).</text>
    <softbreak />
    <text>The link</text>
    <text>'</text>
    <text>s URI consists of the link destination, excluding enclosing</text>
    <softbreak />
    <code>&lt;...&gt;</code>
    <text> if present, with backslash-escapes in effect as described</text>
    <softbreak />
    <text>above.  The link</text>
    <text>'</text>
    <text>s title consists of the link title, excluding its</text>
    <softbreak />
    <text>enclosing delimiters, with backslash-escapes in effect as described</text>
    <softbreak />
    <text>above.</text>
  </paragraph>
  <paragraph>
    <text>Here is a simple inline link:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/uri" title="title">
      <text>link</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/uri&quot; title=&quot;title&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>The title may be omitted:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/uri" title="">
      <text>link</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/uri&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Both the title and the destination may be omitted:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="" title="">
      <text>link</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="" title="">
      <text>link</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>If the destination contains spaces, it must be enclosed in pointy</text>
    <softbreak />
    <text>braces:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>link</text>
    <text>]</text>
    <text>(/my uri)</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[link](/my uri)&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/my%20uri" title="">
      <text>link</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/my%20uri&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>The destination cannot contain line breaks, even with pointy braces:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>link</text>
    <text>]</text>
    <text>(foo</text>
    <softbreak />
    <text>bar)</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[link](foo
bar)&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>link</text>
    <text>]</text>
    <text>(</text>
    <html><foo
bar></html>
    <text>)</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[link](&lt;foo
bar&gt;)&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>One level of balanced parentheses is allowed without escaping:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="(foo)and(bar)" title="">
      <text>link</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;(foo)and(bar)&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>However, if you have parentheses within parentheses, you need to escape</text>
    <softbreak />
    <text>or use the </text>
    <code>&lt;...&gt;</code>
    <text> form:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>link</text>
    <text>]</text>
    <text>(foo(and(bar)))</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[link](foo(and(bar)))&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="foo(and(bar))" title="">
      <text>link</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;foo(and(bar))&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="foo(and(bar))" title="">
      <text>link</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;foo(and(bar))&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Parentheses and other symbols can also be escaped, as usual</text>
    <softbreak />
    <text>in Markdown:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="foo):" title="">
      <text>link</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;foo):&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>A link can contain fragment identifiers and queries:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="#fragment" title="">
      <text>link</text>
    </link>
  </paragraph>
  <paragraph>
    <link destination="http://example.com#fragment" title="">
      <text>link</text>
    </link>
  </paragraph>
  <paragraph>
    <link destination="http://example.com?foo=bar&baz#fragment" title="">
      <text>link</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;#fragment&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://example.com#fragment&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://example.com?foo=bar&amp;amp;baz#fragment&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Note that a backslash before a non-escapable character is</text>
    <softbreak />
    <text>just a backslash:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="foo%5Cbar" title="">
      <text>link</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;foo%5Cbar&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>URL-escaping should be left alone inside the destination, as all</text>
    <softbreak />
    <text>URL-escaped characters are also valid URL characters. HTML entities in</text>
    <softbreak />
    <text>the destination will be parsed into the corresponding Unicode</text>
    <softbreak />
    <text>code points, as usual, and optionally URL-escaped when written as HTML.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="foo%20b%C3%A4" title="">
      <text>link</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;foo%20b%C3%A4&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Note that, because titles can often be parsed as destinations,</text>
    <softbreak />
    <text>if you try to omit the destination and keep the title, you</text>
    <text>'</text>
    <text>ll</text>
    <softbreak />
    <text>get unexpected results:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="%22title%22" title="">
      <text>link</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;%22title%22&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Titles may be in single quotes, double quotes, or parentheses:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/url" title="title">
      <text>link</text>
    </link>
    <softbreak />
    <link destination="/url" title="title">
      <text>link</text>
    </link>
    <softbreak />
    <link destination="/url" title="title">
      <text>link</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;link&lt;/a&gt;
&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;link&lt;/a&gt;
&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Backslash escapes and entities may be used in titles:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/url" title="title """>
      <text>link</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title &amp;quot;&amp;quot;&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Nested balanced quotes are not allowed without escaping:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>link</text>
    <text>]</text>
    <text>(/url </text>
    <text>&quot;</text>
    <text>title </text>
    <text>&quot;</text>
    <text>and</text>
    <text>&quot;</text>
    <text> title</text>
    <text>&quot;</text>
    <text>)</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[link](/url &amp;quot;title &amp;quot;and&amp;quot; title&amp;quot;)&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>But it is easy to work around this by using a different quote type:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/url" title="title "and" title">
      <text>link</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title &amp;quot;and&amp;quot; title&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>(Note:  </text>
    <code>Markdown.pl</code>
    <text> did allow double quotes inside a double-quoted</text>
    <softbreak />
    <text>title, and its test suite included a test demonstrating this.</text>
    <softbreak />
    <text>But it is hard to see a good rationale for the extra complexity this</text>
    <softbreak />
    <text>brings, since there are already many ways---backslash escaping,</text>
    <softbreak />
    <text>entities, or using a different quote type for the enclosing title---to</text>
    <softbreak />
    <text>write titles containing double quotes.  </text>
    <code>Markdown.pl</code>
    <text>'</text>
    <text>s handling of</text>
    <softbreak />
    <text>titles has a number of other strange features.  For example, it allows</text>
    <softbreak />
    <text>single-quoted titles in inline links, but not reference links.  And, in</text>
    <softbreak />
    <text>reference links but not inline links, it allows a title to begin with</text>
    <softbreak />
    <code>&quot;</code>
    <text> and end with </text>
    <code>)</code>
    <text>.  </text>
    <code>Markdown.pl</code>
    <text> 1.0.1 even allows titles with no closing</text>
    <softbreak />
    <text>quotation mark, though 1.0.2b8 does not.  It seems preferable to adopt</text>
    <softbreak />
    <text>a simple, rational rule that works the same way in inline links and</text>
    <softbreak />
    <text>link reference definitions.)</text>
  </paragraph>
  <paragraph>
    <text>[</text>
    <text>Whitespace</text>
    <text>]</text>
    <text> is allowed around the destination and title:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/uri" title="title">
      <text>link</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/uri&quot; title=&quot;title&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>But it is not allowed between the link text and the</text>
    <softbreak />
    <text>following parenthesis:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>link</text>
    <text>]</text>
    <text> (/uri)</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[link] (/uri)&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>The link text may contain balanced brackets, but not unbalanced ones,</text>
    <softbreak />
    <text>unless they are escaped:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>link </text>
    <text>[</text>
    <text>foo </text>
    <link destination="/url" title="title">
      <text>bar</text>
    </link>
    <text>]</text>
    <text>]</text>
    <text>(/uri)</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/uri&quot;&gt;link [foo [bar]]&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>link</text>
    <text>]</text>
    <text> bar</text>
    <text>]</text>
    <text>(/uri)</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[link] bar](/uri)&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>link </text>
    <link destination="/uri" title="">
      <text>bar</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[link &lt;a href=&quot;/uri&quot;&gt;bar&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/uri" title="">
      <text>link </text>
      <text>[</text>
      <text>bar</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/uri&quot;&gt;link [bar&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>The link text may contain inline content:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/uri" title="">
      <text>link </text>
      <emph>
        <text>foo </text>
        <strong>
          <text>bar</text>
        </strong>
        <text> </text>
        <code>#</code>
      </emph>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/uri&quot;&gt;link &lt;em&gt;foo &lt;strong&gt;bar&lt;/strong&gt; &lt;code&gt;#&lt;/code&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/uri" title="">
      <image destination="moon.jpg" title="">
        <text>moon</text>
      </image>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/uri&quot;&gt;&lt;img src=&quot;moon.jpg&quot; alt=&quot;moon&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>However, links may not contain other links, at any level of nesting.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>foo </text>
    <link destination="/uri" title="">
      <text>bar</text>
    </link>
    <text>]</text>
    <text>(/uri)</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[foo &lt;a href=&quot;/uri&quot;&gt;bar&lt;/a&gt;](/uri)&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>foo </text>
    <emph>
      <text>[</text>
      <text>bar </text>
      <link destination="/uri" title="">
        <text>baz</text>
      </link>
      <text>]</text>
      <text>(/uri)</text>
    </emph>
    <text>]</text>
    <text>(/uri)</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[foo &lt;em&gt;[bar &lt;a href=&quot;/uri&quot;&gt;baz&lt;/a&gt;](/uri)&lt;/em&gt;](/uri)&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <image destination="uri3" title="">
      <text>[</text>
      <link destination="uri1" title="">
        <text>foo</text>
      </link>
      <text>]</text>
      <text>(uri2)</text>
    </image>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;img src=&quot;uri3&quot; alt=&quot;[foo](uri2)&quot; /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>These cases illustrate the precedence of link text grouping over</text>
    <softbreak />
    <text>emphasis grouping:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>*</text>
    <link destination="/uri" title="">
      <text>foo</text>
      <text>*</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;*&lt;a href=&quot;/uri&quot;&gt;foo*&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="baz*" title="">
      <text>foo </text>
      <text>*</text>
      <text>bar</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;baz*&quot;&gt;foo *bar&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Note that brackets that </text>
    <emph>
      <text>aren</text>
      <text>'</text>
      <text>t</text>
    </emph>
    <text> part of links do not take</text>
    <softbreak />
    <text>precedence:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo </text>
      <text>[</text>
      <text>bar</text>
    </emph>
    <text> baz</text>
    <text>]</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo [bar&lt;/em&gt; baz]&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>These cases illustrate the precedence of HTML tags, code spans,</text>
    <softbreak />
    <text>and autolinks over link grouping:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>foo </text>
    <html><bar attr="](baz)"></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[foo &lt;bar attr=&quot;](baz)&quot;&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>foo</text>
    <code>](/uri)</code>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[foo&lt;code&gt;](/uri)&lt;/code&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>foo</text>
    <link destination="http://example.com/?search=%5D(uri)" title="">
      <text>http://example.com/?search=](uri)</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[foo&lt;a href=&quot;http://example.com/?search=%5D(uri)&quot;&gt;http://example.com/?search=](uri)&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>There are three kinds of </text>
    <link destination="@reference-link" title="">
      <text>reference link</text>
    </link>
    <text>s:</text>
    <softbreak />
    <link destination="#full-reference-link" title="">
      <text>full</text>
    </link>
    <text>, </text>
    <link destination="#collapsed-reference-link" title="">
      <text>collapsed</text>
    </link>
    <text>,</text>
    <softbreak />
    <text>and </text>
    <link destination="#shortcut-reference-link" title="">
      <text>shortcut</text>
    </link>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@full-reference-link" title="">
      <text>full reference link</text>
    </link>
    <softbreak />
    <text>consists of a </text>
    <text>[</text>
    <text>link text</text>
    <text>]</text>
    <text>, optional </text>
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text>, and a </text>
    <text>[</text>
    <text>link label</text>
    <text>]</text>
    <softbreak />
    <text>that </text>
    <text>[</text>
    <text>matches</text>
    <text>]</text>
    <text> a </text>
    <text>[</text>
    <text>link reference definition</text>
    <text>]</text>
    <text> elsewhere in the document.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@link-label" title="">
      <text>link label</text>
    </link>
    <text>  begins with a left bracket (</text>
    <code>[</code>
    <text>) and ends</text>
    <softbreak />
    <text>with the first right bracket (</text>
    <code>]</code>
    <text>) that is not backslash-escaped.</text>
    <softbreak />
    <text>Between these brackets there must be at least one </text>
    <text>[</text>
    <text>non-whitespace character</text>
    <text>]</text>
    <text>.</text>
    <softbreak />
    <text>Unescaped square bracket characters are not allowed in</text>
    <softbreak />
    <text>[</text>
    <text>link label</text>
    <text>]</text>
    <text>s.  A link label can have at most 999</text>
    <softbreak />
    <text>characters inside the square brackets.</text>
  </paragraph>
  <paragraph>
    <text>One label </text>
    <link destination="@matches" title="">
      <text>matches</text>
    </link>
    <softbreak />
    <text>another just in case their normalized forms are equal.  To normalize a</text>
    <softbreak />
    <text>label, perform the </text>
    <emph>
      <text>Unicode case fold</text>
    </emph>
    <text> and collapse consecutive internal</text>
    <softbreak />
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text> to a single space.  If there are multiple</text>
    <softbreak />
    <text>matching reference link definitions, the one that comes first in the</text>
    <softbreak />
    <text>document is used.  (It is desirable in such cases to emit a warning.)</text>
  </paragraph>
  <paragraph>
    <text>The contents of the first link label are parsed as inlines, which are</text>
    <softbreak />
    <text>used as the link</text>
    <text>'</text>
    <text>s text.  The link</text>
    <text>'</text>
    <text>s URI and title are provided by the</text>
    <softbreak />
    <text>matching </text>
    <text>[</text>
    <text>link reference definition</text>
    <text>]</text>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Here is a simple example:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/url" title="title">
      <text>foo</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>The rules for the </text>
    <text>[</text>
    <text>link text</text>
    <text>]</text>
    <text> are the same as with</text>
    <softbreak />
    <text>[</text>
    <text>inline link</text>
    <text>]</text>
    <text>s.  Thus:</text>
  </paragraph>
  <paragraph>
    <text>The link text may contain balanced brackets, but not unbalanced ones,</text>
    <softbreak />
    <text>unless they are escaped:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>link </text>
    <text>[</text>
    <text>foo </text>
    <link destination="/url" title="title">
      <text>bar</text>
    </link>
    <text>]</text>
    <text>]</text>
    <link destination="/url" title="">
      <text>ref</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/uri&quot;&gt;link [foo [bar]]&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/url" title="">
      <text>link </text>
      <text>[</text>
      <text>bar</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/uri&quot;&gt;link [bar&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>The link text may contain inline content:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/url" title="">
      <text>link </text>
      <emph>
        <text>foo </text>
        <strong>
          <text>bar</text>
        </strong>
        <text> </text>
        <code>#</code>
      </emph>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/uri&quot;&gt;link &lt;em&gt;foo &lt;strong&gt;bar&lt;/strong&gt; &lt;code&gt;#&lt;/code&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/url" title="">
      <image destination="moon.jpg" title="">
        <text>moon</text>
      </image>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/uri&quot;&gt;&lt;img src=&quot;moon.jpg&quot; alt=&quot;moon&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>However, links may not contain other links, at any level of nesting.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>foo </text>
    <link destination="/uri" title="">
      <text>bar</text>
    </link>
    <text>]</text>
    <link destination="/url" title="">
      <text>ref</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[foo &lt;a href=&quot;/uri&quot;&gt;bar&lt;/a&gt;]&lt;a href=&quot;/uri&quot;&gt;ref&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>foo </text>
    <emph>
      <text>bar </text>
      <link destination="/url" title="">
        <text>baz</text>
      </link>
    </emph>
    <text>]</text>
    <link destination="/url" title="">
      <text>ref</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[foo &lt;em&gt;bar &lt;a href=&quot;/uri&quot;&gt;baz&lt;/a&gt;&lt;/em&gt;]&lt;a href=&quot;/uri&quot;&gt;ref&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>(In the examples above, we have two </text>
    <text>[</text>
    <text>shortcut reference link</text>
    <text>]</text>
    <text>s</text>
    <softbreak />
    <text>instead of one </text>
    <text>[</text>
    <text>full reference link</text>
    <text>]</text>
    <text>.)</text>
  </paragraph>
  <paragraph>
    <text>The following cases illustrate the precedence of link text grouping over</text>
    <softbreak />
    <text>emphasis grouping:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>*</text>
    <link destination="/url" title="">
      <text>foo</text>
      <text>*</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;*&lt;a href=&quot;/uri&quot;&gt;foo*&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/url" title="">
      <text>foo </text>
      <text>*</text>
      <text>bar</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/uri&quot;&gt;foo *bar&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>These cases illustrate the precedence of HTML tags, code spans,</text>
    <softbreak />
    <text>and autolinks over link grouping:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>foo </text>
    <html><bar attr="][ref]"></html>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[foo &lt;bar attr=&quot;][ref]&quot;&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>foo</text>
    <code>][ref]</code>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[foo&lt;code&gt;][ref]&lt;/code&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>foo</text>
    <link destination="http://example.com/?search=%5D%5Bref%5D" title="">
      <text>http://example.com/?search=][ref]</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[foo&lt;a href=&quot;http://example.com/?search=%5D%5Bref%5D&quot;&gt;http://example.com/?search=][ref]&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Matching is case-insensitive:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/url" title="title">
      <text>foo</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Unicode case fold is used:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/url" title="">
      <text>Толпой</text>
    </link>
    <text> is a Russian word.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot;&gt;Толпой&lt;/a&gt; is a Russian word.&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Consecutive internal </text>
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text> is treated as one space for</text>
    <softbreak />
    <text>purposes of determining matching:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>Foo</text>
    <softbreak />
    <text>bar</text>
    <text>]</text>
    <text>: /url</text>
  </paragraph>
  <paragraph>
    <text>[</text>
    <text>Baz</text>
    <text>]</text>
    <text>[</text>
    <text>Foo bar</text>
    <text>]</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot;&gt;Baz&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>There can be </text>
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text> between the </text>
    <text>[</text>
    <text>link text</text>
    <text>]</text>
    <text> and the </text>
    <text>[</text>
    <text>link label</text>
    <text>]</text>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/url" title="title">
      <text>foo</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/url" title="title">
      <text>foo</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>When there are multiple matching </text>
    <text>[</text>
    <text>link reference definition</text>
    <text>]</text>
    <text>s,</text>
    <softbreak />
    <text>the first is used:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text>: /url1</text>
  </paragraph>
  <paragraph>
    <link destination="url" title="">
      <text>bar</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url1&quot;&gt;bar&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Note that matching is performed on normalized strings, not parsed</text>
    <softbreak />
    <text>inline content.  So the following does not match, even though the</text>
    <softbreak />
    <text>labels define equivalent inline content:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>bar</text>
    <text>]</text>
    <text>[</text>
    <text>foo</text>
    <text>!</text>
    <text>]</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[bar][foo!]&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>[</text>
    <text>Link label</text>
    <text>]</text>
    <text>s cannot contain brackets, unless they are</text>
    <softbreak />
    <text>backslash-escaped:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text>[</text>
    <text>ref</text>
    <text>[</text>
    <text>]</text>
  </paragraph>
  <paragraph>
    <text>[</text>
    <text>ref</text>
    <text>[</text>
    <text>]</text>
    <text>: /uri</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[foo][ref[]&lt;/p&gt;
&lt;p&gt;[ref[]: /uri&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text>[</text>
    <text>ref</text>
    <link destination="/url" title="title">
      <text>bar</text>
    </link>
    <text>]</text>
  </paragraph>
  <paragraph>
    <text>[</text>
    <text>ref</text>
    <link destination="/url" title="title">
      <text>bar</text>
    </link>
    <text>]</text>
    <text>: /uri</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[foo][ref[bar]]&lt;/p&gt;
&lt;p&gt;[ref[bar]]: /uri&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>[</text>
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text>]</text>
    <text>]</text>
  </paragraph>
  <paragraph>
    <text>[</text>
    <text>[</text>
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text>]</text>
    <text>]</text>
    <text>: /url</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[[[foo]]]&lt;/p&gt;
&lt;p&gt;[[[foo]]]: /url&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/uri" title="">
      <text>foo</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/uri&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>A </text>
    <text>[</text>
    <text>link label</text>
    <text>]</text>
    <text> must contain at least one </text>
    <text>[</text>
    <text>non-whitespace character</text>
    <text>]</text>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>]</text>
  </paragraph>
  <paragraph>
    <text>[</text>
    <text>]</text>
    <text>: /uri</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[]&lt;/p&gt;
&lt;p&gt;[]: /uri&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <softbreak />
    <text>]</text>
  </paragraph>
  <paragraph>
    <text>[</text>
    <softbreak />
    <text>]</text>
    <text>: /uri</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[
]&lt;/p&gt;
&lt;p&gt;[
]: /uri&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>A </text>
    <link destination="@collapsed-reference-link" title="">
      <text>collapsed reference link</text>
    </link>
    <softbreak />
    <text>consists of a </text>
    <text>[</text>
    <text>link label</text>
    <text>]</text>
    <text> that </text>
    <text>[</text>
    <text>matches</text>
    <text>]</text>
    <text> a</text>
    <softbreak />
    <text>[</text>
    <text>link reference definition</text>
    <text>]</text>
    <text> elsewhere in the</text>
    <softbreak />
    <text>document, optional </text>
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text>, and the string </text>
    <code>[]</code>
    <text>.</text>
    <softbreak />
    <text>The contents of the first link label are parsed as inlines,</text>
    <softbreak />
    <text>which are used as the link</text>
    <text>'</text>
    <text>s text.  The link</text>
    <text>'</text>
    <text>s URI and title are</text>
    <softbreak />
    <text>provided by the matching reference link definition.  Thus,</text>
    <softbreak />
    <code>[foo][]</code>
    <text> is equivalent to </text>
    <code>[foo][foo]</code>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/url" title="title">
      <emph>
        <text>foo</text>
      </emph>
      <text> bar</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;&lt;em&gt;foo&lt;/em&gt; bar&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>The link labels are case-insensitive:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>Foo</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;Foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>As with full reference links, </text>
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text> is allowed</text>
    <softbreak />
    <text>between the two sets of brackets:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>A </text>
    <link destination="@shortcut-reference-link" title="">
      <text>shortcut reference link</text>
    </link>
    <softbreak />
    <text>consists of a </text>
    <text>[</text>
    <text>link label</text>
    <text>]</text>
    <text> that </text>
    <text>[</text>
    <text>matches</text>
    <text>]</text>
    <text> a</text>
    <softbreak />
    <text>[</text>
    <text>link reference definition</text>
    <text>]</text>
    <text> elsewhere in the</text>
    <softbreak />
    <text>document and is not followed by </text>
    <code>[]</code>
    <text> or a link label.</text>
    <softbreak />
    <text>The contents of the first link label are parsed as inlines,</text>
    <softbreak />
    <text>which are used as the link</text>
    <text>'</text>
    <text>s text.  the link</text>
    <text>'</text>
    <text>s URI and title</text>
    <softbreak />
    <text>are provided by the matching link reference definition.</text>
    <softbreak />
    <text>Thus, </text>
    <code>[foo]</code>
    <text> is equivalent to </text>
    <code>[foo][]</code>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/url" title="title">
      <emph>
        <text>foo</text>
      </emph>
      <text> bar</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;&lt;em&gt;foo&lt;/em&gt; bar&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <link destination="/url" title="title">
      <emph>
        <text>foo</text>
      </emph>
      <text> bar</text>
    </link>
    <text>]</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;&lt;em&gt;foo&lt;/em&gt; bar&lt;/a&gt;]&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>[</text>
    <text>bar </text>
    <link destination="url" title="">
      <text>foo</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[[bar &lt;a href=&quot;/url&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>The link labels are case-insensitive:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>Foo</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;Foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>A space after the link text should be preserved:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text> bar</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url&quot;&gt;foo&lt;/a&gt; bar&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>If you just want bracketed text, you can backslash-escape the</text>
    <softbreak />
    <text>opening bracket to avoid links:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>foo</text>
    <text>]</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[foo]&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Note that this is a link, because a link label ends with the first</text>
    <softbreak />
    <text>following closing bracket:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>[</text>
    <text>foo</text>
    <text>*</text>
    <text>]</text>
    <text>: /url</text>
  </paragraph>
  <paragraph>
    <emph>
      <text>[</text>
      <text>foo</text>
    </emph>
    <text>]</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;*&lt;a href=&quot;/url&quot;&gt;foo*&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Full references take precedence over shortcut references:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/url" title="title">
      <text>foo</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url2&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>In the following case </text>
    <code>[bar][baz]</code>
    <text> is parsed as a reference,</text>
    <softbreak />
    <code>[foo]</code>
    <text> as normal text:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/url" title="title">
      <text>foo</text>
    </link>
    <link destination="/url" title="">
      <text>baz</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[foo]&lt;a href=&quot;/url&quot;&gt;bar&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Here, though, </text>
    <code>[foo][bar]</code>
    <text> is parsed as a reference, since</text>
    <softbreak />
    <code>[bar]</code>
    <text> is defined:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/url" title="title">
      <text>foo</text>
    </link>
    <link destination="/url" title="">
      <text>baz</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;/url2&quot;&gt;foo&lt;/a&gt;&lt;a href=&quot;/url1&quot;&gt;baz&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Here </text>
    <code>[foo]</code>
    <text> is not parsed as a shortcut reference, because it</text>
    <softbreak />
    <text>is followed by a link label (even though </text>
    <code>[bar]</code>
    <text> is not defined):</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="/url" title="title">
      <text>foo</text>
    </link>
    <link destination="/url" title="">
      <text>baz</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;[foo]&lt;a href=&quot;/url1&quot;&gt;bar&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <header level="2">
    <text>Images</text>
  </header>
  <paragraph>
    <text>Syntax for images is like the syntax for links, with one</text>
    <softbreak />
    <text>difference. Instead of </text>
    <text>[</text>
    <text>link text</text>
    <text>]</text>
    <text>, we have an</text>
    <softbreak />
    <link destination="@image-description" title="">
      <text>image description</text>
    </link>
    <text>.  The rules for this are the</text>
    <softbreak />
    <text>same as for </text>
    <text>[</text>
    <text>link text</text>
    <text>]</text>
    <text>, except that (a) an</text>
    <softbreak />
    <text>image description starts with </text>
    <code>![</code>
    <text> rather than </text>
    <code>[</code>
    <text>, and</text>
    <softbreak />
    <text>(b) an image description may contain links.</text>
    <softbreak />
    <text>An image description has inline elements</text>
    <softbreak />
    <text>as its contents.  When an image is rendered to HTML,</text>
    <softbreak />
    <text>this is standardly used as the image</text>
    <text>'</text>
    <text>s </text>
    <code>alt</code>
    <text> attribute.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <image destination="/url" title="title">
      <text>foo</text>
    </image>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;foo&quot; title=&quot;title&quot; /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <image destination="train.jpg" title="train & tracks">
      <text>foo </text>
      <emph>
        <text>bar</text>
      </emph>
    </image>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;img src=&quot;train.jpg&quot; alt=&quot;foo bar&quot; title=&quot;train &amp;amp; tracks&quot; /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <image destination="/url2" title="">
      <text>foo </text>
      <image destination="/url" title="">
        <text>bar</text>
      </image>
    </image>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;img src=&quot;/url2&quot; alt=&quot;foo bar&quot; /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <image destination="/url2" title="">
      <text>foo </text>
      <link destination="/url" title="">
        <text>bar</text>
      </link>
    </image>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;img src=&quot;/url2&quot; alt=&quot;foo bar&quot; /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Though this spec is concerned with parsing, not rendering, it is</text>
    <softbreak />
    <text>recommended that in rendering to HTML, only the plain string content</text>
    <softbreak />
    <text>of the </text>
    <text>[</text>
    <text>image description</text>
    <text>]</text>
    <text> be used.  Note that in</text>
    <softbreak />
    <text>the above example, the alt attribute</text>
    <text>'</text>
    <text>s value is </text>
    <code>foo bar</code>
    <text>, not </text>
    <code>foo [bar](/url)</code>
    <text> or </text>
    <code>foo &lt;a href=&quot;/url&quot;&gt;bar&lt;/a&gt;</code>
    <text>.  Only the plain string</text>
    <softbreak />
    <text>content is rendered, without formatting.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <image destination="train.jpg" title="train & tracks">
      <text>foo </text>
      <emph>
        <text>bar</text>
      </emph>
    </image>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;img src=&quot;train.jpg&quot; alt=&quot;foo bar&quot; title=&quot;train &amp;amp; tracks&quot; /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <image destination="train.jpg" title="train & tracks">
      <text>foo </text>
      <emph>
        <text>bar</text>
      </emph>
    </image>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;img src=&quot;train.jpg&quot; alt=&quot;foo bar&quot; title=&quot;train &amp;amp; tracks&quot; /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <image destination="train.jpg" title="">
      <text>foo</text>
    </image>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;img src=&quot;train.jpg&quot; alt=&quot;foo&quot; /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>My </text>
    <image destination="/path/to/train.jpg" title="title">
      <text>foo bar</text>
    </image>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;My &lt;img src=&quot;/path/to/train.jpg&quot; alt=&quot;foo bar&quot; title=&quot;title&quot; /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <image destination="url" title="">
      <text>foo</text>
    </image>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;img src=&quot;url&quot; alt=&quot;foo&quot; /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <image destination="/url" title="">
    </image>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Reference-style:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <image destination="/url" title="title">
      <text>foo</text>
    </image>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;foo&quot; /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <image destination="/url" title="title">
      <text>foo</text>
    </image>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;foo&quot; /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Collapsed:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <image destination="url" title="">
      <text>foo</text>
    </image>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;foo&quot; title=&quot;title&quot; /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <image destination="/url" title="title">
      <emph>
        <text>foo</text>
      </emph>
      <text> bar</text>
    </image>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;foo bar&quot; title=&quot;title&quot; /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>The labels are case-insensitive:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <image destination="url" title="">
      <text>Foo</text>
    </image>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;Foo&quot; title=&quot;title&quot; /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>As with full reference links, </text>
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text> is allowed</text>
    <softbreak />
    <text>between the two sets of brackets:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <image destination="url" title="">
      <text>foo</text>
    </image>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;foo&quot; title=&quot;title&quot; /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Shortcut:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <image destination="url" title="">
      <text>foo</text>
    </image>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;foo&quot; title=&quot;title&quot; /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <image destination="/url" title="title">
      <emph>
        <text>foo</text>
      </emph>
      <text> bar</text>
    </image>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;foo bar&quot; title=&quot;title&quot; /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Note that link labels cannot contain unescaped brackets:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>![</text>
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text>]</text>
  </paragraph>
  <paragraph>
    <text>[</text>
    <link destination="url" title="">
      <text>foo</text>
    </link>
    <text>]</text>
    <text>: /url </text>
    <text>&quot;</text>
    <text>title</text>
    <text>&quot;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;![[foo]]&lt;/p&gt;
&lt;p&gt;[[foo]]: /url &amp;quot;title&amp;quot;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>The link labels are case-insensitive:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <image destination="url" title="">
      <text>Foo</text>
    </image>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;img src=&quot;/url&quot; alt=&quot;Foo&quot; title=&quot;title&quot; /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>If you just want bracketed text, you can backslash-escape the</text>
    <softbreak />
    <text>opening </text>
    <code>!</code>
    <text> and </text>
    <code>[</code>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>!</text>
    <text>[</text>
    <text>foo</text>
    <text>]</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;![foo]&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>If you want a link after a literal </text>
    <code>!</code>
    <text>, backslash-escape the</text>
    <softbreak />
    <code>!</code>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>!</text>
    <link destination="url" title="">
      <text>foo</text>
    </link>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;!&lt;a href=&quot;/url&quot; title=&quot;title&quot;&gt;foo&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <header level="2">
    <text>Autolinks</text>
  </header>
  <paragraph>
    <link destination="@autolink" title="">
      <text>Autolink</text>
    </link>
    <text>s are absolute URIs and email addresses inside</text>
    <softbreak />
    <code>&lt;</code>
    <text> and </text>
    <code>&gt;</code>
    <text>. They are parsed as links, with the URL or email address</text>
    <softbreak />
    <text>as the link label.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@uri-autolink" title="">
      <text>URI autolink</text>
    </link>
    <text> consists of </text>
    <code>&lt;</code>
    <text>, followed by an</text>
    <softbreak />
    <text>[</text>
    <text>absolute URI</text>
    <text>]</text>
    <text> not containing </text>
    <code>&lt;</code>
    <text>, followed by </text>
    <code>&gt;</code>
    <text>.  It is parsed as</text>
    <softbreak />
    <text>a link to the URI, with the URI as the link</text>
    <text>'</text>
    <text>s label.</text>
  </paragraph>
  <paragraph>
    <text>An </text>
    <link destination="@absolute-uri" title="">
      <text>absolute URI</text>
    </link>
    <text>,</text>
    <softbreak />
    <text>for these purposes, consists of a </text>
    <text>[</text>
    <text>scheme</text>
    <text>]</text>
    <text> followed by a colon (</text>
    <code>:</code>
    <text>)</text>
    <softbreak />
    <text>followed by zero or more characters other than ASCII</text>
    <softbreak />
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text> and control characters, </text>
    <code>&lt;</code>
    <text>, and </text>
    <code>&gt;</code>
    <text>.  If</text>
    <softbreak />
    <text>the URI includes these characters, you must use percent-encoding</text>
    <softbreak />
    <text>(e.g. </text>
    <code>%20</code>
    <text> for a space).</text>
  </paragraph>
  <paragraph>
    <text>The following </text>
    <link destination="@scheme" title="">
      <text>schemes</text>
    </link>
    <softbreak />
    <text>are recognized (case-insensitive):</text>
    <softbreak />
    <code>coap</code>
    <text>, </text>
    <code>doi</code>
    <text>, </text>
    <code>javascript</code>
    <text>, </text>
    <code>aaa</code>
    <text>, </text>
    <code>aaas</code>
    <text>, </text>
    <code>about</code>
    <text>, </text>
    <code>acap</code>
    <text>, </text>
    <code>cap</code>
    <text>,</text>
    <softbreak />
    <code>cid</code>
    <text>, </text>
    <code>crid</code>
    <text>, </text>
    <code>data</code>
    <text>, </text>
    <code>dav</code>
    <text>, </text>
    <code>dict</code>
    <text>, </text>
    <code>dns</code>
    <text>, </text>
    <code>file</code>
    <text>, </text>
    <code>ftp</code>
    <text>, </text>
    <code>geo</code>
    <text>, </text>
    <code>go</code>
    <text>,</text>
    <softbreak />
    <code>gopher</code>
    <text>, </text>
    <code>h323</code>
    <text>, </text>
    <code>http</code>
    <text>, </text>
    <code>https</code>
    <text>, </text>
    <code>iax</code>
    <text>, </text>
    <code>icap</code>
    <text>, </text>
    <code>im</code>
    <text>, </text>
    <code>imap</code>
    <text>, </text>
    <code>info</code>
    <text>,</text>
    <softbreak />
    <code>ipp</code>
    <text>, </text>
    <code>iris</code>
    <text>, </text>
    <code>iris.beep</code>
    <text>, </text>
    <code>iris.xpc</code>
    <text>, </text>
    <code>iris.xpcs</code>
    <text>, </text>
    <code>iris.lwz</code>
    <text>, </text>
    <code>ldap</code>
    <text>,</text>
    <softbreak />
    <code>mailto</code>
    <text>, </text>
    <code>mid</code>
    <text>, </text>
    <code>msrp</code>
    <text>, </text>
    <code>msrps</code>
    <text>, </text>
    <code>mtqp</code>
    <text>, </text>
    <code>mupdate</code>
    <text>, </text>
    <code>news</code>
    <text>, </text>
    <code>nfs</code>
    <text>,</text>
    <softbreak />
    <code>ni</code>
    <text>, </text>
    <code>nih</code>
    <text>, </text>
    <code>nntp</code>
    <text>, </text>
    <code>opaquelocktoken</code>
    <text>, </text>
    <code>pop</code>
    <text>, </text>
    <code>pres</code>
    <text>, </text>
    <code>rtsp</code>
    <text>,</text>
    <softbreak />
    <code>service</code>
    <text>, </text>
    <code>session</code>
    <text>, </text>
    <code>shttp</code>
    <text>, </text>
    <code>sieve</code>
    <text>, </text>
    <code>sip</code>
    <text>, </text>
    <code>sips</code>
    <text>, </text>
    <code>sms</code>
    <text>, </text>
    <code>snmp</code>
    <text>,</text>
    <code>soap.beep</code>
    <text>, </text>
    <code>soap.beeps</code>
    <text>, </text>
    <code>tag</code>
    <text>, </text>
    <code>tel</code>
    <text>, </text>
    <code>telnet</code>
    <text>, </text>
    <code>tftp</code>
    <text>, </text>
    <code>thismessage</code>
    <text>,</text>
    <softbreak />
    <code>tn3270</code>
    <text>, </text>
    <code>tip</code>
    <text>, </text>
    <code>tv</code>
    <text>, </text>
    <code>urn</code>
    <text>, </text>
    <code>vemmi</code>
    <text>, </text>
    <code>ws</code>
    <text>, </text>
    <code>wss</code>
    <text>, </text>
    <code>xcon</code>
    <text>,</text>
    <softbreak />
    <code>xcon-userid</code>
    <text>, </text>
    <code>xmlrpc.beep</code>
    <text>, </text>
    <code>xmlrpc.beeps</code>
    <text>, </text>
    <code>xmpp</code>
    <text>, </text>
    <code>z39.50r</code>
    <text>,</text>
    <softbreak />
    <code>z39.50s</code>
    <text>, </text>
    <code>adiumxtra</code>
    <text>, </text>
    <code>afp</code>
    <text>, </text>
    <code>afs</code>
    <text>, </text>
    <code>aim</code>
    <text>, </text>
    <code>apt</code>
    <text>,</text>
    <code>attachment</code>
    <text>, </text>
    <code>aw</code>
    <text>,</text>
    <softbreak />
    <code>beshare</code>
    <text>, </text>
    <code>bitcoin</code>
    <text>, </text>
    <code>bolo</code>
    <text>, </text>
    <code>callto</code>
    <text>, </text>
    <code>chrome</code>
    <text>,</text>
    <code>chrome-extension</code>
    <text>,</text>
    <softbreak />
    <code>com-eventbrite-attendee</code>
    <text>, </text>
    <code>content</code>
    <text>, </text>
    <code>cvs</code>
    <text>,</text>
    <code>dlna-playsingle</code>
    <text>,</text>
    <softbreak />
    <code>dlna-playcontainer</code>
    <text>, </text>
    <code>dtn</code>
    <text>, </text>
    <code>dvb</code>
    <text>, </text>
    <code>ed2k</code>
    <text>, </text>
    <code>facetime</code>
    <text>, </text>
    <code>feed</code>
    <text>,</text>
    <softbreak />
    <code>finger</code>
    <text>, </text>
    <code>fish</code>
    <text>, </text>
    <code>gg</code>
    <text>, </text>
    <code>git</code>
    <text>, </text>
    <code>gizmoproject</code>
    <text>, </text>
    <code>gtalk</code>
    <text>, </text>
    <code>hcp</code>
    <text>, </text>
    <code>icon</code>
    <text>,</text>
    <softbreak />
    <code>ipn</code>
    <text>, </text>
    <code>irc</code>
    <text>, </text>
    <code>irc6</code>
    <text>, </text>
    <code>ircs</code>
    <text>, </text>
    <code>itms</code>
    <text>, </text>
    <code>jar</code>
    <text>, </text>
    <code>jms</code>
    <text>, </text>
    <code>keyparc</code>
    <text>, </text>
    <code>lastfm</code>
    <text>,</text>
    <softbreak />
    <code>ldaps</code>
    <text>, </text>
    <code>magnet</code>
    <text>, </text>
    <code>maps</code>
    <text>, </text>
    <code>market</code>
    <text>,</text>
    <code>message</code>
    <text>, </text>
    <code>mms</code>
    <text>, </text>
    <code>ms-help</code>
    <text>,</text>
    <softbreak />
    <code>msnim</code>
    <text>, </text>
    <code>mumble</code>
    <text>, </text>
    <code>mvn</code>
    <text>, </text>
    <code>notes</code>
    <text>, </text>
    <code>oid</code>
    <text>, </text>
    <code>palm</code>
    <text>, </text>
    <code>paparazzi</code>
    <text>,</text>
    <softbreak />
    <code>platform</code>
    <text>, </text>
    <code>proxy</code>
    <text>, </text>
    <code>psyc</code>
    <text>, </text>
    <code>query</code>
    <text>, </text>
    <code>res</code>
    <text>, </text>
    <code>resource</code>
    <text>, </text>
    <code>rmi</code>
    <text>, </text>
    <code>rsync</code>
    <text>,</text>
    <softbreak />
    <code>rtmp</code>
    <text>, </text>
    <code>secondlife</code>
    <text>, </text>
    <code>sftp</code>
    <text>, </text>
    <code>sgn</code>
    <text>, </text>
    <code>skype</code>
    <text>, </text>
    <code>smb</code>
    <text>, </text>
    <code>soldat</code>
    <text>,</text>
    <softbreak />
    <code>spotify</code>
    <text>, </text>
    <code>ssh</code>
    <text>, </text>
    <code>steam</code>
    <text>, </text>
    <code>svn</code>
    <text>, </text>
    <code>teamspeak</code>
    <text>, </text>
    <code>things</code>
    <text>, </text>
    <code>udp</code>
    <text>,</text>
    <softbreak />
    <code>unreal</code>
    <text>, </text>
    <code>ut2004</code>
    <text>, </text>
    <code>ventrilo</code>
    <text>, </text>
    <code>view-source</code>
    <text>, </text>
    <code>webcal</code>
    <text>, </text>
    <code>wtai</code>
    <text>,</text>
    <softbreak />
    <code>wyciwyg</code>
    <text>, </text>
    <code>xfire</code>
    <text>, </text>
    <code>xri</code>
    <text>, </text>
    <code>ymsgr</code>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Here are some valid autolinks:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="http://foo.bar.baz" title="">
      <text>http://foo.bar.baz</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;http://foo.bar.baz&quot;&gt;http://foo.bar.baz&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="http://foo.bar.baz/test?q=hello&id=22&boolean" title="">
      <text>http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;http://foo.bar.baz/test?q=hello&amp;amp;id=22&amp;amp;boolean&quot;&gt;http://foo.bar.baz/test?q=hello&amp;amp;id=22&amp;amp;boolean&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="irc://foo.bar:2233/baz" title="">
      <text>irc://foo.bar:2233/baz</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;irc://foo.bar:2233/baz&quot;&gt;irc://foo.bar:2233/baz&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Uppercase is also fine:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="MAILTO:FOO@BAR.BAZ" title="">
      <text>MAILTO:FOO@BAR.BAZ</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;MAILTO:FOO@BAR.BAZ&quot;&gt;MAILTO:FOO@BAR.BAZ&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Spaces are not allowed in autolinks:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>&lt;</text>
    <text>http://foo.bar/baz bim&gt;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&amp;lt;http://foo.bar/baz bim&amp;gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Backslash-escapes do not work inside autolinks:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="http://example.com/%5C%5B%5C" title="">
      <text>http://example.com/\[\</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;http://example.com/%5C%5B%5C&quot;&gt;http://example.com/\[\&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>An </text>
    <link destination="@email-autolink" title="">
      <text>email autolink</text>
    </link>
    <softbreak />
    <text>consists of </text>
    <code>&lt;</code>
    <text>, followed by an </text>
    <text>[</text>
    <text>email address</text>
    <text>]</text>
    <text>,</text>
    <softbreak />
    <text>followed by </text>
    <code>&gt;</code>
    <text>.  The link</text>
    <text>'</text>
    <text>s label is the email address,</text>
    <softbreak />
    <text>and the URL is </text>
    <code>mailto:</code>
    <text> followed by the email address.</text>
  </paragraph>
  <paragraph>
    <text>An </text>
    <link destination="@email-address" title="">
      <text>email address</text>
    </link>
    <text>,</text>
    <softbreak />
    <text>for these purposes, is anything that matches</text>
    <softbreak />
    <text>the </text>
    <link destination="https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email)" title="">
      <text>non-normative regex from the HTML5</text>
      <softbreak />
      <text>spec</text>
    </link>
    <text>:</text>
  </paragraph>
  <code_block>/^[a-zA-Z0-9.!#$%&amp;'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?
(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/
</code_block>
  <paragraph>
    <text>Examples of email autolinks:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="mailto:foo@bar.example.com" title="">
      <text>foo@bar.example.com</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;mailto:foo@bar.example.com&quot;&gt;foo@bar.example.com&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <link destination="mailto:foo+special@Bar.baz-bar0.com" title="">
      <text>foo+special@Bar.baz-bar0.com</text>
    </link>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;mailto:foo+special@Bar.baz-bar0.com&quot;&gt;foo+special@Bar.baz-bar0.com&lt;/a&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Backslash-escapes do not work inside email autolinks:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>&lt;</text>
    <text>foo</text>
    <text>+</text>
    <text>@bar.example.com&gt;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&amp;lt;foo+@bar.example.com&amp;gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>These are not autolinks:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>&lt;</text>
    <text>&gt;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&amp;lt;&amp;gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>&lt;</text>
    <text>heck://bing.bong&gt;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&amp;lt;heck://bing.bong&amp;gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>&lt;</text>
    <text> http://foo.bar &gt;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&amp;lt; http://foo.bar &amp;gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>&lt;</text>
    <text>foo.bar.baz&gt;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&amp;lt;foo.bar.baz&amp;gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>&lt;</text>
    <text>localhost:5001/foo&gt;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&amp;lt;localhost:5001/foo&amp;gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>http://example.com</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;http://example.com&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo@bar.example.com</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo@bar.example.com&lt;/p&gt;
.</html_block>
  <header level="2">
    <text>Raw HTML</text>
  </header>
  <paragraph>
    <text>Text between </text>
    <code>&lt;</code>
    <text> and </text>
    <code>&gt;</code>
    <text> that looks like an HTML tag is parsed as a</text>
    <softbreak />
    <text>raw HTML tag and will be rendered in HTML without escaping.</text>
    <softbreak />
    <text>Tag and attribute names are not limited to current HTML tags,</text>
    <softbreak />
    <text>so custom tags (and even, say, DocBook tags) may be used.</text>
  </paragraph>
  <paragraph>
    <text>Here is the grammar for tags:</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@tag-name" title="">
      <text>tag name</text>
    </link>
    <text> consists of an ASCII letter</text>
    <softbreak />
    <text>followed by zero or more ASCII letters, digits, or</text>
    <softbreak />
    <text>hyphens (</text>
    <code>-</code>
    <text>).</text>
  </paragraph>
  <paragraph>
    <text>An </text>
    <link destination="@attribute" title="">
      <text>attribute</text>
    </link>
    <text> consists of </text>
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text>,</text>
    <softbreak />
    <text>an </text>
    <text>[</text>
    <text>attribute name</text>
    <text>]</text>
    <text>, and an optional</text>
    <softbreak />
    <text>[</text>
    <text>attribute value specification</text>
    <text>]</text>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>An </text>
    <link destination="@attribute-name" title="">
      <text>attribute name</text>
    </link>
    <softbreak />
    <text>consists of an ASCII letter, </text>
    <code>_</code>
    <text>, or </text>
    <code>:</code>
    <text>, followed by zero or more ASCII</text>
    <softbreak />
    <text>letters, digits, </text>
    <code>_</code>
    <text>, </text>
    <code>.</code>
    <text>, </text>
    <code>:</code>
    <text>, or </text>
    <code>-</code>
    <text>.  (Note:  This is the XML</text>
    <softbreak />
    <text>specification restricted to ASCII.  HTML5 is laxer.)</text>
  </paragraph>
  <paragraph>
    <text>An </text>
    <link destination="@attribute-value-specification" title="">
      <text>attribute value specification</text>
    </link>
    <softbreak />
    <text>consists of optional </text>
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text>,</text>
    <softbreak />
    <text>a </text>
    <code>=</code>
    <text> character, optional </text>
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text>, and an </text>
    <text>[</text>
    <text>attribute</text>
    <softbreak />
    <text>value</text>
    <text>]</text>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>An </text>
    <link destination="@attribute-value" title="">
      <text>attribute value</text>
    </link>
    <softbreak />
    <text>consists of an </text>
    <text>[</text>
    <text>unquoted attribute value</text>
    <text>]</text>
    <text>,</text>
    <softbreak />
    <text>a </text>
    <text>[</text>
    <text>single-quoted attribute value</text>
    <text>]</text>
    <text>, or a </text>
    <text>[</text>
    <text>double-quoted attribute value</text>
    <text>]</text>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>An </text>
    <link destination="@unquoted-attribute-value" title="">
      <text>unquoted attribute value</text>
    </link>
    <softbreak />
    <text>is a nonempty string of characters not</text>
    <softbreak />
    <text>including spaces, </text>
    <code>&quot;</code>
    <text>, </text>
    <code>'</code>
    <text>, </text>
    <code>=</code>
    <text>, </text>
    <code>&lt;</code>
    <text>, </text>
    <code>&gt;</code>
    <text>, or </text>
    <code>`</code>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@single-quoted-attribute-value" title="">
      <text>single-quoted attribute value</text>
    </link>
    <softbreak />
    <text>consists of </text>
    <code>'</code>
    <text>, zero or more</text>
    <softbreak />
    <text>characters not including </text>
    <code>'</code>
    <text>, and a final </text>
    <code>'</code>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@double-quoted-attribute-value" title="">
      <text>double-quoted attribute value</text>
    </link>
    <softbreak />
    <text>consists of </text>
    <code>&quot;</code>
    <text>, zero or more</text>
    <softbreak />
    <text>characters not including </text>
    <code>&quot;</code>
    <text>, and a final </text>
    <code>&quot;</code>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>An </text>
    <link destination="@open-tag" title="">
      <text>open tag</text>
    </link>
    <text> consists of a </text>
    <code>&lt;</code>
    <text> character, a </text>
    <text>[</text>
    <text>tag name</text>
    <text>]</text>
    <text>,</text>
    <softbreak />
    <text>zero or more </text>
    <text>[</text>
    <text>attributes</text>
    <text>]</text>
    <text>(@attribute</text>
    <text>]</text>
    <text>, optional </text>
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text>, an optional </text>
    <code>/</code>
    <softbreak />
    <text>character, and a </text>
    <code>&gt;</code>
    <text> character.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@closing-tag" title="">
      <text>closing tag</text>
    </link>
    <text> consists of the string </text>
    <code>&lt;/</code>
    <text>, a</text>
    <softbreak />
    <text>[</text>
    <text>tag name</text>
    <text>]</text>
    <text>, optional </text>
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text>, and the character </text>
    <code>&gt;</code>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>An </text>
    <link destination="@html-comment" title="">
      <text>HTML comment</text>
    </link>
    <text> consists of </text>
    <code>&lt;!--</code>
    <text> + </text>
    <emph>
      <text>text</text>
    </emph>
    <text> + </text>
    <code>--&gt;</code>
    <text>,</text>
    <softbreak />
    <text>where </text>
    <emph>
      <text>text</text>
    </emph>
    <text> does not start with </text>
    <code>&gt;</code>
    <text> or </text>
    <code>-&gt;</code>
    <text>, does not end with </text>
    <code>-</code>
    <text>,</text>
    <softbreak />
    <text>and does not contain </text>
    <code>--</code>
    <text>.  (See the</text>
    <softbreak />
    <link destination="http://www.w3.org/TR/html5/syntax.html#comments" title="">
      <text>HTML5 spec</text>
    </link>
    <text>.)</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@processing-instruction" title="">
      <text>processing instruction</text>
    </link>
    <softbreak />
    <text>consists of the string </text>
    <code>&lt;?</code>
    <text>, a string</text>
    <softbreak />
    <text>of characters not including the string </text>
    <code>?&gt;</code>
    <text>, and the string</text>
    <softbreak />
    <code>?&gt;</code>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@declaration" title="">
      <text>declaration</text>
    </link>
    <text> consists of the</text>
    <softbreak />
    <text>string </text>
    <code>&lt;!</code>
    <text>, a name consisting of one or more uppercase ASCII letters,</text>
    <softbreak />
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text>, a string of characters not including the</text>
    <softbreak />
    <text>character </text>
    <code>&gt;</code>
    <text>, and the character </text>
    <code>&gt;</code>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>A </text>
    <link destination="@cdata-section" title="">
      <text>CDATA section</text>
    </link>
    <text> consists of</text>
    <softbreak />
    <text>the string </text>
    <code>&lt;![CDATA[</code>
    <text>, a string of characters not including the string</text>
    <softbreak />
    <code>]]&gt;</code>
    <text>, and the string </text>
    <code>]]&gt;</code>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>An </text>
    <link destination="@html-tag" title="">
      <text>HTML tag</text>
    </link>
    <text> consists of an </text>
    <text>[</text>
    <text>open tag</text>
    <text>]</text>
    <text>, a </text>
    <text>[</text>
    <text>closing tag</text>
    <text>]</text>
    <text>,</text>
    <softbreak />
    <text>an </text>
    <text>[</text>
    <text>HTML comment</text>
    <text>]</text>
    <text>, a </text>
    <text>[</text>
    <text>processing instruction</text>
    <text>]</text>
    <text>, a </text>
    <text>[</text>
    <text>declaration</text>
    <text>]</text>
    <text>,</text>
    <softbreak />
    <text>or a </text>
    <text>[</text>
    <text>CDATA section</text>
    <text>]</text>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Here are some simple open tags:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><a></html>
    <html><bab></html>
    <html><c2c></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a&gt;&lt;bab&gt;&lt;c2c&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Empty elements:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><a/></html>
    <html><b2/></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a/&gt;&lt;b2/&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>[</text>
    <text>Whitespace</text>
    <text>]</text>
    <text> is allowed:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><a  /></html>
    <html><b2
data="foo" ></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a  /&gt;&lt;b2
data=&quot;foo&quot; &gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>With attributes:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><a foo="bar" bam = 'baz <em>"</em>'
_boolean zoop:33=zoop:33 /></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a foo=&quot;bar&quot; bam = 'baz &lt;em&gt;&quot;&lt;/em&gt;'
_boolean zoop:33=zoop:33 /&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Custom tag names can be used:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><responsive-image src="foo.jpg" /></html>
  </paragraph>
  <html_block>&lt;My-Tag&gt;
foo
&lt;/My-Tag&gt;
.
&lt;responsive-image src=&quot;foo.jpg&quot; /&gt;
&lt;My-Tag&gt;
foo
&lt;/My-Tag&gt;
.</html_block>
  <paragraph>
    <text>Illegal tag names, not parsed as HTML:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>&lt;</text>
    <text>33&gt; </text>
    <text>&lt;</text>
    <text>__</text>
    <text>&gt;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&amp;lt;33&amp;gt; &amp;lt;__&amp;gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Illegal attribute names:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>&lt;</text>
    <text>a h</text>
    <text>*</text>
    <text>#ref=</text>
    <text>&quot;</text>
    <text>hi</text>
    <text>&quot;</text>
    <text>&gt;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&amp;lt;a h*#ref=&amp;quot;hi&amp;quot;&amp;gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Illegal attribute values:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>&lt;</text>
    <text>a href=</text>
    <text>&quot;</text>
    <text>hi</text>
    <text>'</text>
    <text>&gt; </text>
    <text>&lt;</text>
    <text>a href=hi</text>
    <text>'</text>
    <text>&gt;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&amp;lt;a href=&amp;quot;hi'&amp;gt; &amp;lt;a href=hi'&amp;gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Illegal </text>
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>&lt;</text>
    <text> a&gt;</text>
    <text>&lt;</text>
    <softbreak />
    <text>foo&gt;</text>
    <text>&lt;</text>
    <text>bar/ &gt;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&amp;lt; a&amp;gt;&amp;lt;
foo&amp;gt;&amp;lt;bar/ &amp;gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Missing </text>
    <text>[</text>
    <text>whitespace</text>
    <text>]</text>
    <text>:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>&lt;</text>
    <text>a href=</text>
    <text>'</text>
    <text>bar</text>
    <text>'</text>
    <text>title=title&gt;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&amp;lt;a href='bar'title=title&amp;gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Closing tags:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html></a></html>
    <softbreak />
    <html></foo ></html>
    <softbreak />
    <text>.</text>
    <softbreak />
    <html></a></html>
    <softbreak />
    <html></foo ></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Illegal attributes in closing tag:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>&lt;</text>
    <text>/a href=</text>
    <text>&quot;</text>
    <text>foo</text>
    <text>&quot;</text>
    <text>&gt;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&amp;lt;/a href=&amp;quot;foo&amp;quot;&amp;gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Comments:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo </text>
    <html><!-- this is a
comment - with hyphen --></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo &lt;!-- this is a
comment - with hyphen --&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo </text>
    <text>&lt;</text>
    <text>!</text>
    <text>-- not a comment -- two hyphens --&gt;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo &amp;lt;!-- not a comment -- two hyphens --&amp;gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Not comments:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo </text>
    <text>&lt;</text>
    <text>!</text>
    <text>--&gt; foo --&gt;</text>
  </paragraph>
  <paragraph>
    <text>foo </text>
    <text>&lt;</text>
    <text>!</text>
    <text>-- foo---&gt;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo &amp;lt;!--&amp;gt; foo --&amp;gt;&lt;/p&gt;
&lt;p&gt;foo &amp;lt;!-- foo---&amp;gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Processing instructions:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo </text>
    <html><?php echo $a; ?></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo &lt;?php echo $a; ?&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Declarations:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo </text>
    <html><!ELEMENT br EMPTY></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo &lt;!ELEMENT br EMPTY&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>CDATA sections:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo </text>
    <html><![CDATA[>&<]]></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo &lt;![CDATA[&gt;&amp;&lt;]]&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Entities are preserved in HTML attributes:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><a href="&ouml;"></html>
    <softbreak />
    <text>.</text>
    <softbreak />
    <html><a href="&ouml;"></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Backslash escapes do not work in HTML attributes:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><a href="\*"></html>
    <softbreak />
    <text>.</text>
    <softbreak />
    <html><a href="\*"></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>&lt;</text>
    <text>a href=</text>
    <text>&quot;</text>
    <text>&quot;</text>
    <text>&quot;</text>
    <text>&gt;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&amp;lt;a href=&amp;quot;&amp;quot;&amp;quot;&amp;gt;&lt;/p&gt;
.</html_block>
  <header level="2">
    <text>Hard line breaks</text>
  </header>
  <paragraph>
    <text>A line break (not in a code span or HTML tag) that is preceded</text>
    <softbreak />
    <text>by two or more spaces and does not occur at the end of a block</text>
    <softbreak />
    <text>is parsed as a </text>
    <link destination="@hard-line-break" title="">
      <text>hard line break</text>
    </link>
    <text> (rendered</text>
    <softbreak />
    <text>in HTML as a </text>
    <code>&lt;br /&gt;</code>
    <text> tag):</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
    <hardbreak />
    <text>baz</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo&lt;br /&gt;
baz&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>For a more visible alternative, a backslash before the</text>
    <softbreak />
    <text>[</text>
    <text>line ending</text>
    <text>]</text>
    <text> may be used instead of two spaces:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
    <hardbreak />
    <text>baz</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo&lt;br /&gt;
baz&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>More than two spaces can be used:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
    <hardbreak />
    <text>baz</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo&lt;br /&gt;
baz&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Leading spaces at the beginning of the next line are ignored:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
    <hardbreak />
    <text>bar</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo&lt;br /&gt;
bar&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
    <hardbreak />
    <text>bar</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo&lt;br /&gt;
bar&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Line breaks can occur inside emphasis, links, and other constructs</text>
    <softbreak />
    <text>that allow inline content:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo</text>
      <hardbreak />
      <text>bar</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo&lt;br /&gt;
bar&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <emph>
      <text>foo</text>
      <hardbreak />
      <text>bar</text>
    </emph>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;em&gt;foo&lt;br /&gt;
bar&lt;/em&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Line breaks do not occur inside code spans</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <code>code span</code>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;code&gt;code span&lt;/code&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <code>code\ span</code>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;code&gt;code\ span&lt;/code&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>or HTML tags:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><a href="foo  
bar"></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;foo  
bar&quot;&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><a href="foo\
bar"></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;&lt;a href=&quot;foo\
bar&quot;&gt;&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Hard line breaks are for separating inline content within a block.</text>
    <softbreak />
    <text>Neither syntax for hard line breaks works at the end of a paragraph or</text>
    <softbreak />
    <text>other block element:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
    <hardbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo\&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
    <hardbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
  </paragraph>
  <header level="3">
    <text>foo</text>
    <text>\</text>
  </header>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><h3></html>
    <text>foo</text>
    <text>&lt;</text>
    <text>/h3&gt;</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
  </paragraph>
  <header level="3">
    <text>foo</text>
  </header>
  <paragraph>
    <text>.</text>
    <softbreak />
    <html><h3></html>
    <text>foo</text>
    <html></h3></html>
    <softbreak />
    <text>.</text>
  </paragraph>
  <header level="2">
    <text>Soft line breaks</text>
  </header>
  <paragraph>
    <text>A regular line break (not in a code span or HTML tag) that is not</text>
    <softbreak />
    <text>preceded by two or more spaces or a backslash is parsed as a</text>
    <softbreak />
    <text>softbreak.  (A softbreak may be rendered in HTML either as a</text>
    <softbreak />
    <text>[</text>
    <text>line ending</text>
    <text>]</text>
    <text> or as a space. The result will be the same in</text>
    <softbreak />
    <text>browsers. In the examples here, a </text>
    <text>[</text>
    <text>line ending</text>
    <text>]</text>
    <text> will be used.)</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
    <softbreak />
    <text>baz</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo
baz&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Spaces at the end of the line and beginning of the next line are</text>
    <softbreak />
    <text>removed:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>foo</text>
    <softbreak />
    <text>baz</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;foo
baz&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>A conforming parser may render a soft line break in HTML either as a</text>
    <softbreak />
    <text>line break or as a space.</text>
  </paragraph>
  <paragraph>
    <text>A renderer may also provide an option to render soft line breaks</text>
    <softbreak />
    <text>as hard line breaks.</text>
  </paragraph>
  <header level="2">
    <text>Textual content</text>
  </header>
  <paragraph>
    <text>Any characters not given an interpretation by the above rules will</text>
    <softbreak />
    <text>be parsed as plain textual content.</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>hello $.;</text>
    <text>'</text>
    <text>there</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;hello $.;'there&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Foo χρῆν</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;Foo χρῆν&lt;/p&gt;
.</html_block>
  <paragraph>
    <text>Internal spaces are preserved verbatim:</text>
  </paragraph>
  <paragraph>
    <text>.</text>
    <softbreak />
    <text>Multiple     spaces</text>
    <softbreak />
    <text>.</text>
  </paragraph>
  <html_block>&lt;p&gt;Multiple     spaces&lt;/p&gt;
.</html_block>
  <html_block>&lt;!-- END TESTS --&gt;</html_block>
  <header level="1">
    <text>Appendix: A parsing strategy {-}</text>
  </header>
  <paragraph>
    <text>In this appendix we describe some features of the parsing strategy</text>
    <softbreak />
    <text>used in the CommonMark reference implementations.</text>
  </paragraph>
  <header level="2">
    <text>Overview {-}</text>
  </header>
  <paragraph>
    <text>Parsing has two phases:</text>
  </paragraph>
  <list type="ordered" start="1" tight="false" delimiter="period">
    <item>
      <paragraph>
        <text>In the first phase, lines of input are consumed and the block</text>
        <softbreak />
        <text>structure of the document---its division into paragraphs, block quotes,</text>
        <softbreak />
        <text>list items, and so on---is constructed.  Text is assigned to these</text>
        <softbreak />
        <text>blocks but not parsed. Link reference definitions are parsed and a</text>
        <softbreak />
        <text>map of links is constructed.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>In the second phase, the raw text contents of paragraphs and headers</text>
        <softbreak />
        <text>are parsed into sequences of Markdown inline elements (strings,</text>
        <softbreak />
        <text>code spans, links, emphasis, and so on), using the map of link</text>
        <softbreak />
        <text>references constructed in phase 1.</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>At each point in processing, the document is represented as a tree of</text>
    <softbreak />
    <strong>
      <text>blocks</text>
    </strong>
    <text>.  The root of the tree is a </text>
    <code>document</code>
    <text> block.  The </text>
    <code>document</code>
    <softbreak />
    <text>may have any number of other blocks as </text>
    <strong>
      <text>children</text>
    </strong>
    <text>.  These children</text>
    <softbreak />
    <text>may, in turn, have other blocks as children.  The last child of a block</text>
    <softbreak />
    <text>is normally considered </text>
    <strong>
      <text>open</text>
    </strong>
    <text>, meaning that subsequent lines of input</text>
    <softbreak />
    <text>can alter its contents.  (Blocks that are not open are </text>
    <strong>
      <text>closed</text>
    </strong>
    <text>.)</text>
    <softbreak />
    <text>Here, for example, is a possible document tree, with the open blocks</text>
    <softbreak />
    <text>marked by arrows:</text>
  </paragraph>
  <code_block info="tree">-&gt; document
  -&gt; block_quote
       paragraph
         &quot;Lorem ipsum dolor\nsit amet.&quot;
    -&gt; list (type=bullet tight=true bullet_char=-)
         list_item
           paragraph
             &quot;Qui *quodsi iracundia*&quot;
      -&gt; list_item
        -&gt; paragraph
             &quot;aliquando id&quot;
</code_block>
  <header level="2">
    <text>Phase 1: block structure {-}</text>
  </header>
  <paragraph>
    <text>Each line that is processed has an effect on this tree.  The line is</text>
    <softbreak />
    <text>analyzed and, depending on its contents, the document may be altered</text>
    <softbreak />
    <text>in one or more of the following ways:</text>
  </paragraph>
  <list type="ordered" start="1" tight="true" delimiter="period">
    <item>
      <paragraph>
        <text>One or more open blocks may be closed.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>One or more new blocks may be created as children of the</text>
        <softbreak />
        <text>last open block.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>Text may be added to the last (deepest) open block remaining</text>
        <softbreak />
        <text>on the tree.</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>Once a line has been incorporated into the tree in this way,</text>
    <softbreak />
    <text>it can be discarded, so input can be read in a stream.</text>
  </paragraph>
  <paragraph>
    <text>For each line, we follow this procedure:</text>
  </paragraph>
  <list type="ordered" start="1" tight="false" delimiter="period">
    <item>
      <paragraph>
        <text>First we iterate through the open blocks, starting with the</text>
        <softbreak />
        <text>root document, and descending through last children down to the last</text>
        <softbreak />
        <text>open block.  Each block imposes a condition that the line must satisfy</text>
        <softbreak />
        <text>if the block is to remain open.  For example, a block quote requires a</text>
        <softbreak />
        <code>&gt;</code>
        <text> character.  A paragraph requires a non-blank line.</text>
        <softbreak />
        <text>In this phase we may match all or just some of the open</text>
        <softbreak />
        <text>blocks.  But we cannot close unmatched blocks yet, because we may have a</text>
        <softbreak />
        <text>[</text>
        <text>lazy continuation line</text>
        <text>]</text>
        <text>.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>Next, after consuming the continuation markers for existing</text>
        <softbreak />
        <text>blocks, we look for new block starts (e.g. </text>
        <code>&gt;</code>
        <text> for a block quote.</text>
        <softbreak />
        <text>If we encounter a new block start, we close any blocks unmatched</text>
        <softbreak />
        <text>in step 1 before creating the new block as a child of the last</text>
        <softbreak />
        <text>matched block.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>Finally, we look at the remainder of the line (after block</text>
        <softbreak />
        <text>markers like </text>
        <code>&gt;</code>
        <text>, list markers, and indentation have been consumed).</text>
        <softbreak />
        <text>This is text that can be incorporated into the last open</text>
        <softbreak />
        <text>block (a paragraph, code block, header, or raw HTML).</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>Setext headers are formed when we detect that the second line of</text>
    <softbreak />
    <text>a paragraph is a setext header line.</text>
  </paragraph>
  <paragraph>
    <text>Reference link definitions are detected when a paragraph is closed;</text>
    <softbreak />
    <text>the accumulated text lines are parsed to see if they begin with</text>
    <softbreak />
    <text>one or more reference link definitions.  Any remainder becomes a</text>
    <softbreak />
    <text>normal paragraph.</text>
  </paragraph>
  <paragraph>
    <text>We can see how this works by considering how the tree above is</text>
    <softbreak />
    <text>generated by four lines of Markdown:</text>
  </paragraph>
  <code_block info="markdown">&gt; Lorem ipsum dolor
sit amet.
&gt; - Qui *quodsi iracundia*
&gt; - aliquando id
</code_block>
  <paragraph>
    <text>At the outset, our document model is just</text>
  </paragraph>
  <code_block info="tree">-&gt; document
</code_block>
  <paragraph>
    <text>The first line of our text,</text>
  </paragraph>
  <code_block info="markdown">&gt; Lorem ipsum dolor
</code_block>
  <paragraph>
    <text>causes a </text>
    <code>block_quote</code>
    <text> block to be created as a child of our</text>
    <softbreak />
    <text>open </text>
    <code>document</code>
    <text> block, and a </text>
    <code>paragraph</code>
    <text> block as a child of</text>
    <softbreak />
    <text>the </text>
    <code>block_quote</code>
    <text>.  Then the text is added to the last open</text>
    <softbreak />
    <text>block, the </text>
    <code>paragraph</code>
    <text>:</text>
  </paragraph>
  <code_block info="tree">-&gt; document
  -&gt; block_quote
    -&gt; paragraph
         &quot;Lorem ipsum dolor&quot;
</code_block>
  <paragraph>
    <text>The next line,</text>
  </paragraph>
  <code_block info="markdown">sit amet.
</code_block>
  <paragraph>
    <text>is a </text>
    <text>&quot;</text>
    <text>lazy continuation</text>
    <text>&quot;</text>
    <text> of the open </text>
    <code>paragraph</code>
    <text>, so it gets added</text>
    <softbreak />
    <text>to the paragraph</text>
    <text>'</text>
    <text>s text:</text>
  </paragraph>
  <code_block info="tree">-&gt; document
  -&gt; block_quote
    -&gt; paragraph
         &quot;Lorem ipsum dolor\nsit amet.&quot;
</code_block>
  <paragraph>
    <text>The third line,</text>
  </paragraph>
  <code_block info="markdown">&gt; - Qui *quodsi iracundia*
</code_block>
  <paragraph>
    <text>causes the </text>
    <code>paragraph</code>
    <text> block to be closed, and a new </text>
    <code>list</code>
    <text> block</text>
    <softbreak />
    <text>opened as a child of the </text>
    <code>block_quote</code>
    <text>.  A </text>
    <code>list_item</code>
    <text> is also</text>
    <softbreak />
    <text>added as a child of the </text>
    <code>list</code>
    <text>, and a </text>
    <code>paragraph</code>
    <text> as a child of</text>
    <softbreak />
    <text>the </text>
    <code>list_item</code>
    <text>.  The text is then added to the new </text>
    <code>paragraph</code>
    <text>:</text>
  </paragraph>
  <code_block info="tree">-&gt; document
  -&gt; block_quote
       paragraph
         &quot;Lorem ipsum dolor\nsit amet.&quot;
    -&gt; list (type=bullet tight=true bullet_char=-)
      -&gt; list_item
        -&gt; paragraph
             &quot;Qui *quodsi iracundia*&quot;
</code_block>
  <paragraph>
    <text>The fourth line,</text>
  </paragraph>
  <code_block info="markdown">&gt; - aliquando id
</code_block>
  <paragraph>
    <text>causes the </text>
    <code>list_item</code>
    <text> (and its child the </text>
    <code>paragraph</code>
    <text>) to be closed,</text>
    <softbreak />
    <text>and a new </text>
    <code>list_item</code>
    <text> opened up as child of the </text>
    <code>list</code>
    <text>.  A </text>
    <code>paragraph</code>
    <softbreak />
    <text>is added as a child of the new </text>
    <code>list_item</code>
    <text>, to contain the text.</text>
    <softbreak />
    <text>We thus obtain the final tree:</text>
  </paragraph>
  <code_block info="tree">-&gt; document
  -&gt; block_quote
       paragraph
         &quot;Lorem ipsum dolor\nsit amet.&quot;
    -&gt; list (type=bullet tight=true bullet_char=-)
         list_item
           paragraph
             &quot;Qui *quodsi iracundia*&quot;
      -&gt; list_item
        -&gt; paragraph
             &quot;aliquando id&quot;
</code_block>
  <header level="2">
    <text>Phase 2: inline structure {-}</text>
  </header>
  <paragraph>
    <text>Once all of the input has been parsed, all open blocks are closed.</text>
  </paragraph>
  <paragraph>
    <text>We then </text>
    <text>&quot;</text>
    <text>walk the tree,</text>
    <text>&quot;</text>
    <text> visiting every node, and parse raw</text>
    <softbreak />
    <text>string contents of paragraphs and headers as inlines.  At this</text>
    <softbreak />
    <text>point we have seen all the link reference definitions, so we can</text>
    <softbreak />
    <text>resolve reference links as we go.</text>
  </paragraph>
  <code_block info="tree">document
  block_quote
    paragraph
      str &quot;Lorem ipsum dolor&quot;
      softbreak
      str &quot;sit amet.&quot;
    list (type=bullet tight=true bullet_char=-)
      list_item
        paragraph
          str &quot;Qui &quot;
          emph
            str &quot;quodsi iracundia&quot;
      list_item
        paragraph
          str &quot;aliquando id&quot;
</code_block>
  <paragraph>
    <text>Notice how the </text>
    <text>[</text>
    <text>line ending</text>
    <text>]</text>
    <text> in the first paragraph has</text>
    <softbreak />
    <text>been parsed as a </text>
    <code>softbreak</code>
    <text>, and the asterisks in the first list item</text>
    <softbreak />
    <text>have become an </text>
    <code>emph</code>
    <text>.</text>
  </paragraph>
  <header level="3">
    <text>An algorithm for parsing nested emphasis and links {-}</text>
  </header>
  <paragraph>
    <text>By far the trickiest part of inline parsing is handling emphasis,</text>
    <softbreak />
    <text>strong emphasis, links, and images.  This is done using the following</text>
    <softbreak />
    <text>algorithm.</text>
  </paragraph>
  <paragraph>
    <text>When we</text>
    <text>'</text>
    <text>re parsing inlines and we hit either</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>a run of </text>
        <code>*</code>
        <text> or </text>
        <code>_</code>
        <text> characters, or</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>a </text>
        <code>[</code>
        <text> or </text>
        <code>![</code>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>we insert a text node with these symbols as its literal content, and we</text>
    <softbreak />
    <text>add a pointer to this text node to the </text>
    <link destination="@delimiter-stack" title="">
      <text>delimiter stack</text>
    </link>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>The </text>
    <text>[</text>
    <text>delimiter stack</text>
    <text>]</text>
    <text> is a doubly linked list.  Each</text>
    <softbreak />
    <text>element contains a pointer to a text node, plus information about</text>
  </paragraph>
  <list type="bullet" tight="true">
    <item>
      <paragraph>
        <text>the type of delimiter (</text>
        <code>[</code>
        <text>, </text>
        <code>![</code>
        <text>, </text>
        <code>*</code>
        <text>, </text>
        <code>_</code>
        <text>)</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>the number of delimiters,</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>whether the delimiter is </text>
        <text>&quot;</text>
        <text>active</text>
        <text>&quot;</text>
        <text> (all are active to start), and</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>whether the delimiter is a potential opener, a potential closer,</text>
        <softbreak />
        <text>or both (which depends on what sort of characters precede</text>
        <softbreak />
        <text>and follow the delimiters).</text>
      </paragraph>
    </item>
  </list>
  <paragraph>
    <text>When we hit a </text>
    <code>]</code>
    <text> character, we call the </text>
    <emph>
      <text>look for link or image</text>
    </emph>
    <softbreak />
    <text>procedure (see below).</text>
  </paragraph>
  <paragraph>
    <text>When we hit the end of the input, we call the </text>
    <emph>
      <text>process emphasis</text>
    </emph>
    <softbreak />
    <text>procedure (see below), with </text>
    <code>stack_bottom</code>
    <text> = NULL.</text>
  </paragraph>
  <header level="4">
    <emph>
      <text>look for link or image</text>
    </emph>
    <text> {-}</text>
  </header>
  <paragraph>
    <text>Starting at the top of the delimiter stack, we look backwards</text>
    <softbreak />
    <text>through the stack for an opening </text>
    <code>[</code>
    <text> or </text>
    <code>![</code>
    <text> delimiter.</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <paragraph>
        <text>If we don</text>
        <text>'</text>
        <text>t find one, we return a literal text node </text>
        <code>]</code>
        <text>.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>If we do find one, but it</text>
        <text>'</text>
        <text>s not </text>
        <emph>
          <text>active</text>
        </emph>
        <text>, we remove the inactive</text>
        <softbreak />
        <text>delimiter from the stack, and return a literal text node </text>
        <code>]</code>
        <text>.</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>If we find one and it</text>
        <text>'</text>
        <text>s active, then we parse ahead to see if</text>
        <softbreak />
        <text>we have an inline link/image, reference link/image, compact reference</text>
        <softbreak />
        <text>link/image, or shortcut reference link/image.</text>
      </paragraph>
      <list type="bullet" tight="false">
        <item>
          <paragraph>
            <text>If we don</text>
            <text>'</text>
            <text>t, then we remove the opening delimiter from the</text>
            <softbreak />
            <text>delimiter stack and return a literal text node </text>
            <code>]</code>
            <text>.</text>
          </paragraph>
        </item>
        <item>
          <paragraph>
            <text>If we do, then</text>
          </paragraph>
          <list type="bullet" tight="false">
            <item>
              <paragraph>
                <text>We return a link or image node whose children are the inlines</text>
                <softbreak />
                <text>after the text node pointed to by the opening delimiter.</text>
              </paragraph>
            </item>
            <item>
              <paragraph>
                <text>We run </text>
                <emph>
                  <text>process emphasis</text>
                </emph>
                <text> on these inlines, with the </text>
                <code>[</code>
                <text> opener</text>
                <softbreak />
                <text>as </text>
                <code>stack_bottom</code>
                <text>.</text>
              </paragraph>
            </item>
            <item>
              <paragraph>
                <text>We remove the opening delimiter.</text>
              </paragraph>
            </item>
            <item>
              <paragraph>
                <text>If we have a link (and not an image), we also set all</text>
                <softbreak />
                <code>[</code>
                <text> delimiters before the opening delimiter to </text>
                <emph>
                  <text>inactive</text>
                </emph>
                <text>.  (This</text>
                <softbreak />
                <text>will prevent us from getting links within links.)</text>
              </paragraph>
            </item>
          </list>
        </item>
      </list>
    </item>
  </list>
  <header level="4">
    <emph>
      <text>process emphasis</text>
    </emph>
    <text> {-}</text>
  </header>
  <paragraph>
    <text>Parameter </text>
    <code>stack_bottom</code>
    <text> sets a lower bound to how far we</text>
    <softbreak />
    <text>descend in the </text>
    <text>[</text>
    <text>delimiter stack</text>
    <text>]</text>
    <text>.  If it is NULL, we can</text>
    <softbreak />
    <text>go all the way to the bottom.  Otherwise, we stop before</text>
    <softbreak />
    <text>visiting </text>
    <code>stack_bottom</code>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Let </text>
    <code>current_position</code>
    <text> point to the element on the </text>
    <text>[</text>
    <text>delimiter stack</text>
    <text>]</text>
    <softbreak />
    <text>just above </text>
    <code>stack_bottom</code>
    <text> (or the first element if </text>
    <code>stack_bottom</code>
    <softbreak />
    <text>is NULL).</text>
  </paragraph>
  <paragraph>
    <text>We keep track of the </text>
    <code>openers_bottom</code>
    <text> for each delimiter</text>
    <softbreak />
    <text>type (</text>
    <code>*</code>
    <text>, </text>
    <code>_</code>
    <text>).  Initialize this to </text>
    <code>stack_bottom</code>
    <text>.</text>
  </paragraph>
  <paragraph>
    <text>Then we repeat the following until we run out of potential</text>
    <softbreak />
    <text>closers:</text>
  </paragraph>
  <list type="bullet" tight="false">
    <item>
      <paragraph>
        <text>Move </text>
        <code>current_position</code>
        <text> forward in the delimiter stack (if needed)</text>
        <softbreak />
        <text>until we find the first potential closer with delimiter </text>
        <code>*</code>
        <text> or </text>
        <code>_</code>
        <text>.</text>
        <softbreak />
        <text>(This will be the potential closer closest</text>
        <softbreak />
        <text>to the beginning of the input -- the first one in parse order.)</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>Now, look back in the stack (staying above </text>
        <code>stack_bottom</code>
        <text> and</text>
        <softbreak />
        <text>the </text>
        <code>openers_bottom</code>
        <text> for this delimiter type) for the</text>
        <softbreak />
        <text>first matching potential opener (</text>
        <text>&quot;</text>
        <text>matching</text>
        <text>&quot;</text>
        <text> means same delimiter).</text>
      </paragraph>
    </item>
    <item>
      <paragraph>
        <text>If one is found:</text>
      </paragraph>
      <list type="bullet" tight="false">
        <item>
          <paragraph>
            <text>Figure out whether we have emphasis or strong emphasis:</text>
            <softbreak />
            <text>if both closer and opener spans have length &gt;= 2, we have</text>
            <softbreak />
            <text>strong, otherwise regular.</text>
          </paragraph>
        </item>
        <item>
          <paragraph>
            <text>Insert an emph or strong emph node accordingly, after</text>
            <softbreak />
            <text>the text node corresponding to the opener.</text>
          </paragraph>
        </item>
        <item>
          <paragraph>
            <text>Remove any delimiters between the opener and closer from</text>
            <softbreak />
            <text>the delimiter stack.</text>
          </paragraph>
        </item>
        <item>
          <paragraph>
            <text>Remove 1 (for regular emph) or 2 (for strong emph) delimiters</text>
            <softbreak />
            <text>from the opening and closing text nodes.  If they become empty</text>
            <softbreak />
            <text>as a result, remove them and remove the corresponding element</text>
            <softbreak />
            <text>of the delimiter stack.  If the closing node is removed, reset</text>
            <softbreak />
            <code>current_position</code>
            <text> to the next element in the stack.</text>
          </paragraph>
        </item>
      </list>
    </item>
    <item>
      <paragraph>
        <text>If none in found:</text>
      </paragraph>
      <list type="bullet" tight="false">
        <item>
          <paragraph>
            <text>Set </text>
            <code>openers_bottom</code>
            <text> to the element before </text>
            <code>current_position</code>
            <text>.</text>
            <softbreak />
            <text>(We know that there are no openers for this kind of closer up to and</text>
            <softbreak />
            <text>including this point, so this puts a lower bound on future searches.)</text>
          </paragraph>
        </item>
        <item>
          <paragraph>
            <text>If the closer at </text>
            <code>current_position</code>
            <text> is not a potential opener,</text>
            <softbreak />
            <text>remove it from the delimiter stack (since we know it can</text>
            <text>'</text>
            <text>t</text>
            <softbreak />
            <text>be a closer either).</text>
          </paragraph>
        </item>
        <item>
          <paragraph>
            <text>Advance </text>
            <code>current_position</code>
            <text> to the next element in the stack.</text>
          </paragraph>
        </item>
      </list>
    </item>
  </list>
  <paragraph>
    <text>After we</text>
    <text>'</text>
    <text>re done, we remove all delimiters above </text>
    <code>stack_bottom</code>
    <text> from the</text>
    <softbreak />
    <text>delimiter stack.</text>
  </paragraph>
</document>
